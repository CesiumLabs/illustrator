var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ArcToPoint.html",[0,0.008,1,2.344]],["body/interfaces/ArcToPoint.html",[0,0.014,1,3.886,2,1.074,3,0.209,4,0.166,5,0.166,6,2.865,7,0.125,8,0.361,9,2.32,10,4.12,11,4.421,12,4.12,13,4.421,14,0.55,15,0.2,16,0.017,17,0.209,18,2.491,19,2.11,20,0.3,21,3.489,22,1.563,23,1.435,24,2.357,25,2.503,26,2.503,27,1.273,28,3.489,29,2.865,30,2.865,31,3.489,32,2.865,33,2.865,34,2.865,35,2.865,36,0.245,37,2.67,38,0.865,39,0.335,40,2.865,41,1.795,42,2.865,43,0.48,44,2.865,45,2.503,46,3.071,47,2.775,48,2.491,49,2.503,50,2.503,51,2.503,52,2.865,53,2.865,54,2.865,55,2.865,56,2.865,57,2.865,58,2.865,59,2.865,60,2.865,61,2.865,62,2.865,63,2.865,64,2.865,65,2.865,66,0.012,67,0.012]],["title/classes/BackgroundColorTool.html",[36,0.215,68,3.324]],["body/classes/BackgroundColorTool.html",[3,0.176,4,0.14,5,0.14,7,0.105,8,0.322,14,0.54,15,0.2,16,0.017,17,0.176,20,0.158,22,1.251,23,1.61,36,0.206,38,1.008,39,0.378,41,1.694,43,0.453,66,0.011,67,0.011,68,4.408,69,0.729,70,3.692,71,1.857,72,1.928,73,1.548,74,0.964,75,1.104,76,1.053,77,3.109,78,1.913,79,3.336,80,3.109,81,5.103,82,3.336,83,2.02,84,2.02,85,1.251,86,1.053,87,0.905,88,2.708,89,1.532,90,2.019,91,1.333,92,1.461,93,5.103,94,5.69,95,5.538,96,3.692,97,1.307,98,0.807,99,0.764,100,1.476,101,3.692,102,0.905,103,3.336,104,1.541,105,4.172,106,4.172,107,3.692,108,2.383,109,3.109,110,3.692,111,5.103,112,3.692,113,5.103,114,3.692,115,1.461,116,1.461,117,1.689,118,2.859,119,3.692,120,3.692,121,2.859,122,3.19,123,3.19]],["title/classes/BaseShapeTool.html",[18,1.674,36,0.215]],["body/classes/BaseShapeTool.html",[3,0.125,4,0.099,5,0.099,7,0.075,8,0.25,14,0.505,15,0.213,16,0.017,17,0.229,18,1.727,20,0.112,22,0.64,23,1.206,36,0.146,38,0.784,39,0.379,41,1.83,43,0.498,66,0.008,67,0.008,69,0.516,71,1.737,72,1.499,73,1.204,74,0.75,75,0.906,76,0.819,77,2.418,78,1.456,79,2.595,80,2.418,82,2.595,83,1.658,84,1.658,85,1.177,86,0.99,87,1.177,88,2.401,89,1.538,90,1.57,91,0.943,92,1.033,97,1.382,98,0.853,99,0.808,100,1.512,102,0.64,103,2.595,104,1.463,105,3.699,106,3.699,108,2.025,109,2.418,115,1.033,116,1.033,118,2.022,121,2.022,122,2.257,124,2.612,125,3.792,126,2.807,127,2.595,128,3.792,129,2.807,130,2.807,131,2.807,132,2.807,133,2.807,134,2.807,135,2.612,136,2.807,137,2.401,138,2.612,139,2.281,140,1.899,141,2.807,142,2.612,143,2.807,144,2.612,145,2.612,146,2.807,147,2.612,148,2.807,149,2.612,150,2.807,151,3.395,152,2.612,153,2.807,154,2.807,155,2.612,156,1.848,157,2.807,158,3.395,159,3.395,160,3.395,161,2.612,162,2.418,163,2.807,164,2.612,165,1.015,166,2.807,167,2.612,168,2.807,169,2.612,170,2.807,171,2.612,172,1.083,173,6.071,174,0.943,175,0.987,176,3.395,177,2.257,178,2.612,179,2.612,180,2.612,181,2.612,182,1.592,183,1.592,184,2.612,185,3.969,186,3.969,187,3.969,188,4.146,189,3.969,190,6.071,191,6.071,192,1.499,193,2.017,194,1.57,195,1.153,196,3.969,197,3.969,198,2.612,199,2.612,200,2.612,201,2.612,202,3.073]],["title/interfaces/ColorConfig.html",[0,0.008,203,2.516]],["body/interfaces/ColorConfig.html",[0,0.008,2,0.963,3,0.187,4,0.149,5,0.149,7,0.112,8,0.336,14,0.536,15,0.219,16,0.017,17,0.254,20,0.228,27,1.755,36,0.22,39,0.361,43,0.509,66,0.011,67,0.011,87,1.48,98,0.825,99,0.614,104,1.656,108,2.779,137,2.992,195,1.547,203,3.948,204,3.393,205,5.592,206,4.32,207,3.04,208,2.243,209,4.664,210,3.393,211,3.393,212,3.393,213,3.393,214,3.393,215,2.393,216,1.803,217,1.169,218,3.393,219,4.598,220,1.305,221,3.393,222,2.863,223,4.598,224,3.393,225,4.598,226,3.393,227,1.192,228,3.393,229,3.393,230,3.393,231,3.393,232,2.778,233,3.393,234,3.393,235,3.393,236,3.393,237,3.393,238,2.568,239,3.393,240,3.041,241,4.598,242,3.393,243,3.041,244,3.393,245,3.393,246,2.393,247,3.393,248,2.393,249,3.393,250,3.393,251,3.393]],["title/classes/ColorSwatches.html",[36,0.215,215,2.344]],["body/classes/ColorSwatches.html",[0,0.007,3,0.167,4,0.133,5,0.133,7,0.1,14,0.529,15,0.192,16,0.017,17,0.235,20,0.211,27,1.019,36,0.196,39,0.38,43,0.498,66,0.01,67,0.01,69,0.692,76,1.016,87,1.394,89,1.531,97,1.33,98,0.896,99,0.777,100,1.531,102,0.859,104,1.683,108,2.545,140,1.387,195,1.43,203,4.032,204,3.028,205,3.028,207,2.811,208,2.002,209,4.807,210,3.028,211,3.028,212,3.028,213,3.028,214,3.028,215,2.999,216,1.809,217,1.113,218,4.252,219,4.252,220,1.207,221,3.028,222,2.647,223,4.252,224,3.028,225,4.252,226,3.028,227,1.123,228,3.028,229,3.028,230,4.252,231,3.028,232,3.481,233,3.028,234,4.252,235,3.028,236,5.328,237,3.028,238,4.032,239,3.028,240,5.467,241,5.328,242,3.028,243,4.775,244,3.028,245,3.028,246,3.758,247,3.028,248,3.758,249,4.252,250,3.028,251,3.028,252,3.81,253,4.252,254,3.505,255,3.505,256,3.505,257,3.505,258,3.505,259,3.505,260,3.505,261,3.505,262,3.481,263,3.505,264,3.505,265,3.505,266,3.505]],["title/classes/ColorUtil.html",[36,0.215,267,2.721]],["body/classes/ColorUtil.html",[3,0.095,4,0.075,5,0.075,7,0.057,8,0.202,15,0.154,16,0.016,20,0.085,36,0.111,38,0.392,39,0.22,43,0.37,66,0.007,67,0.007,69,0.392,76,0.661,85,0.487,86,0.41,89,1.044,97,0.794,98,0.49,99,0.464,100,0.952,104,1.412,108,1.209,137,1.266,192,0.75,194,0.785,195,0.577,206,1.829,217,0.358,240,3.572,267,2.264,268,1.986,269,4.825,270,2.298,271,3.201,272,3.201,273,4.614,274,3.201,275,1.134,276,3.201,277,5.06,278,3.201,279,3.986,280,3.201,281,3.201,282,3.201,283,3.201,284,3.201,285,3.201,286,3.201,287,3.986,288,3.201,289,3.201,290,3.201,291,3.201,292,3.201,293,3.201,294,3.201,295,3.201,296,3.201,297,3.201,298,3.201,299,3.201,300,3.201,301,3.201,302,3.201,303,3.201,304,3.201,305,3.201,306,3.201,307,3.201,308,3.201,309,3.201,310,3.201,311,3.201,312,3.201,313,3.201,314,3.201,315,3.201,316,3.201,317,3.201,318,3.201,319,3.201,320,3.201,321,3.201,322,3.201,323,3.201,324,3.201,325,3.201,326,3.201,327,3.201,328,3.201,329,3.201,330,3.201,331,3.201,332,3.201,333,3.201,334,3.201,335,3.201,336,3.201,337,3.201,338,3.201,339,3.201,340,3.201,341,4.614,342,3.201,343,3.201,344,3.201,345,3.201,346,3.201,347,3.201,348,3.201,349,3.201,350,3.201,351,3.201,352,3.201,353,3.201,354,2.766,355,3.201,356,3.201,357,3.201,358,3.201,359,3.201,360,3.201,361,3.201,362,3.201,363,3.201,364,3.201,365,3.201,366,3.201,367,3.201,368,3.201,369,3.201,370,3.201,371,3.201,372,3.201,373,3.201,374,3.201,375,3.201,376,3.201,377,3.201,378,3.201,379,3.201,380,3.201,381,3.201,382,3.201,383,4.614,384,3.201,385,3.201,386,3.201,387,3.201,388,3.201,389,3.201,390,3.201,391,3.201,392,3.201,393,3.201,394,3.201,395,3.201,396,3.201,397,3.201,398,3.201,399,3.201,400,3.201,401,3.201,402,3.201,403,3.201,404,3.201,405,3.201,406,4.614,407,3.201,408,3.201,409,3.201,410,3.201,411,3.201,412,3.201,413,3.201,414,3.201,415,3.201,416,3.201,417,4.614,418,3.201,419,3.201,420,3.201,421,3.201,422,3.201,423,3.201,424,3.201,425,3.201,426,3.201,427,3.201,428,3.986,429,3.201,430,3.201,431,3.201,432,3.201,433,3.201,434,3.201,435,3.201,436,3.201,437,3.201,438,4.614,439,3.201,440,3.201,441,3.201,442,3.201,443,3.201,444,3.201,445,3.201,446,3.201,447,3.201,448,3.201,449,3.201,450,3.201,451,3.201,452,3.201,453,3.201,454,3.201,455,3.201,456,3.201,457,3.201,458,3.201,459,3.201,460,3.201,461,3.201,462,3.201,463,3.201,464,3.201,465,3.201,466,3.201,467,3.201,468,3.201,469,3.201,470,3.201,471,3.201,472,3.201,473,4.614,474,3.201,475,3.201,476,3.201,477,3.201,478,3.201,479,3.201,480,3.201,481,3.201,482,3.201,483,3.201,484,3.201,485,3.201,486,4.614,487,3.201,488,3.201,489,3.201,490,3.201,491,3.201,492,3.201,493,2.766,494,3.201,495,3.201,496,3.201,497,3.201,498,3.201,499,3.201,500,3.201,501,3.201,502,3.201,503,3.201,504,3.201,505,3.201,506,3.201,507,3.201,508,3.201,509,3.201,510,3.201,511,3.201,512,3.201,513,3.201,514,3.201,515,3.201,516,3.201,517,3.201,518,3.201,519,3.201,520,3.201,521,3.201,522,3.201,523,3.201,524,3.201,525,3.201,526,3.201,527,3.201,528,3.201,529,3.201,530,3.201,531,3.201,532,3.201,533,3.201,534,3.201,535,3.201,536,3.201,537,3.201,538,3.201,539,3.201,540,3.201,541,3.201,542,3.201,543,3.201,544,3.201,545,3.201,546,3.201,547,3.201,548,3.201,549,3.201,550,3.201,551,3.201,552,3.201,553,3.201,554,3.201,555,3.201,556,3.201,557,3.201,558,3.201,559,3.201,560,3.201,561,3.201,562,3.201,563,3.201,564,3.201,565,3.201,566,3.201,567,3.201,568,2.766,569,3.201,570,3.201,571,3.201,572,3.201,573,3.201,574,3.201,575,3.201,576,3.201,577,3.201,578,3.201,579,3.201,580,3.201,581,3.201,582,3.201,583,3.201,584,3.201,585,3.201,586,3.201,587,3.201,588,3.201,589,3.201,590,3.201,591,3.201,592,4.614,593,3.201,594,3.201,595,3.201,596,3.201,597,3.201,598,3.201,599,3.201,600,3.201,601,3.201,602,3.201,603,3.201,604,3.201,605,3.201,606,3.201,607,3.201,608,3.201,609,3.201,610,3.201,611,3.201,612,3.201,613,3.201,614,3.201,615,3.201,616,3.201,617,3.201,618,3.201,619,3.201,620,1.986,621,3.201,622,1.986,623,3.114,624,3.201,625,1.986,626,1.986,627,3.201,628,1.986,629,0.657,630,1.715,631,0.823,632,1.986,633,1.986,634,3.201,635,1.986,636,1.986,637,4.916,638,1.986,639,1.986,640,1.986,641,1.986,642,1.986,643,4.614,644,1.986,645,5.41,646,5.41,647,5.41,648,3.201,649,4.614,650,1.404,651,5.41,652,1.986,653,3.201,654,3.201,655,1.986,656,1.986,657,1.986,658,1.986,659,1.986,660,1.986,661,1.986,662,1.986,663,1.986,664,1.715,665,1.986,666,1.986,667,1.986,668,1.986,669,1.986,670,1.986,671,1.986,672,1.986,673,1.986,674,1.986]],["title/classes/Colors.html",[36,0.215,270,2.198]],["body/classes/Colors.html",[3,0.25,4,0.199,5,0.199,7,0.149,8,0.405,15,0.183,16,0.017,17,0.331,20,0.224,36,0.293,39,0.373,66,0.013,67,0.013,69,1.034,74,1.308,85,1.572,86,1.323,89,1.489,97,1.034,98,0.639,99,0.605,215,4.398,217,1.157,267,4.899,270,3.662,631,2.172,675,5.239,676,2.681,677,5.363,678,4.899,679,4.056,680,6.41,681,5.239,682,5.239,683,2.992,684,5.239,685,2.172]],["title/interfaces/ConvolutionOptions.html",[0,0.008,686,2.721]],["body/interfaces/ConvolutionOptions.html",[0,0.009,2,1.11,3,0.216,4,0.172,5,0.172,7,0.129,8,0.369,14,0.518,15,0.202,16,0.017,17,0.279,20,0.25,23,1.316,27,1.883,36,0.253,38,0.894,39,0.216,66,0.012,67,0.012,71,1.496,94,3.506,95,3.506,99,0.864,117,2.071,174,1.635,175,1.711,192,2.587,194,2.314,227,1.517,686,4.583,687,3.912,688,5.916,689,5.916,690,5.916,691,5.302,692,5.302,693,2.819,694,3.564,695,3.203,696,3.506,697,3.912,698,2.314,699,5.053,700,3.912,701,3.912,702,3.912,703,3.912,704,2.759,705,3.506,706,5.053,707,5.053,708,5.053,709,5.053,710,5.053,711,3.203,712,3.912,713,4.529,714,3.912,715,4.529,716,3.912,717,2.961,718,3.912,719,3.912,720,3.912,721,3.912,722,3.912,723,3.912]],["title/classes/ConvolutionTool.html",[36,0.215,695,2.721]],["body/classes/ConvolutionTool.html",[0,0.009,3,0.198,4,0.157,5,0.157,7,0.118,8,0.348,14,0.424,15,0.177,16,0.017,17,0.263,20,0.236,23,1.241,27,1.203,36,0.231,38,1.089,39,0.37,66,0.012,67,0.012,69,0.817,71,1.902,72,2.083,73,1.672,74,1.041,75,1.171,76,1.138,78,1.881,83,2.142,84,2.142,85,1.352,86,1.138,87,1.015,88,2.802,89,1.515,90,2.181,91,1.495,92,1.637,94,3.205,95,3.205,97,0.817,98,0.505,99,0.478,100,1.364,102,1.015,115,1.637,116,1.637,117,1.893,139,1.637,172,1.716,174,1.495,175,1.564,192,2.498,194,2.181,227,1.495,686,4.677,687,3.576,688,3.576,689,3.576,690,3.576,691,3.205,692,3.205,693,1.801,694,3.36,695,3.9,696,4.269,697,3.576,698,2.181,699,4.764,700,3.576,701,3.576,702,3.576,703,3.576,704,2.522,705,3.205,706,4.764,707,4.764,708,4.764,709,4.764,710,4.764,711,2.927,712,3.576,713,4.269,714,3.576,715,4.269,716,3.576,717,2.706,718,3.576,719,3.576,720,3.576,721,3.576,722,3.576,723,3.576,724,4.764,725,3.36,726,4.764,727,4.139,728,4.139,729,4.139]],["title/interfaces/CreateLayerOptions.html",[0,0.008,730,2.721]],["body/interfaces/CreateLayerOptions.html",[0,0.01,2,0.826,3,0.161,4,0.128,5,0.128,7,0.096,8,0.302,14,0.494,15,0.19,16,0.017,17,0.289,20,0.259,36,0.188,39,0.357,43,0.523,66,0.01,67,0.01,73,1.022,74,0.636,75,1.403,87,0.826,98,0.889,99,0.699,104,1.573,137,1.893,139,1.332,165,0.862,193,1.712,194,2.63,195,1.761,207,2.733,208,1.924,217,1.235,220,1.485,222,2.573,227,1.38,238,2.202,629,2.003,676,1.922,683,1.924,685,1.396,730,4.285,731,2.382,732,2.636,733,4.816,734,3.936,735,2.608,736,2.915,737,0.979,738,3.936,739,4.77,740,5.029,741,1.712,742,1.924,743,2.608,744,2.608,745,5.411,746,4.691,747,3.705,748,3.705,749,3.705,750,3.705,751,4.691,752,3.705,753,3.705,754,3.705,755,3.705,756,3.705,757,2.608,758,2.608,759,3.705,760,2.608,761,2.608,762,2.608,763,2.608,764,3.705,765,2.608,766,2.608,767,2.608,768,5.295,769,2.608,770,2.608,771,2.608,772,4.309,773,2.608,774,2.608,775,3.705,776,2.608,777,2.608,778,2.608,779,2.608,780,2.608,781,2.608,782,2.608,783,2.608,784,2.608,785,2.608,786,2.608,787,1.812,788,2.608,789,2.608,790,2.608,791,2.608,792,2.608,793,2.608,794,2.608,795,2.608]],["title/interfaces/CubicBezierCurveOptions.html",[0,0.008,31,2.344]],["body/interfaces/CubicBezierCurveOptions.html",[0,0.014,1,3.464,2,1.063,3,0.207,4,0.165,5,0.165,6,2.834,7,0.124,8,0.359,9,1.88,10,2.641,11,2.834,12,2.641,13,2.834,14,0.551,15,0.205,16,0.017,17,0.207,18,2.474,19,2.087,20,0.299,21,3.464,22,1.759,23,1.615,24,2.332,25,2.476,26,2.476,27,1.26,28,3.464,29,2.834,30,2.834,31,3.866,32,4.403,33,4.403,34,4.403,35,4.403,36,0.242,37,2.641,38,0.856,39,0.334,40,2.834,41,1.789,42,2.834,43,0.479,44,2.834,45,2.476,46,3.055,47,2.76,48,2.474,49,2.476,50,2.476,51,2.476,52,2.834,53,2.834,54,2.834,55,2.834,56,2.834,57,2.834,58,2.834,59,2.834,60,2.834,61,2.834,62,2.834,63,2.834,64,2.834,65,2.834,66,0.012,67,0.012]],["title/classes/DataSource.html",[36,0.215,796,2.344]],["body/classes/DataSource.html",[0,0.012,3,0.171,4,0.19,5,0.136,7,0.102,8,0.316,9,1.187,14,0.486,15,0.199,16,0.017,17,0.171,20,0.267,22,1.227,23,1.126,27,1.454,36,0.201,39,0.378,43,0.449,66,0.01,67,0.01,69,0.709,76,1.033,85,0.88,86,1.189,89,1.508,97,1.23,98,0.799,99,0.719,100,1.489,102,1.412,104,1.662,137,1.42,165,0.918,195,1.454,206,2.858,216,1.939,217,1.04,220,1.227,227,0.709,246,3.797,248,3.797,693,3.091,698,1.979,732,2.177,737,1.043,796,4.135,797,2.539,798,5.004,799,4.408,800,5.004,801,5.004,802,4.408,803,3.59,804,3.539,805,4.437,806,3.59,807,3.59,808,3.539,809,3.59,810,5.024,811,3.539,812,3.59,813,3.539,814,3.59,815,3.59,816,3.59,817,3.59,818,3.59,819,3.539,820,2.288,821,1.931,822,1.931,823,1.42,824,3.272,825,3.272,826,2.347,827,2.347,828,2.347,829,2.347,830,2.05,831,2.539,832,2.539,833,4.8,834,2.539,835,2.539,836,2.539,837,2.858,838,2.539,839,2.539,840,2.539,841,2.539,842,2.539,843,2.539,844,3.539,845,2.539,846,2.539,847,2.539]],["title/interfaces/DrawArcOptions.html",[0,0.008,21,2.344]],["body/interfaces/DrawArcOptions.html",[0,0.014,1,3.457,2,1.06,3,0.206,4,0.164,5,0.164,6,2.826,7,0.123,8,0.358,9,2.31,10,2.633,11,2.826,12,2.633,13,2.826,14,0.55,15,0.205,16,0.017,17,0.206,18,2.469,19,2.081,20,0.299,21,3.86,22,1.758,23,1.613,24,3.618,25,3.842,26,3.842,27,1.841,28,3.457,29,2.826,30,2.826,31,3.457,32,2.826,33,2.826,34,2.826,35,2.826,36,0.242,37,2.633,38,0.853,39,0.333,40,2.826,41,1.787,42,2.826,43,0.478,44,2.826,45,2.469,46,3.05,47,2.756,48,2.469,49,2.469,50,2.469,51,2.469,52,2.826,53,2.826,54,2.826,55,2.826,56,2.826,57,2.826,58,2.826,59,2.826,60,2.826,61,2.826,62,2.826,63,2.826,64,2.826,65,2.826,66,0.012,67,0.012,99,0.655]],["title/interfaces/DrawEllipseOptions.html",[0,0.008,848,2.979]],["body/interfaces/DrawEllipseOptions.html",[0,0.01,2,1.147,3,0.223,4,0.178,5,0.178,7,0.133,8,0.377,9,1.547,14,0.546,15,0.217,16,0.017,17,0.223,18,2.599,19,2.253,20,0.282,22,1.699,23,1.56,24,3.728,25,3.959,26,3.959,27,1.912,36,0.262,38,0.924,39,0.285,41,1.528,43,0.409,45,2.672,46,2.876,47,2.599,48,2.035,49,3.411,50,3.411,51,3.959,66,0.012,67,0.012,87,1.464,99,0.689,848,5.094,849,3.622,850,5.988,851,5.988,852,5.988,853,4.624,854,3.308,855,3.622,856,3.058,857,4.041,858,4.041,859,4.041,860,4.041,861,4.041]],["title/classes/EllipseTool.html",[36,0.215,855,2.979]],["body/classes/EllipseTool.html",[0,0.006,3,0.143,4,0.113,5,0.113,7,0.085,8,0.277,9,0.987,14,0.519,15,0.219,16,0.017,17,0.143,18,3.255,19,1.438,20,0.223,22,1.075,23,1.17,24,1.606,25,1.705,26,1.705,27,0.868,36,0.167,38,0.866,39,0.38,41,1.122,43,0.3,45,1.705,46,2.112,47,1.908,48,1.299,49,2.505,50,2.505,51,3.272,66,0.009,67,0.009,69,0.59,71,1.632,72,1.657,73,1.33,74,0.828,75,0.982,76,0.905,77,2.672,78,1.577,79,2.867,80,2.672,82,2.867,83,1.796,84,1.796,85,1.274,86,1.073,87,1.274,88,3.001,89,1.577,90,1.735,91,1.078,92,1.181,97,1.448,98,0.894,99,0.846,100,1.559,102,0.732,103,1.952,104,1.289,105,3.491,106,3.491,108,1.657,109,1.819,115,1.181,116,1.181,125,3.677,126,3.102,127,2.867,128,3.677,129,3.102,130,3.102,131,3.102,132,3.102,133,3.102,134,3.102,136,2.112,137,2.524,139,2.414,140,2.056,141,2.112,143,2.112,146,2.112,148,2.112,150,2.112,151,3.102,153,2.112,154,2.112,156,2.112,157,2.112,158,3.102,159,3.102,160,3.102,162,1.819,163,2.112,165,0.764,166,2.112,168,2.112,170,2.112,172,1.238,848,4.435,849,2.312,850,2.579,851,2.579,852,2.579,853,4.435,854,2.112,855,3.396,856,2.867,857,2.579,858,2.579,859,2.579,860,2.579,861,3.789,862,2.672,863,4.386,864,2.986,865,2.986,866,2.312,867,2.312,868,2.312,869,2.312,870,2.312,871,2.312,872,2.312,873,2.312,874,2.312,875,2.312,876,2.312,877,2.312,878,2.312,879,2.312]],["title/interfaces/EraserOptions.html",[0,0.008,880,2.979]],["body/interfaces/EraserOptions.html",[0,0.01,2,1.243,3,0.242,4,0.192,5,0.192,7,0.145,8,0.397,9,1.677,14,0.539,15,0.204,16,0.017,17,0.242,20,0.269,22,1.75,23,1.606,36,0.284,38,1.001,39,0.3,41,1.607,43,0.43,47,2.734,48,2.206,66,0.013,67,0.013,71,1.607,117,2.319,165,1.826,182,3.089,183,3.089,192,2.374,202,3.926,704,3.089,737,2.074,854,3.586,880,5.286,881,4.38,882,3.926,883,4.38,884,4.38,885,3.315,886,3.315,887,4.38,888,4.38,889,4.38,890,4.38,891,4.38,892,4.38,893,4.38]],["title/classes/EraserTool.html",[36,0.215,882,2.979]],["body/classes/EraserTool.html",[0,0.009,3,0.211,4,0.168,5,0.168,7,0.126,8,0.364,9,1.465,14,0.482,15,0.183,16,0.017,17,0.211,20,0.247,22,1.086,23,0.997,36,0.248,38,1.139,39,0.376,41,1.475,43,0.395,47,2.509,48,1.927,66,0.012,67,0.012,69,0.875,71,1.927,72,2.178,73,1.749,74,1.089,75,1.211,76,1.19,78,1.944,83,2.215,84,2.215,85,1.414,86,1.19,87,1.086,88,2.855,89,1.538,90,2.281,91,1.6,92,1.752,97,1.139,98,0.703,99,0.665,100,1.453,102,1.086,115,1.752,116,1.752,117,2.026,139,2.281,165,1.133,172,1.837,182,2.699,183,2.699,192,2.178,202,3.43,704,2.699,737,1.287,854,3.133,880,5.258,881,3.827,882,4.464,883,4.981,884,3.827,885,2.896,886,2.896,887,4.981,888,3.827,889,3.827,890,3.827,891,3.827,892,3.827,893,3.827,894,5.766,895,5.766,896,4.43,897,4.43]],["title/classes/FilterTool.html",[36,0.215,898,3.324]],["body/classes/FilterTool.html",[3,0.13,4,0.103,5,0.103,7,0.078,8,0.258,9,1.808,14,0.543,15,0.206,16,0.017,17,0.13,20,0.175,22,1.002,23,1.231,36,0.152,38,0.807,39,0.377,41,0.695,43,0.483,66,0.009,67,0.009,69,0.537,71,1.722,72,1.545,73,1.24,74,0.772,75,0.928,76,0.844,78,1.491,83,1.698,84,1.698,85,1.511,86,1.521,87,0.666,88,2.438,89,1.521,90,1.617,91,0.981,92,1.075,97,1.376,98,0.921,99,0.804,100,1.487,102,0.666,104,1.568,108,2.066,115,1.075,116,1.075,117,1.243,172,1.127,194,1.617,195,1.957,217,1.215,220,1.65,262,5.491,664,5.324,898,3.532,899,2.347,900,4.089,901,3.806,902,4.247,903,4.089,904,3.532,905,4.916,906,3.532,907,3.477,908,4.916,909,4.916,910,4.916,911,4.089,912,4.725,913,2.717,914,2.347,915,4.089,916,2.717,917,4.089,918,2.717,919,4.089,920,2.717,921,4.089,922,2.717,923,4.089,924,2.717,925,4.089,926,2.717,927,4.247,928,4.089,929,2.717,930,4.089,931,2.717,932,4.089,933,2.717,934,4.089,935,2.717,936,2.717,937,2.717,938,2.717,939,2.717,940,2.717,941,2.717,942,3.532,943,6.859,944,2.717,945,2.717,946,2.717,947,2.717,948,2.717,949,2.717,950,3.166,951,2.347,952,2.717,953,2.717,954,2.717,955,2.717,956,2.717]],["title/interfaces/FrameLayer.html",[0,0.008,957,2.979]],["body/interfaces/FrameLayer.html",[0,0.007,2,0.814,3,0.159,4,0.126,5,0.126,7,0.095,8,0.299,14,0.529,15,0.135,16,0.017,17,0.264,20,0.203,36,0.186,39,0.354,43,0.498,66,0.01,67,0.01,74,0.627,75,1.419,86,1.366,99,0.547,192,1.255,193,2.407,195,1.979,216,1.319,217,1.326,220,1.783,222,2.97,227,1.257,275,1.897,629,2.429,676,1.907,683,1.897,685,1.377,693,2.402,698,1.314,957,4.661,958,2.869,959,5.632,960,5.689,961,2.023,962,2.869,963,4.092,964,4.092,965,2.869,966,3.936,967,4.661,968,2.869,969,2.869,970,5.201,971,4.77,972,2.869,973,2.869,974,2.171,975,4.092,976,2.869,977,2.869,978,4.092,979,2.869,980,2.869,981,2.869,982,2.869,983,2.869,984,2.869,985,4.092,986,1.897,987,2.869,988,2.869,989,4.092,990,2.869,991,4.092,992,2.869,993,4.092,994,2.869,995,4.092,996,2.869,997,4.092,998,2.869,999,4.092,1000,2.869,1001,3.905,1002,2.869,1003,4.092,1004,2.869,1005,3.35,1006,2.869,1007,4.092,1008,2.869,1009,4.092,1010,2.869,1011,4.092,1012,1.964,1013,2.869,1014,2.869,1015,2.023,1016,2.869,1017,2.869,1018,2.869,1019,2.184,1020,2.869,1021,4.092,1022,2.869,1023,2.869,1024,2.869,1025,2.869,1026,2.869,1027,2.869,1028,2.869,1029,2.869,1030,2.869,1031,2.869,1032,2.869,1033,2.869,1034,2.869,1035,2.869,1036,2.869,1037,2.869,1038,2.869,1039,2.869,1040,2.869,1041,1.599,1042,2.869,1043,4.092,1044,2.869,1045,1.786,1046,1.786,1047,1.786,1048,1.786,1049,2.349,1050,2.571,1051,2.571,1052,2.571,1053,2.869,1054,2.869,1055,2.869,1056,2.869]],["title/classes/Illustrator.html",[36,0.215,676,1.329]],["body/classes/Illustrator.html",[0,0.007,3,0.161,4,0.128,5,0.128,7,0.096,8,0.302,14,0.487,15,0.173,16,0.017,17,0.318,20,0.274,36,0.189,39,0.373,43,0.438,66,0.01,67,0.01,69,0.666,74,1.256,75,1.292,76,0.988,78,2.075,85,1.57,86,1.321,89,1.488,97,0.946,98,0.679,99,0.553,100,0.988,165,1.551,174,1.218,175,1.274,216,1.853,217,1.284,220,0.827,227,1.351,270,3.463,629,1.841,631,1.398,676,1.654,685,1.398,698,1.894,717,2.205,725,2.918,732,1.467,737,1.861,741,1.714,742,3.657,823,2.203,862,2.918,961,2.055,966,2.205,1005,2.385,1012,2.758,1015,3.393,1019,2.203,1041,2.919,1045,2.576,1046,2.576,1047,2.576,1048,2.576,1057,2.913,1058,4.811,1059,3.372,1060,4.789,1061,4.137,1062,3.372,1063,4.137,1064,3.372,1065,4.789,1066,3.939,1067,4.137,1068,3.372,1069,4.137,1070,4.694,1071,3.372,1072,2.434,1073,3.372,1074,3.372,1075,3.372,1076,3.939,1077,2.385,1078,2.913,1079,2.913,1080,2.913,1081,2.913,1082,4.137,1083,3.387,1084,4.137,1085,4.137,1086,4.137,1087,2.913,1088,2.611,1089,4.288,1090,2.385,1091,2.913,1092,2.385,1093,2.385,1094,2.913,1095,2.913,1096,2.913,1097,4.137,1098,4.137,1099,4.137,1100,2.913,1101,2.913,1102,2.913,1103,2.913,1104,2.611,1105,2.611,1106,2.913,1107,2.913,1108,2.611,1109,2.913,1110,4.811,1111,2.611,1112,2.385,1113,2.913,1114,2.913,1115,2.913,1116,2.913,1117,2.913,1118,2.913,1119,2.913,1120,5.746,1121,2.913,1122,2.913,1123,2.913,1124,2.913,1125,2.913,1126,2.913]],["title/classes/IllustratorAnimation.html",[36,0.215,966,2.516]],["body/classes/IllustratorAnimation.html",[0,0.005,3,0.126,4,0.1,5,0.1,7,0.075,8,0.253,14,0.532,15,0.2,16,0.017,17,0.231,20,0.171,36,0.148,39,0.374,43,0.474,66,0.008,67,0.008,69,0.522,74,0.913,75,1.41,76,0.826,86,1.258,89,1.479,97,1.367,98,0.844,99,0.799,100,1.448,102,0.648,140,1.584,192,0.999,193,2.036,195,1.841,216,1.115,217,1.267,220,1.697,222,2.601,227,1.144,275,1.51,629,2.32,631,1.096,676,2.308,679,2.047,683,1.51,685,1.096,693,2.522,698,1.046,742,1.51,957,4.905,958,2.284,959,5.432,960,5.173,961,1.611,962,2.284,963,3.46,964,4.66,965,2.284,966,4.267,967,4.176,968,2.284,969,4.66,970,4.66,971,5.269,972,2.284,973,2.284,974,1.729,975,3.46,976,2.284,977,2.284,978,3.46,979,2.284,980,3.46,981,2.284,982,2.284,983,2.284,984,2.284,985,3.46,986,1.51,987,2.284,988,3.46,989,4.177,990,2.284,991,3.46,992,3.46,993,4.177,994,2.284,995,3.46,996,3.46,997,4.177,998,2.284,999,3.46,1000,3.46,1001,3.815,1002,2.284,1003,3.46,1004,3.46,1005,3.42,1006,2.284,1007,3.46,1008,3.46,1009,4.177,1010,2.284,1011,3.46,1012,2.236,1013,4.66,1014,2.284,1015,1.611,1016,2.284,1017,2.284,1018,2.284,1019,1.913,1020,2.284,1021,3.46,1022,2.284,1023,2.284,1024,2.284,1025,2.284,1026,2.284,1027,2.284,1028,2.284,1029,2.284,1030,2.284,1031,2.284,1032,2.284,1033,2.284,1034,2.284,1035,2.284,1036,2.284,1037,2.284,1038,2.284,1039,2.284,1040,2.284,1041,1.273,1042,2.284,1043,3.46,1044,2.284,1045,1.422,1046,1.422,1047,1.422,1048,1.422,1049,1.87,1050,2.047,1051,2.047,1052,2.047,1053,2.284,1054,2.284,1055,2.284,1056,2.284,1072,1.344,1127,6.099,1128,4.005,1129,4.005,1130,4.005,1131,4.005,1132,4.005,1133,4.005,1134,4.005,1135,2.644,1136,2.644,1137,2.644,1138,2.644,1139,2.644,1140,2.644,1141,2.644,1142,2.644,1143,2.644,1144,2.644,1145,2.644,1146,2.644,1147,2.644,1148,2.644]],["title/classes/IllustratorColor.html",[36,0.215,209,2.516]],["body/classes/IllustratorColor.html",[0,0.009,3,0.208,4,0.166,5,0.166,7,0.124,8,0.36,14,0.48,15,0.182,16,0.017,17,0.208,20,0.244,36,0.244,39,0.372,43,0.299,66,0.012,67,0.012,69,0.861,74,1.357,76,1.178,89,1.533,97,0.861,98,0.776,99,0.503,100,1.393,102,1.069,104,1.519,108,2.157,192,1.648,195,1.659,203,4.581,209,3.732,215,4.38,216,2.002,217,0.787,220,1.069,227,0.861,623,5.226,631,1.808,650,3.085,677,5.226,685,1.808,725,3.478,1149,3.768,1150,5.831,1151,5.831,1152,6.052,1153,4.361,1154,4.361,1155,5.708,1156,4.361,1157,4.361,1158,4.361,1159,4.361,1160,3.768,1161,4.361,1162,4.42,1163,4.931,1164,3.768,1165,3.768,1166,3.768,1167,3.768,1168,3.768,1169,3.768,1170,3.768,1171,3.768,1172,3.768,1173,3.768,1174,3.768,1175,4.931,1176,3.768,1177,4.931,1178,3.768,1179,3.768,1180,3.768,1181,3.768,1182,3.768,1183,3.768,1184,3.768,1185,3.768]],["title/interfaces/IllustratorColorData.html",[0,0.008,1162,2.979]],["body/interfaces/IllustratorColorData.html",[0,0.01,2,1.154,3,0.225,4,0.179,5,0.179,7,0.134,8,0.379,14,0.532,15,0.213,16,0.017,17,0.225,20,0.257,36,0.263,39,0.286,43,0.322,66,0.013,67,0.013,74,1.133,102,1.154,104,1.35,108,2.266,137,2.372,192,1.779,195,1.743,203,3.921,206,3.426,209,3.079,215,4.021,216,1.67,217,0.85,220,1.154,227,0.93,623,5.38,650,3.33,677,3.646,685,1.952,1149,4.068,1150,6.003,1151,4.068,1152,6.199,1162,5.11,1163,6.199,1164,6.003,1165,4.068,1166,4.068,1167,4.068,1168,4.068,1169,4.068,1170,4.068,1171,4.068,1172,4.068,1173,4.068,1174,4.068,1175,5.181,1176,4.068,1177,5.181,1178,4.068,1179,4.068,1180,4.068,1181,4.068,1182,4.068,1183,4.068,1184,4.068,1185,4.068]],["title/interfaces/IllustratorDataSource.html",[0,0.008,805,2.516]],["body/interfaces/IllustratorDataSource.html",[0,0.013,2,1.024,3,0.199,4,0.211,5,0.159,7,0.119,8,0.35,9,1.381,14,0.504,15,0.207,16,0.017,17,0.199,20,0.284,22,1.36,23,1.248,27,1.612,36,0.233,39,0.359,43,0.473,66,0.012,67,0.012,86,1.144,98,0.809,104,1.676,165,1.068,195,1.612,206,2.385,216,1.978,217,1.124,220,1.36,227,0.824,246,2.544,248,2.544,693,2.71,698,2.194,732,2.413,737,1.213,796,4.043,797,2.953,799,2.953,802,2.953,804,2.953,805,4.516,808,2.953,810,5.022,811,2.953,813,2.953,819,2.953,820,2.536,821,2.246,822,3.35,823,2.464,824,4.339,825,4.339,826,2.73,827,2.73,828,2.73,829,2.73,830,2.385,831,2.953,832,2.953,833,5.022,834,2.953,835,2.953,836,2.953,837,3.168,838,2.953,839,2.953,840,2.953,841,2.953,842,2.953,843,2.953,844,3.923,845,2.953,846,2.953,847,2.953]],["title/interfaces/IllustratorExportConfig.html",[0,0.008,1070,2.979]],["body/interfaces/IllustratorExportConfig.html",[0,0.008,2,0.923,3,0.18,4,0.143,5,0.143,7,0.107,8,0.326,14,0.456,15,0.169,16,0.017,17,0.329,20,0.253,36,0.211,39,0.348,43,0.456,66,0.011,67,0.011,74,0.977,75,1.333,78,1.929,98,0.459,99,0.795,165,0.963,174,1.36,175,1.423,216,1.918,217,1.204,220,0.923,227,1.393,270,2.955,629,1.954,676,1.301,685,1.561,698,2.046,717,2.462,737,1.094,741,1.914,742,3.375,823,1.49,862,3.152,961,2.295,966,2.462,1005,4.499,1012,2.145,1015,2.295,1019,2.337,1041,3.063,1045,2.782,1046,2.782,1047,2.782,1048,2.782,1057,3.253,1058,3.253,1061,3.253,1063,3.253,1066,3.659,1067,3.253,1069,3.253,1070,4.575,1076,5.083,1077,2.663,1078,3.253,1079,3.253,1080,3.253,1081,3.253,1082,5.76,1083,4.499,1084,5.495,1085,5.495,1086,5.495,1087,3.253,1088,2.916,1089,4.499,1090,2.663,1091,3.253,1092,2.663,1093,2.663,1094,3.253,1095,3.253,1096,3.253,1097,4.469,1098,4.469,1099,4.469,1100,3.253,1101,3.253,1102,3.253,1103,3.253,1104,2.916,1105,2.916,1106,3.253,1107,3.253,1108,2.916,1109,3.253,1110,5.104,1111,2.916,1112,2.663,1113,3.253,1114,3.253,1115,3.253,1116,3.253,1117,3.253,1118,3.253,1119,3.253,1120,5.951,1121,3.253,1122,3.253,1123,3.253,1124,3.253,1125,3.253,1126,3.253]],["title/classes/IllustratorImage.html",[36,0.215,1186,1.853]],["body/classes/IllustratorImage.html",[0,0.008,3,0.191,4,0.248,5,0.152,7,0.114,14,0.369,15,0.186,16,0.017,17,0.291,20,0.291,36,0.224,38,1.064,39,0.359,43,0.466,66,0.011,67,0.011,69,0.79,74,0.755,76,1.112,89,1.447,97,1.203,98,0.743,99,0.703,100,1.346,165,1.023,174,1.946,175,1.511,216,1.697,217,0.973,227,1.415,269,4.96,631,1.658,725,3.283,737,1.162,1012,2.908,1019,1.582,1072,2.739,1076,3.811,1083,3.811,1186,2.935,1187,2.829,1188,4.451,1189,5.388,1190,5.388,1191,5.634,1192,5.634,1193,3.999,1194,3.725,1195,3.999,1196,4.655,1197,4.655,1198,4.441,1199,5.549,1200,3.999,1201,4.655,1202,3.999,1203,3.999,1204,3.999,1205,3.999,1206,3.999,1207,3.811,1208,4.172,1209,4.172,1210,4.172,1211,4.172,1212,4.172,1213,4.655,1214,3.096,1215,3.078,1216,3.096,1217,3.096,1218,3.455,1219,3.455,1220,3.455,1221,2.437,1222,2.151,1223,2.151,1224,2.151,1225,3.455,1226,3.455,1227,3.455,1228,3.455,1229,3.455,1230,4.655,1231,3.455,1232,4.655,1233,3.811,1234,3.811,1235,5.634,1236,3.455,1237,3.455,1238,3.455]],["title/classes/IllustratorImageManager.html",[36,0.215,1066,2.721]],["body/classes/IllustratorImageManager.html",[3,0.161,4,0.27,5,0.128,7,0.096,15,0.199,16,0.017,17,0.266,20,0.205,36,0.188,39,0.372,43,0.478,66,0.01,67,0.01,69,0.664,76,0.986,89,1.442,97,1.38,98,0.852,99,0.806,100,1.442,139,3.08,140,2.629,174,1.215,216,1.331,217,0.607,227,0.664,629,2.526,711,5.099,787,1.809,820,3.127,823,2.395,1012,3.121,1019,2.53,1066,3.381,1072,3.251,1186,2.916,1194,4.364,1214,2.605,1215,2.731,1239,3.364,1240,5.561,1241,5.561,1242,4.781,1243,4.781,1244,4.689,1245,3.701,1246,5.561,1247,5.561,1248,5.561,1249,6.987,1250,3.364,1251,5.561,1252,3.364,1253,4.781,1254,6.987,1255,3.364,1256,4.781,1257,3.364,1258,4.781,1259,3.364,1260,5.231,1261,3.701,1262,4.781,1263,3.364,1264,4.13,1265,5.561,1266,6.987,1267,3.364,1268,5.561,1269,3.364,1270,3.364,1271,3.364,1272,4.13,1273,3.364,1274,2.605,1275,2.906,1276,3.364,1277,3.364,1278,3.364,1279,3.364]],["title/interfaces/ImageDataSource.html",[0,0.008,825,2.516]],["body/interfaces/ImageDataSource.html",[0,0.013,2,1.044,3,0.203,4,0.213,5,0.162,7,0.121,8,0.355,9,1.408,14,0.506,15,0.198,16,0.017,17,0.203,20,0.286,22,1.377,23,1.264,27,1.633,36,0.238,39,0.36,43,0.476,66,0.012,67,0.012,86,1.434,98,0.519,104,1.638,137,2.222,165,1.089,195,1.633,206,2.432,216,1.751,217,1.135,220,1.377,227,0.841,246,2.594,248,2.594,693,2.736,698,2.222,732,3.024,737,1.237,796,4.074,797,3.011,799,3.011,802,3.011,804,3.011,805,4.372,808,3.011,810,5.05,811,3.011,813,3.011,819,3.011,820,3.058,821,2.29,822,2.29,823,1.684,824,3.673,825,4.111,826,2.783,827,2.783,828,2.783,829,2.783,830,2.432,831,3.011,832,3.011,833,5.05,834,3.011,835,3.011,836,3.011,837,3.209,838,3.011,839,3.011,840,3.011,841,3.011,842,3.011,843,3.011,844,3.973,845,3.011,846,3.011,847,3.011]],["title/classes/ImageLoader.html",[36,0.215,1215,2.198]],["body/classes/ImageLoader.html",[3,0.126,4,0.291,5,0.1,7,0.075,14,0.331,15,0.174,16,0.017,17,0.33,20,0.171,27,1.404,36,0.148,38,0.521,39,0.257,43,0.511,66,0.008,67,0.008,69,0.521,75,0.912,76,0.825,87,1.184,89,1.112,97,1.064,98,0.657,99,0.622,100,1.112,102,0.981,104,1.468,140,1.91,174,0.953,175,0.997,192,0.997,193,3.394,194,1.044,195,1.771,216,1.613,217,1.177,220,0.981,227,1.401,269,4.96,629,0.873,630,2.28,631,1.094,676,1.668,683,1.507,787,1.419,820,3.113,823,2.966,829,1.725,837,3.308,961,1.608,986,3.078,1001,2.829,1012,2.769,1019,2.58,1041,2.326,1072,1.341,1186,2.595,1194,3.889,1198,2.943,1215,2.285,1222,1.419,1223,1.419,1224,2.151,1244,3.097,1245,5.049,1260,3.455,1261,3.097,1264,4.172,1272,3.455,1274,3.739,1275,2.28,1280,1.866,1281,3.455,1282,5.389,1283,2.639,1284,3.999,1285,6.095,1286,6.529,1287,2.639,1288,3.999,1289,4.83,1290,4.172,1291,3.455,1292,2.639,1293,2.639,1294,3.858,1295,2.639,1296,2.639,1297,3.455,1298,5.389,1299,4.83,1300,4.172,1301,2.28,1302,2.639,1303,2.28,1304,2.28,1305,2.28,1306,5.265,1307,2.28,1308,2.28,1309,2.043,1310,3.455,1311,2.639,1312,2.043,1313,2.639,1314,2.28,1315,3.999,1316,5.47,1317,2.639,1318,2.639,1319,2.639,1320,2.639,1321,2.639,1322,2.639,1323,2.639,1324,2.639,1325,2.639,1326,2.28,1327,4.172,1328,3.739,1329,2.639,1330,2.639,1331,2.639,1332,2.639,1333,2.639,1334,2.639,1335,3.999,1336,3.999,1337,2.639,1338,2.639,1339,2.639,1340,4.83,1341,2.639,1342,3.999,1343,3.999,1344,3.999,1345,2.639,1346,2.28,1347,2.28,1348,2.639,1349,2.639,1350,2.28,1351,6.095,1352,2.639,1353,2.639,1354,2.639,1355,2.639,1356,2.639,1357,2.639,1358,2.639,1359,2.639,1360,2.639,1361,2.639,1362,2.639,1363,2.639,1364,2.639,1365,2.639,1366,2.639,1367,2.639,1368,2.639,1369,2.639,1370,2.28,1371,2.639,1372,2.28,1373,2.639,1374,2.639,1375,2.639,1376,2.639,1377,2.639,1378,2.639,1379,2.639,1380,2.639]],["title/classes/ImageTool.html",[36,0.215,1381,2.979]],["body/classes/ImageTool.html",[3,0.149,4,0.172,5,0.119,7,0.089,8,0.286,9,1.764,14,0.55,15,0.195,16,0.017,17,0.255,20,0.134,22,1.111,27,1.701,36,0.175,38,0.895,39,0.374,41,1.16,43,0.444,66,0.009,67,0.009,69,0.617,71,1.786,72,1.712,73,1.375,74,0.856,75,1.008,76,0.935,78,1.618,83,1.843,84,1.843,85,1.111,86,0.935,87,0.766,88,2.564,89,1.499,90,1.793,91,1.128,92,1.236,97,1.28,98,0.79,99,0.748,100,1.282,102,0.766,115,1.236,116,1.236,117,1.428,140,2.11,172,1.295,174,1.128,175,1.18,195,1.55,227,0.617,629,1.499,650,2.209,704,2.762,787,1.68,820,2.677,821,1.68,823,3.029,862,4.174,974,2.042,1045,2.869,1046,2.869,1047,2.869,1048,2.869,1049,3.206,1050,3.509,1051,3.509,1052,3.509,1215,1.784,1244,3.509,1290,2.698,1381,3.509,1382,3.124,1383,3.509,1384,6.85,1385,6.566,1386,6.566,1387,3.124,1388,7.6,1389,7.39,1390,3.124,1391,5.777,1392,3.124,1393,3.124,1394,4.533,1395,3.124,1396,4.533,1397,3.124,1398,3.124,1399,3.124,1400,3.124,1401,3.124,1402,3.124,1403,2.698,1404,3.124,1405,4.533,1406,4.533,1407,3.916,1408,4.533,1409,4.533]],["title/classes/Layer.html",[36,0.215,75,0.727]],["body/classes/Layer.html",[0,0.005,3,0.123,4,0.098,5,0.098,7,0.074,8,0.249,14,0.501,15,0.204,16,0.017,17,0.274,20,0.204,22,1.169,23,1.073,27,1.145,36,0.145,39,0.382,43,0.497,66,0.008,67,0.008,69,0.511,71,1.547,73,1.195,74,1.142,75,0.901,76,0.813,78,1.618,83,1.842,84,1.842,85,1.169,86,0.984,87,1.308,89,1.58,97,1.194,98,0.839,99,0.698,100,1.473,102,1.483,104,0.582,137,1.558,139,1.887,140,1.023,165,1.547,174,0.934,175,0.977,192,2.015,193,1.314,194,1.023,216,0.72,217,1.036,220,0.966,275,1.477,629,0.855,631,1.633,676,1.648,678,3.374,693,1.125,694,2.4,698,1.023,725,2.4,732,1.125,733,3.954,736,3.497,737,1.757,739,3.753,741,3.073,787,2.118,986,1.477,1012,1.978,1019,1.023,1041,2.297,1072,1.314,1077,1.829,1090,3.772,1092,1.829,1093,3.772,1112,3.772,1160,2.234,1233,2.786,1234,2.786,1294,1.576,1410,2.002,1411,4.607,1412,4.129,1413,2.907,1414,3.938,1415,3.938,1416,3.938,1417,4.607,1418,4.607,1419,4.607,1420,3.938,1421,3.938,1422,4.607,1423,4.607,1424,2.907,1425,4.959,1426,2.586,1427,3.938,1428,2.586,1429,2.586,1430,2.586,1431,3.402,1432,2.586,1433,3.487,1434,2.586,1435,2.586,1436,3.402,1437,2.586,1438,2.4,1439,3.402,1440,4.129,1441,2.586,1442,3.402,1443,2.586,1444,3.402,1445,3.049,1446,2.586,1447,2.586,1448,2.586,1449,2.586,1450,2.586,1451,2.586,1452,2.586,1453,3.402,1454,2.586,1455,3.402,1456,2.586,1457,2.586,1458,2.586,1459,2.586,1460,2.586,1461,2.586,1462,2.586,1463,2.586,1464,2.586,1465,2.586,1466,2.586,1467,2.586,1468,2.586,1469,2.586,1470,2.234,1471,2.4,1472,2.234,1473,2.234,1474,2.234,1475,4.121,1476,2.234,1477,2.234,1478,3.402,1479,3.049,1480,2.234,1481,2.234,1482,2.234,1483,2.234,1484,2.234,1485,2.234,1486,2.234,1487,3.402,1488,2.234,1489,4.607,1490,2.234,1491,2.234,1492,4.607,1493,2.234,1494,2.234,1495,2.234,1496,3.402,1497,2.234,1498,2.234,1499,2.234,1500,2.234,1501,2.234,1502,2.234,1503,2.234,1504,2.234,1505,2.234,1506,2.234]],["title/classes/LayerManager.html",[36,0.215,741,1.955]],["body/classes/LayerManager.html",[0,0.008,3,0.128,4,0.102,5,0.102,7,0.076,8,0.255,14,0.468,15,0.203,16,0.017,17,0.259,20,0.232,27,0.777,36,0.149,39,0.376,43,0.506,66,0.008,67,0.008,69,0.528,73,1.477,74,0.919,75,1.444,76,0.833,85,0.655,86,0.552,87,0.655,89,1.496,97,1.389,98,0.911,99,0.812,100,1.468,104,1.378,139,2.146,165,0.684,193,1.359,194,2.423,195,1.577,207,2.307,208,1.527,217,1.148,220,1.33,222,2.173,227,1.293,238,3.547,629,1.794,631,1.108,676,2.315,679,2.07,683,1.527,685,1.108,730,4.498,731,1.891,732,1.163,733,4.538,734,3.443,735,2.07,736,3.306,737,0.777,738,3.443,739,4.538,740,5.39,741,2.053,742,1.527,743,2.07,744,3.127,745,5.07,746,4.2,747,3.127,748,3.127,749,3.127,750,3.127,751,4.2,752,3.127,753,3.127,754,3.127,755,3.127,756,3.127,757,2.07,758,2.07,759,3.127,760,3.127,761,2.07,762,2.07,763,3.127,764,3.127,765,2.07,766,3.127,767,3.127,768,4.924,769,2.07,770,3.127,771,2.07,772,3.769,773,3.127,774,2.07,775,3.127,776,2.07,777,3.127,778,2.07,779,3.127,780,2.07,781,3.127,782,2.07,783,2.07,784,2.07,785,2.07,786,3.127,787,2.173,788,3.127,789,2.07,790,2.07,791,2.07,792,2.07,793,2.07,794,4.2,795,2.07,1088,3.127,1328,3.127,1507,4.039,1508,4.039,1509,4.039,1510,4.039,1511,4.039,1512,4.039,1513,4.039,1514,4.039,1515,4.039,1516,2.674,1517,2.674,1518,2.674,1519,2.674,1520,2.674,1521,2.674,1522,2.674,1523,2.674,1524,2.674,1525,2.674,1526,2.674,1527,2.674,1528,2.674,1529,2.674,1530,2.674]],["title/interfaces/LayerToolConfig.html",[0,0.008,1531,2.979]],["body/interfaces/LayerToolConfig.html",[0,0.009,2,1.107,3,0.216,4,0.171,5,0.171,7,0.129,8,0.368,15,0.167,16,0.017,17,0.309,20,0.25,27,2.058,36,0.252,39,0.357,43,0.485,66,0.012,67,0.012,74,0.853,75,1.292,98,0.95,99,0.674,104,1.456,195,1.988,207,3.334,208,2.578,217,1.235,220,1.431,227,1.351,232,3.193,275,2.578,685,1.872,1072,2.967,1413,3.557,1438,4.168,1471,2.751,1531,5.296,1532,3.9,1533,6.378,1534,3.9,1535,3.9,1536,3.495,1537,3.9,1538,3.9,1539,4.631,1540,3.9,1541,3.9,1542,5.043,1543,6.119,1544,3.9,1545,5.909,1546,3.9,1547,5.589,1548,3.9,1549,3.9,1550,3.9,1551,3.9,1552,5.043,1553,3.9,1554,3.9,1555,3.9,1556,3.9,1557,3.9]],["title/classes/LayerTools.html",[36,0.215,1471,2.344]],["body/classes/LayerTools.html",[0,0.007,3,0.172,4,0.137,5,0.137,7,0.103,8,0.317,15,0.216,16,0.017,17,0.276,20,0.215,27,2.067,36,0.202,39,0.375,43,0.449,66,0.01,67,0.01,69,0.712,74,1.091,75,1.382,76,1.036,89,1.49,97,1.483,98,0.946,99,0.805,100,1.439,102,0.884,104,1.3,140,1.986,195,1.815,207,2.868,208,2.061,217,1.128,220,1.231,227,1.233,232,3.552,275,2.061,631,1.496,685,1.496,732,1.57,1072,2.552,1413,3.06,1438,3.805,1471,3.06,1531,5.399,1532,3.117,1533,6.144,1534,3.117,1535,3.117,1536,4.835,1537,3.117,1538,4.338,1539,5.087,1540,3.117,1541,4.338,1542,4.338,1543,6.144,1544,4.338,1545,5.672,1546,3.117,1547,4.99,1548,3.117,1549,3.117,1550,3.117,1551,3.117,1552,4.338,1553,3.117,1554,3.117,1555,3.117,1556,3.117,1557,4.338,1558,5.022,1559,5.022,1560,5.022,1561,3.117,1562,3.608,1563,3.608,1564,3.608,1565,3.608,1566,3.608,1567,3.608,1568,3.608,1569,3.608,1570,3.608,1571,3.608]],["title/interfaces/LayerTransformationData.html",[0,0.008,1440,2.979]],["body/interfaces/LayerTransformationData.html",[0,0.007,2,0.855,3,0.167,4,0.132,5,0.132,7,0.1,8,0.31,14,0.515,15,0.192,16,0.017,17,0.31,20,0.243,22,1.202,23,1.104,36,0.195,39,0.376,43,0.521,66,0.01,67,0.01,71,1.574,73,1.058,74,0.926,75,0.926,78,1.058,83,1.205,84,1.205,87,1.509,98,0.598,99,0.776,102,0.855,104,0.785,137,1.94,139,1.38,165,1.767,174,1.26,175,1.318,192,1.853,193,1.773,194,1.38,217,1.111,220,1.202,629,1.153,631,1.446,676,1.205,678,2.467,693,1.518,694,2.988,698,1.38,732,1.518,733,3.709,736,3.456,737,2.008,739,2.281,741,2.883,787,2.638,986,1.992,1012,1.446,1019,1.38,1041,2.732,1077,2.467,1090,2.467,1092,2.467,1093,4.353,1112,3.469,1233,3.469,1234,3.469,1294,2.125,1410,2.701,1411,5.602,1412,2.701,1413,2.125,1417,3.013,1418,3.013,1419,3.013,1422,3.013,1423,3.013,1424,2.125,1425,4.9,1431,3.013,1433,3.709,1436,3.013,1438,2.125,1439,3.013,1440,4.392,1442,3.013,1444,3.013,1445,2.701,1453,3.013,1455,3.013,1470,3.013,1471,2.988,1472,3.013,1473,3.013,1474,3.013,1475,4.9,1476,3.013,1477,3.013,1478,4.237,1479,3.797,1480,3.013,1481,3.013,1482,3.013,1483,3.013,1484,3.013,1485,3.013,1486,3.013,1487,4.237,1488,3.013,1489,5.316,1490,3.013,1491,3.013,1492,5.316,1493,3.013,1494,3.013,1495,3.013,1496,4.237,1497,3.013,1498,3.013,1499,3.013,1500,3.013,1501,3.013,1502,3.013,1503,3.013,1504,3.013,1505,3.013,1506,3.013]],["title/classes/LayerUtils.html",[36,0.215,1433,2.516]],["body/classes/LayerUtils.html",[3,0.152,4,0.121,5,0.121,7,0.091,10,4.198,12,4.198,14,0.549,15,0.2,16,0.017,17,0.152,20,0.137,22,1.721,23,1.58,24,1.716,36,0.178,39,0.374,43,0.48,66,0.01,67,0.01,69,0.63,76,0.95,85,1.128,86,0.95,89,1.47,97,1.386,98,0.856,99,0.81,100,1.448,104,1.215,174,1.152,175,1.205,192,2.233,195,0.927,216,0.889,217,0.576,220,0.782,629,1.785,631,1.323,691,2.47,692,4.576,694,3.819,698,2.136,704,2.804,713,4.576,715,4.576,822,1.716,823,2.479,1198,3.819,1217,4.18,1385,5.106,1386,5.106,1433,3.009,1479,2.47,1572,3.19,1573,4.602,1574,4.602,1575,4.602,1576,4.602,1577,3.976,1578,4.602,1579,5.911,1580,4.602,1581,4.602,1582,4.602,1583,3.19,1584,4.602,1585,3.19,1586,4.602,1587,6.89,1588,3.19,1589,4.602,1590,4.602,1591,6.489,1592,3.19,1593,4.602,1594,5.911,1595,5.911,1596,3.19,1597,4.602,1598,3.19,1599,5.911,1600,4.602,1601,3.19,1602,5.399,1603,5.399,1604,3.19,1605,4.602,1606,3.19,1607,4.602,1608,3.19,1609,3.19,1610,3.19,1611,3.19,1612,3.19,1613,3.19,1614,3.19,1615,3.19,1616,3.19,1617,3.19]],["title/interfaces/LayerWrapper.html",[0,0.008,738,2.721]],["body/interfaces/LayerWrapper.html",[0,0.01,2,0.825,3,0.161,4,0.128,5,0.128,7,0.096,8,0.302,14,0.504,15,0.183,16,0.017,17,0.289,20,0.259,36,0.188,39,0.357,43,0.523,66,0.01,67,0.01,73,1.02,74,0.635,75,1.443,87,0.825,98,0.889,104,1.572,139,1.331,165,0.861,193,1.71,194,2.629,195,1.76,207,2.731,208,1.922,217,1.234,220,1.485,222,2.571,227,1.38,238,2.2,629,2.002,676,1.921,683,1.922,685,1.395,730,3.933,731,2.379,732,1.464,733,4.815,734,3.933,735,2.605,736,2.913,737,0.978,738,4.283,739,4.891,740,5.028,741,1.71,742,1.922,743,2.605,744,2.605,745,5.41,746,4.689,747,3.701,748,3.701,749,3.701,750,3.701,751,4.689,752,3.701,753,3.701,754,3.701,755,3.701,756,3.701,757,2.605,758,2.605,759,3.701,760,2.605,761,2.605,762,2.605,763,2.605,764,3.701,765,2.605,766,2.605,767,2.605,768,5.293,769,2.605,770,2.605,771,2.605,772,4.306,773,2.605,774,2.605,775,3.701,776,2.605,777,2.605,778,2.605,779,2.605,780,2.605,781,2.605,782,2.605,783,2.605,784,2.605,785,2.605,786,2.605,787,1.809,788,2.605,789,2.605,790,2.605,791,2.605,792,2.605,793,2.605,794,2.605,795,2.605]],["title/classes/LineTool.html",[36,0.215,37,2.344]],["body/classes/LineTool.html",[0,0.011,1,3.298,3,0.127,4,0.101,5,0.101,6,1.74,7,0.076,8,0.254,9,1.331,10,1.621,11,1.74,12,1.621,13,1.74,14,0.536,15,0.217,16,0.017,17,0.127,18,3.197,19,1.281,20,0.249,21,3.298,22,1.327,23,1.308,24,1.431,25,1.52,26,1.52,27,0.773,28,3.298,29,1.74,30,1.74,31,3.298,32,1.74,33,1.74,34,1.74,35,1.74,36,0.149,37,2.453,38,0.795,39,0.38,40,2.632,41,1.487,42,1.74,43,0.398,44,2.632,45,1.52,46,2.338,47,2.112,48,1.751,49,1.52,50,1.52,51,1.52,52,2.632,53,1.74,54,1.74,55,1.74,56,1.74,57,2.632,58,1.74,59,1.74,60,2.632,61,1.74,62,1.74,63,1.74,64,1.74,65,1.74,66,0.008,67,0.008,69,0.525,71,1.564,72,1.521,73,1.221,74,0.76,75,0.917,76,0.831,77,2.453,78,1.472,79,2.632,80,2.453,82,2.632,83,1.677,84,1.677,85,1.19,86,1.002,87,0.652,88,2.956,89,1.572,90,1.592,91,0.961,92,1.053,97,1.451,98,0.896,99,0.848,100,1.555,102,0.652,103,1.74,104,1.218,105,3.298,106,3.298,108,1.521,109,1.621,115,1.053,116,1.053,125,3.434,126,2.847,127,2.632,128,3.434,129,2.847,130,2.847,131,2.847,132,2.847,133,2.847,134,2.847,136,1.882,137,2.419,139,2.512,140,1.92,141,1.882,143,1.882,146,1.882,148,1.882,150,1.882,151,2.847,153,1.882,154,1.882,156,1.882,157,1.882,158,2.847,159,2.847,160,2.847,162,1.621,163,1.882,165,0.681,166,1.882,168,1.882,170,1.882,172,1.103,862,2.453,866,2.06,867,2.06,868,2.06,869,2.06,870,2.06,871,2.06,872,2.06,873,2.06,874,2.06,875,2.06,876,2.06,877,2.06,878,2.06,879,2.06,1618,4.025,1619,4.025,1620,4.025,1621,4.025,1622,2.661,1623,2.661,1624,2.661,1625,2.661,1626,2.661]],["title/interfaces/PixelTransformerContext.html",[0,0.008,1627,2.721]],["body/interfaces/PixelTransformerContext.html",[0,0.01,2,0.888,3,0.173,4,0.137,5,0.137,7,0.103,8,0.318,14,0.537,15,0.178,16,0.017,17,0.276,20,0.248,36,0.203,38,0.715,39,0.367,41,1.288,43,0.511,66,0.011,67,0.011,71,1.288,165,1.821,216,1.612,217,0.654,220,0.888,227,1.298,629,2.068,737,2.101,820,2.303,821,1.948,907,2.562,1012,2.594,1019,2.475,1045,3.365,1046,3.365,1047,3.365,1048,3.365,1186,2.425,1188,4.45,1221,2.207,1222,2.708,1223,2.708,1224,2.708,1424,3.812,1539,3.292,1627,4.425,1628,2.804,1629,2.562,1630,2.804,1631,4.094,1632,2.368,1633,2.804,1634,2.804,1635,5.09,1636,2.804,1637,2.804,1638,5.269,1639,4.843,1640,4.843,1641,2.804,1642,2.804,1643,5.727,1644,2.804,1645,2.804,1646,2.804,1647,2.804,1648,2.804,1649,2.804,1650,2.804,1651,2.804,1652,2.804,1653,2.804,1654,2.804,1655,2.804,1656,2.804,1657,3.898,1658,2.804,1659,2.804,1660,2.804,1661,2.804,1662,2.804,1663,2.804,1664,2.804,1665,2.804,1666,2.804,1667,2.804,1668,2.804,1669,4.843,1670,4.843,1671,2.804,1672,2.804,1673,2.804,1674,2.804,1675,2.804,1676,2.804]],["title/interfaces/PixelTransformerRenderContext.html",[0,0.008,1631,2.721]],["body/interfaces/PixelTransformerRenderContext.html",[0,0.01,2,0.883,3,0.172,4,0.137,5,0.137,7,0.103,8,0.317,14,0.536,15,0.178,16,0.017,17,0.276,20,0.247,36,0.201,38,0.711,39,0.366,41,1.283,43,0.51,66,0.01,67,0.01,71,1.283,99,0.72,165,1.819,216,1.608,217,0.651,220,0.883,227,1.296,629,2.064,737,2.099,820,2.294,821,1.938,907,2.549,1012,2.588,1019,2.469,1045,3.357,1046,3.357,1047,3.357,1048,3.357,1186,2.416,1188,4.443,1221,2.196,1222,2.699,1223,2.699,1224,2.699,1424,3.803,1539,3.28,1627,4.083,1628,2.79,1629,2.549,1630,2.79,1631,4.415,1632,2.356,1633,2.79,1634,2.79,1635,5.081,1636,2.79,1637,2.79,1638,5.261,1639,4.833,1640,4.833,1641,2.79,1642,2.79,1643,5.722,1644,2.79,1645,2.79,1646,2.79,1647,2.79,1648,2.79,1649,2.79,1650,2.79,1651,2.79,1652,2.79,1653,2.79,1654,2.79,1655,2.79,1656,2.79,1657,3.885,1658,2.79,1659,2.79,1660,2.79,1661,2.79,1662,2.79,1663,2.79,1664,2.79,1665,2.79,1666,2.79,1667,2.79,1668,2.79,1669,4.833,1670,4.833,1671,2.79,1672,2.79,1673,2.79,1674,2.79,1675,2.79,1676,2.79]],["title/classes/PixelsTool.html",[36,0.215,1632,2.516]],["body/classes/PixelsTool.html",[0,0.008,3,0.12,4,0.096,5,0.096,7,0.072,8,0.244,14,0.528,15,0.206,16,0.017,17,0.224,20,0.201,36,0.141,38,0.762,39,0.38,41,0.987,43,0.475,66,0.008,67,0.008,69,0.497,71,1.685,72,1.458,73,1.17,74,0.729,75,0.886,76,0.796,78,1.423,83,1.621,84,1.621,85,0.946,86,0.796,87,0.617,88,2.367,89,1.55,90,1.526,91,0.909,92,0.996,97,1.402,98,0.846,99,0.801,100,1.521,102,1.15,115,0.996,116,0.996,140,1.526,165,1.531,172,1.044,216,1.307,217,0.454,220,0.617,227,1.12,629,2.125,711,1.78,725,2.351,737,1.867,820,2.405,821,1.354,901,1.949,902,2.175,904,3.333,906,3.333,907,3.72,950,2.987,951,2.175,1012,2.877,1019,2.08,1045,2.829,1046,2.829,1047,2.829,1048,2.829,1072,1.279,1186,1.858,1188,4.201,1207,1.78,1221,1.534,1222,2.075,1223,2.075,1224,2.075,1424,3.915,1539,4.201,1627,4.405,1628,1.949,1629,1.78,1630,1.949,1631,4.405,1632,2.523,1633,2.987,1634,1.949,1635,4.391,1636,2.987,1637,1.949,1638,4.633,1639,4.072,1640,4.072,1641,1.949,1642,2.987,1643,5.296,1644,1.949,1645,2.987,1646,1.949,1647,1.949,1648,2.987,1649,1.949,1650,2.987,1651,1.949,1652,2.987,1653,1.949,1654,2.987,1655,1.949,1656,2.987,1657,4.072,1658,1.949,1659,3.632,1660,3.632,1661,1.949,1662,1.949,1663,4.072,1664,1.949,1665,4.072,1666,1.949,1667,2.987,1668,1.949,1669,4.072,1670,4.072,1671,2.987,1672,1.949,1673,4.072,1674,1.949,1675,1.949,1676,1.949,1677,3.858,1678,3.858,1679,3.333,1680,3.858,1681,3.858,1682,3.858,1683,3.858,1684,3.858,1685,2.517,1686,2.517,1687,2.517,1688,2.517,1689,2.517,1690,3.858,1691,2.517,1692,2.517,1693,2.517,1694,2.517,1695,2.517,1696,2.517,1697,2.517,1698,2.517,1699,2.517,1700,2.517,1701,2.517,1702,2.517,1703,2.517,1704,2.517]],["title/interfaces/QuadraticBezierCurveOptions.html",[0,0.008,28,2.344]],["body/interfaces/QuadraticBezierCurveOptions.html",[0,0.014,1,3.513,2,1.086,3,0.211,4,0.168,5,0.168,6,2.896,7,0.126,8,0.364,9,1.907,10,2.699,11,2.896,12,2.699,13,2.896,14,0.549,15,0.194,16,0.017,17,0.211,18,2.509,19,2.133,20,0.301,21,3.513,22,1.77,23,1.624,24,2.382,25,2.53,26,2.53,27,1.287,28,3.906,29,4.44,30,4.44,31,3.513,32,2.896,33,2.896,34,2.896,35,2.896,36,0.248,37,2.699,38,0.875,39,0.336,40,2.896,41,1.801,42,2.896,43,0.482,44,2.896,45,2.53,46,3.087,47,2.789,48,2.509,49,2.53,50,2.53,51,2.53,52,2.896,53,2.896,54,2.896,55,2.896,56,2.896,57,2.896,58,2.896,59,2.896,60,2.896,61,2.896,62,2.896,63,2.896,64,2.896,65,2.896,66,0.012,67,0.012]],["title/interfaces/RawImageData.html",[0,0.008,1199,2.979]],["body/interfaces/RawImageData.html",[0,0.009,2,1.078,3,0.21,4,0.218,5,0.167,7,0.125,8,0.362,14,0.493,15,0.193,16,0.017,17,0.305,20,0.301,36,0.246,38,0.868,39,0.344,43,0.481,66,0.012,67,0.012,74,0.83,165,1.732,174,2.072,175,1.661,216,1.886,217,1.036,227,1.449,269,4.058,737,1.968,1012,2.379,1019,1.739,1076,4.058,1083,4.058,1186,2.117,1187,3.109,1188,4.427,1191,3.797,1192,3.797,1194,3.867,1196,3.797,1197,3.797,1198,4.125,1199,5.242,1201,3.797,1207,4.058,1208,4.442,1209,4.442,1210,4.442,1211,4.442,1212,4.442,1213,4.956,1214,3.403,1215,3.277,1216,3.403,1217,3.403,1218,3.797,1219,3.797,1220,3.797,1221,2.678,1222,2.364,1223,2.364,1224,2.364,1225,5.518,1226,3.797,1227,3.797,1228,3.797,1229,3.797,1230,4.956,1231,3.797,1232,4.956,1233,4.058,1234,4.058,1235,5.849,1236,3.797,1237,3.797,1238,3.797]],["title/interfaces/RectangleOptions.html",[0,0.008,1705,2.721]],["body/interfaces/RectangleOptions.html",[0,0.012,2,1.162,3,0.226,4,0.18,5,0.18,7,0.135,8,0.38,9,1.567,14,0.542,15,0.199,16,0.017,17,0.226,18,2.621,19,2.283,20,0.283,22,1.763,23,1.618,36,0.265,38,0.936,39,0.288,41,1.213,43,0.412,46,3.539,47,3.345,48,3.129,66,0.013,67,0.013,165,1.839,182,2.888,183,2.888,737,2.09,856,3.099,885,4.805,886,4.701,1705,4.682,1706,3.67,1707,4.26,1708,3.353,1709,3.67,1710,3.67,1711,3.67,1712,4.663,1713,4.663]],["title/classes/RectangleTool.html",[36,0.215,1708,2.721]],["body/classes/RectangleTool.html",[0,0.009,3,0.139,4,0.111,5,0.111,7,0.083,8,0.272,9,0.965,14,0.52,15,0.218,16,0.017,17,0.139,18,3.244,19,1.405,20,0.22,22,1.257,23,1.275,36,0.163,38,0.852,39,0.379,41,0.747,43,0.295,46,3.047,47,3.037,48,2.63,66,0.009,67,0.009,69,0.576,71,1.619,72,1.629,73,1.308,74,0.814,75,0.969,76,0.89,77,2.628,78,1.556,79,2.82,80,2.628,82,2.82,83,1.772,84,1.772,85,1.257,86,1.058,87,0.715,88,2.993,89,1.573,90,1.706,91,1.054,92,1.154,97,1.442,98,0.89,99,0.843,100,1.554,102,0.715,103,1.908,104,1.275,105,3.452,106,3.452,108,1.629,109,1.778,115,1.154,116,1.154,125,3.628,126,3.05,127,2.82,128,3.628,129,3.05,130,3.05,131,3.05,132,3.05,133,3.05,134,3.05,136,2.064,137,2.503,139,2.391,140,2.029,141,2.064,143,2.064,146,2.064,148,2.064,150,2.064,151,3.05,153,2.064,154,2.064,156,2.064,157,2.064,158,3.05,159,3.05,160,3.05,162,1.778,163,2.064,165,1.312,166,2.064,168,2.064,170,2.064,172,1.21,182,1.778,183,1.778,737,1.253,856,2.82,862,2.628,866,2.259,867,2.259,868,2.259,869,2.259,870,2.259,871,2.259,872,2.259,873,2.259,874,2.259,875,2.259,876,2.259,877,2.259,878,2.259,879,2.259,885,4.137,886,3.953,1383,3.339,1705,4.007,1706,2.259,1707,4.007,1708,3.05,1709,2.259,1710,3.339,1711,2.259,1712,3.339,1713,3.339,1714,2.918,1715,2.918]],["title/interfaces/RoundedRectangleOptions.html",[0,0.008,1707,2.721]],["body/interfaces/RoundedRectangleOptions.html",[0,0.012,2,1.149,3,0.224,4,0.178,5,0.178,7,0.134,8,0.377,9,2.293,14,0.543,15,0.204,16,0.017,17,0.224,18,2.601,19,2.256,20,0.282,22,1.757,23,1.612,36,0.262,38,0.925,39,0.285,41,1.199,43,0.409,46,3.528,47,3.338,48,3.118,66,0.012,67,0.012,165,1.833,182,2.855,183,2.855,737,2.082,856,3.063,885,4.79,886,4.685,1705,4.229,1706,3.628,1707,4.657,1708,3.314,1709,3.628,1710,3.628,1711,3.628,1712,4.629,1713,4.629]],["title/classes/ShadowTool.html",[36,0.215,1716,3.324]],["body/classes/ShadowTool.html",[3,0.202,4,0.16,5,0.16,7,0.121,8,0.353,14,0.511,15,0.203,16,0.017,17,0.202,20,0.181,36,0.236,38,1.104,39,0.379,41,1.706,43,0.456,66,0.012,67,0.012,69,0.834,71,1.91,72,2.112,73,1.696,74,1.056,75,1.183,76,1.153,78,1.9,83,2.164,84,2.164,85,1.37,86,1.153,87,1.036,88,2.818,89,1.555,90,2.211,91,1.526,92,1.671,97,1.316,98,0.813,99,0.769,100,1.499,102,1.036,104,1.41,108,2.112,115,1.671,116,1.671,117,1.932,172,1.752,262,5.039,1716,4.829,1717,4.225,1718,5.59,1719,4.829,1720,5.59,1721,5.59,1722,5.59,1723,4.225,1724,4.829,1725,4.225,1726,5.59,1727,4.225,1728,5.59,1729,4.225,1730,4.225,1731,4.225,1732,4.225,1733,4.225]],["title/classes/SharpenTool.html",[36,0.215,1734,3.324]],["body/classes/SharpenTool.html",[3,0.227,4,0.18,5,0.18,7,0.135,8,0.381,14,0.413,15,0.199,16,0.017,17,0.227,20,0.203,36,0.265,38,1.191,39,0.378,66,0.013,67,0.013,69,0.938,71,1.881,72,2.278,73,1.829,74,1.139,75,1.251,76,1.244,78,2.009,83,2.289,84,2.289,85,1.624,86,1.367,87,1.164,88,2.954,89,1.56,90,2.385,91,1.715,92,1.878,97,1.191,98,0.735,99,0.696,100,1.484,102,1.164,115,1.878,116,1.878,139,1.878,172,1.969,194,2.385,262,4.686,686,4.265,695,4.93,696,3.676,724,5.209,1734,5.209,1735,4.748,1736,6.029,1737,6.029,1738,4.748,1739,4.748,1740,4.102]],["title/interfaces/TextDataSource.html",[0,0.008,824,2.516]],["body/interfaces/TextDataSource.html",[0,0.013,2,1.044,3,0.203,4,0.213,5,0.162,7,0.121,8,0.355,9,1.408,14,0.506,15,0.198,16,0.017,17,0.203,20,0.286,22,1.377,23,1.264,27,1.633,36,0.238,39,0.36,43,0.476,66,0.012,67,0.012,86,1.434,98,0.519,104,1.683,137,2.222,165,1.089,195,1.633,206,2.432,216,1.751,217,1.135,220,1.377,227,0.841,246,2.594,248,2.594,693,2.736,698,2.222,732,3.024,737,1.237,796,4.074,797,3.011,799,3.011,802,3.011,804,3.011,805,4.372,808,3.011,810,5.05,811,3.011,813,3.011,819,3.011,820,2.569,821,2.29,822,2.29,823,1.684,824,4.111,825,3.673,826,2.783,827,2.783,828,2.783,829,2.783,830,2.432,831,3.011,832,3.011,833,5.05,834,3.011,835,3.011,836,3.011,837,3.209,838,3.011,839,3.011,840,3.011,841,3.011,842,3.011,843,3.011,844,3.973,845,3.011,846,3.011,847,3.011]],["title/classes/TextTool.html",[36,0.215,1741,2.979]],["body/classes/TextTool.html",[3,0.12,4,0.095,5,0.095,7,0.072,8,0.243,14,0.502,15,0.204,16,0.017,17,0.224,20,0.108,22,1.575,23,1.446,36,0.141,38,0.761,39,0.378,41,1.643,43,0.486,66,0.008,67,0.008,69,0.497,71,1.685,72,1.457,73,1.169,74,0.728,75,0.886,76,0.796,78,1.422,80,2.349,83,1.62,84,1.62,85,0.945,86,0.796,87,0.617,88,2.366,89,1.529,90,1.525,91,0.908,92,0.995,97,1.387,98,0.874,99,0.811,100,1.502,102,0.617,104,1.756,105,3.645,106,3.645,108,1.986,109,2.349,115,0.995,116,0.995,117,1.15,118,1.947,121,1.947,140,2.242,162,3.454,172,1.043,174,0.908,175,0.95,176,1.779,177,2.173,629,1.275,822,3.049,826,4.2,827,1.644,828,1.644,1104,3.63,1105,3.63,1194,2.678,1222,2.074,1223,2.074,1224,2.074,1719,3.331,1724,3.331,1741,2.985,1742,2.515,1743,5.257,1744,3.856,1745,3.856,1746,3.856,1747,3.856,1748,3.856,1749,3.856,1750,3.856,1751,3.856,1752,3.856,1753,3.856,1754,3.856,1755,2.515,1756,3.856,1757,2.515,1758,3.856,1759,2.515,1760,3.856,1761,6.424,1762,2.515,1763,3.856,1764,2.515,1765,3.856,1766,2.515,1767,2.515,1768,2.515,1769,3.856,1770,4.689,1771,4.689,1772,4.689,1773,2.515,1774,3.856,1775,3.856,1776,5.257,1777,2.515,1778,2.515,1779,3.856,1780,4.689,1781,4.689,1782,4.689,1783,4.689,1784,4.689,1785,2.515,1786,5.257,1787,3.856,1788,4.689,1789,4.689,1790,4.689,1791,4.689,1792,2.515,1793,3.856,1794,2.515,1795,3.856,1796,2.515,1797,2.515,1798,2.515,1799,2.515,1800,2.515,1801,2.515,1802,2.515,1803,2.515,1804,2.515,1805,2.515,1806,2.515,1807,2.515,1808,2.515,1809,3.856,1810,2.515,1811,2.515]],["title/classes/ToolBox.html",[36,0.215,71,0.984]],["body/classes/ToolBox.html",[3,0.22,4,0.175,5,0.175,7,0.132,8,0.373,15,0.203,16,0.017,17,0.282,20,0.28,36,0.258,39,0.378,41,1.513,43,0.405,66,0.012,67,0.012,69,0.91,71,1.513,72,2.693,73,1.982,74,1.234,75,1.434,76,1.221,78,2.091,83,2.381,84,2.381,85,1.45,86,1.221,87,1.45,89,1.531,91,2.36,97,0.91,98,0.562,99,0.532,100,1.348,102,1.13,123,3.982,174,1.665,175,1.741,631,1.911,685,1.911,694,3.605,698,1.823,961,2.809,1294,2.809,1403,3.982,1407,3.982,1561,3.982,1812,3.982,1813,5.916,1814,5.916,1815,4.609,1816,4.609,1817,4.609,1818,5.111,1819,3.982,1820,4.609,1821,4.609]],["title/interfaces/TransformOptions.html",[0,0.008,1822,2.979]],["body/interfaces/TransformOptions.html",[0,0.009,2,1.058,3,0.206,4,0.164,5,0.164,7,0.123,8,0.358,14,0.544,15,0.204,16,0.017,17,0.206,20,0.243,23,1.513,36,0.241,38,0.852,39,0.349,41,1.833,43,0.5,66,0.012,67,0.012,71,1.45,99,0.776,117,1.973,194,2.659,227,0.852,1822,5.406,1823,3.728,1824,6.032,1825,6.032,1826,6.032,1827,6.032,1828,6.032,1829,6.032,1830,3.341,1831,3.728,1832,3.728,1833,3.728,1834,5.807,1835,5.807,1836,3.728,1837,4.897,1838,4.897,1839,4.897,1840,4.897,1841,3.728,1842,3.728,1843,3.728,1844,3.728,1845,3.728,1846,3.728,1847,3.728,1848,3.728,1849,3.728,1850,3.728,1851,3.728,1852,3.728,1853,3.728,1854,3.728,1855,3.728,1856,3.728,1857,3.728]],["title/classes/TransformTool.html",[36,0.215,1830,2.979]],["body/classes/TransformTool.html",[0,0.007,3,0.169,4,0.134,5,0.134,7,0.101,8,0.313,14,0.531,15,0.198,16,0.017,17,0.169,20,0.212,22,1.215,23,1.593,36,0.198,38,0.979,39,0.379,41,1.729,43,0.475,66,0.01,67,0.01,69,0.699,71,1.84,72,1.872,73,1.503,74,0.936,75,1.08,76,1.023,78,1.734,83,1.975,84,1.975,85,1.215,86,1.023,87,0.868,88,2.673,89,1.545,90,1.96,91,1.279,92,1.4,97,1.287,98,0.795,99,0.752,100,1.504,102,0.868,115,1.4,116,1.4,117,1.619,139,1.96,172,1.468,194,2.45,227,0.699,927,3.058,950,3.837,1822,5.569,1823,3.058,1824,4.281,1825,4.281,1826,4.281,1827,4.281,1828,4.281,1829,4.281,1830,3.837,1831,4.281,1832,3.058,1833,4.281,1834,5.351,1835,5.351,1836,3.058,1837,4.281,1838,4.281,1839,4.281,1840,4.281,1841,4.281,1842,3.058,1843,5.351,1844,3.058,1845,5.351,1846,3.058,1847,3.058,1848,3.058,1849,3.058,1850,3.058,1851,3.058,1852,3.058,1853,3.058,1854,4.281,1855,3.058,1856,4.281,1857,3.058,1858,4.956,1859,4.956,1860,3.837,1861,4.956,1862,3.54,1863,3.54,1864,3.54,1865,3.54,1866,3.54,1867,3.54,1868,3.54]],["title/changelog.html",[1869,2.273,1870,2.273,1871,3.214]],["body/changelog.html",[4,0.156,15,0.118,16,0.011,20,0.235,66,0.011,67,0.011,71,1.759,75,1.336,76,1.277,85,1.01,108,2.077,127,2.694,176,2.915,188,3.56,216,1.148,252,6.156,253,3.56,267,2.915,270,2.354,676,2.137,678,3.889,705,3.191,726,3.56,796,2.511,822,2.957,823,2.611,830,3.771,974,2.694,986,2.354,1015,2.511,1041,1.984,1089,2.915,1108,3.191,1186,1.984,1198,3.35,1215,3.141,1245,3.191,1309,3.191,1370,5.703,1381,3.191,1383,3.191,1391,3.56,1412,3.191,1413,4.022,1424,2.511,1433,3.595,1438,4.19,1471,3.35,1536,3.191,1577,3.56,1629,2.915,1632,2.694,1740,4.75,1741,3.191,1860,3.191,1872,3.56,1873,6.111,1874,7.074,1875,4.121,1876,4.121,1877,6.601,1878,5.345,1879,5.703,1880,4.121,1881,4.121,1882,4.121,1883,6.601,1884,6.601,1885,4.121,1886,4.75,1887,4.121,1888,4.121,1889,4.121,1890,4.121,1891,4.121,1892,3.56,1893,4.121,1894,4.121,1895,4.121,1896,5.345,1897,4.121,1898,6.877,1899,4.121,1900,4.121,1901,3.56,1902,4.121,1903,4.121,1904,4.121,1905,4.121,1906,4.121,1907,4.121,1908,4.121,1909,4.121,1910,3.56,1911,4.121,1912,4.121,1913,4.121,1914,4.121,1915,4.121,1916,4.121,1917,4.121,1918,4.121,1919,4.121,1920,4.121,1921,4.121,1922,4.121,1923,4.121,1924,4.121,1925,5.498,1926,4.121,1927,4.121,1928,4.121,1929,5.498,1930,4.121,1931,4.121,1932,4.121,1933,4.121,1934,5.498,1935,4.121,1936,4.121,1937,4.121,1938,4.121,1939,4.121,1940,4.121,1941,3.191,1942,4.121,1943,4.121,1944,4.121,1945,4.121,1946,4.121,1947,3.56,1948,4.121,1949,4.75,1950,4.121,1951,4.121,1952,4.121,1953,4.121,1954,4.121,1955,4.121,1956,4.121,1957,4.121]],["title/contributing.html",[1869,2.273,1870,2.273,1958,2.776]],["body/contributing.html",[5,0.204,16,0.014,36,0.364,66,0.014,67,0.014,162,3.27,243,5.421,676,1.854,741,2.728,837,3.066,1001,4.952,1111,4.156,1312,5.772,1372,4.637,1941,5.037,1958,5.62,1959,5.367,1960,5.367,1961,4.637,1962,5.367,1963,5.367,1964,6.506,1965,5.367,1966,4.637,1967,4.637,1968,5.367,1969,5.367,1970,7.001,1971,7.001,1972,5.62,1973,6.506,1974,5.367,1975,5.367,1976,4.637,1977,5.367,1978,6.506,1979,5.62,1980,5.367,1981,5.367,1982,4.637,1983,5.367,1984,6.506,1985,5.367,1986,5.367,1987,6.506,1988,5.367,1989,4.637,1990,5.367,1991,5.367,1992,5.367,1993,5.367,1994,5.367,1995,5.367,1996,5.367,1997,5.367,1998,5.367,1999,5.367]],["title/miscellaneous/functions.html",[2000,1.958,2001,3.997]],["body/miscellaneous/functions.html",[4,0.201,7,0.151,14,0.442,15,0.199,16,0.016,66,0.014,67,0.014,85,1.301,86,1.095,87,1.301,97,1.467,98,0.906,99,0.858,100,1.095,140,2.099,176,4.57,734,4.927,974,4.225,1194,3.691,1274,5.003,1280,3.754,1281,5.582,1286,5.582,1294,3.234,1300,5.582,1301,4.585,1310,4.585,1314,4.585,1316,5.582,1326,5.582,1327,5.582,1328,5.003,1346,4.585,1347,4.585,1886,4.585,2000,3.234,2001,4.585,2002,6.461,2003,5.613,2004,5.307,2005,6.461,2006,5.307,2007,5.307,2008,5.307,2009,5.307,2010,5.307]],["title/index.html",[7,0.092,1869,2.273,1870,2.273]],["body/index.html",[5,0.151,16,0.017,17,0.291,66,0.011,67,0.011,75,1.285,77,3.708,78,1.631,98,0.486,108,2.706,174,2.198,175,1.507,192,2.032,217,1.099,222,2.145,227,1.438,252,4.164,270,3.721,279,3.445,287,3.445,354,3.445,428,3.445,493,3.445,568,3.445,676,2.35,693,2.34,717,3.517,732,1.735,742,3.721,822,2.145,823,2.127,830,3.885,901,3.088,914,3.445,942,3.445,959,3.088,960,4.164,967,4.164,986,2.278,1015,4.144,1019,1.577,1049,2.821,1089,3.804,1291,3.445,1297,4.646,1350,6.053,1413,3.277,1438,3.277,1591,3.445,1679,3.445,1860,3.088,1878,3.445,1879,3.445,1892,3.445,1896,3.445,1901,3.445,1910,4.646,1941,3.088,1947,3.445,1949,5.257,1961,3.445,1966,3.445,1967,3.445,1972,3.445,1976,4.646,1982,3.445,1989,3.445,2011,3.445,2012,3.445,2013,4.646,2014,3.988,2015,6.086,2016,6.086,2017,3.988,2018,3.988,2019,3.988,2020,3.988,2021,5.378,2022,5.378,2023,3.988,2024,3.988,2025,3.988,2026,3.988,2027,3.988,2028,3.988,2029,5.378,2030,3.445,2031,3.445,2032,3.988,2033,3.988,2034,3.988,2035,6.514,2036,3.988,2037,3.988,2038,3.988,2039,3.988,2040,3.988,2041,5.378,2042,3.988,2043,3.988,2044,3.988,2045,3.988,2046,3.988,2047,3.988,2048,3.988,2049,3.988,2050,3.988,2051,3.988,2052,3.988,2053,3.988,2054,3.988,2055,3.988,2056,3.988,2057,5.378,2058,4.646,2059,5.378,2060,5.378,2061,3.988,2062,3.988,2063,3.988,2064,3.988,2065,3.988,2066,3.988,2067,3.988,2068,5.378,2069,5.378,2070,3.988,2071,3.988,2072,3.988,2073,5.378,2074,3.988,2075,3.988,2076,3.988,2077,3.988,2078,3.988,2079,3.988,2080,3.988]],["title/license.html",[1869,2.273,1870,2.273,2081,2.488]],["body/license.html",[16,0.013,66,0.013,67,0.013,637,4.501,1312,4.947,1445,4.947,1873,4.501,1979,4.501,2030,4.501,2058,4.501,2081,4.034,2082,4.501,2083,6.91,2084,4.501,2085,6.389,2086,5.21,2087,5.21,2088,5.21,2089,5.21,2090,5.21,2091,5.21,2092,7.754,2093,5.21,2094,5.21,2095,6.91,2096,5.21,2097,6.389,2098,5.21,2099,5.21,2100,5.21,2101,5.21,2102,5.21,2103,5.21,2104,5.21,2105,5.21,2106,5.21,2107,6.389,2108,5.21,2109,5.21,2110,5.21,2111,5.21,2112,5.21,2113,5.21,2114,5.21,2115,6.389,2116,6.389,2117,5.21,2118,5.21,2119,5.21,2120,5.21,2121,5.21,2122,5.21,2123,5.21,2124,5.21,2125,5.21,2126,5.21,2127,5.21,2128,5.21,2129,5.21,2130,5.21,2131,5.21,2132,5.21,2133,5.21,2134,5.21,2135,5.21,2136,5.21,2137,5.21,2138,5.21,2139,5.21,2140,5.21,2141,5.21,2142,5.21,2143,5.21,2144,5.21,2145,5.21,2146,5.21]],["title/modules.html",[2147,4.535]],["body/modules.html",[16,0.015,66,0.015,67,0.015,2147,5.403]],["title/overview.html",[2148,4.535]],["body/overview.html",[2,1.52,16,0.015,66,0.015,67,0.015,69,1.224,2148,5.356,2149,6.199,2150,6.199]],["title/properties.html",[8,0.292,2151,3.214]],["body/properties.html",[8,0.368,16,0.017,66,0.014,67,0.014,676,2.014,823,2.704,830,3.33,1041,2.808,1261,4.514,1872,5.037,2011,5.905,2012,5.905,2013,5.037,2031,5.037,2081,4.514,2082,5.037,2084,5.037,2152,5.83,2153,5.83,2154,5.83,2155,5.83,2156,5.83,2157,5.83,2158,5.83,2159,5.83,2160,5.83]],["title/miscellaneous/typealiases.html",[2000,1.958,2161,4.627]],["body/miscellaneous/typealiases.html",[7,0.154,14,0.37,15,0.186,16,0.017,66,0.014,67,0.014,75,1.234,91,2.36,102,1.326,104,1.471,137,2.139,676,1.868,693,2.353,731,3.825,736,3.982,740,4.623,820,2.989,823,2.139,837,3.089,849,4.187,853,5.06,899,4.672,912,5.646,1041,2.604,1186,2.604,1187,3.825,1194,3.089,1198,3.295,1216,5.06,1280,3.825,1294,3.295,1306,4.672,1307,4.672,1308,4.672,1309,4.187,1410,4.187,1812,4.672,1818,5.646,1819,4.672,2000,3.295,2003,4.187,2162,5.408,2163,6.536,2164,5.408,2165,5.408,2166,4.672,2167,5.408,2168,5.408]],["title/miscellaneous/variables.html",[2000,1.958,2169,3.997]],["body/miscellaneous/variables.html",[7,0.166,15,0.166,16,0.016,66,0.014,67,0.014,85,1.674,86,1.409,217,1.05,275,3.323,1187,4.115,1207,4.115,1208,4.505,1209,4.505,1210,4.505,1211,4.505,1212,4.505,1221,4.16,1222,3.129,1223,3.129,1224,3.129,1280,4.115,1303,5.897,1304,5.026,1305,5.026,2000,3.545,2003,4.505,2166,5.026,2169,5.026]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"changelog.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":192,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/ColorUtil.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"index.html":{}}}],["0.${val.replace",{"_index":1180,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["0.1.0",{"_index":1903,"title":{},"body":{"changelog.html":{}}}],["0.3.0",{"_index":1891,"title":{},"body":{"changelog.html":{}}}],["0.3.1",{"_index":1888,"title":{},"body":{"changelog.html":{}}}],["0.3.2",{"_index":1882,"title":{},"body":{"changelog.html":{}}}],["0.3.3",{"_index":1876,"title":{},"body":{"changelog.html":{}}}],["0.3.4",{"_index":1872,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["000000",{"_index":277,"title":{},"body":{"classes/ColorUtil.html":{}}}],["000080",{"_index":530,"title":{},"body":{"classes/ColorUtil.html":{}}}],["00008b",{"_index":377,"title":{},"body":{"classes/ColorUtil.html":{}}}],["0000cd",{"_index":504,"title":{},"body":{"classes/ColorUtil.html":{}}}],["0000ff",{"_index":354,"title":{},"body":{"classes/ColorUtil.html":{},"index.html":{}}}],["006400",{"_index":385,"title":{},"body":{"classes/ColorUtil.html":{}}}],["0074071",{"_index":1931,"title":{},"body":{"changelog.html":{}}}],["008000",{"_index":440,"title":{},"body":{"classes/ColorUtil.html":{}}}],["008080",{"_index":603,"title":{},"body":{"classes/ColorUtil.html":{}}}],["008b8b",{"_index":379,"title":{},"body":{"classes/ColorUtil.html":{}}}],["00bfff",{"_index":415,"title":{},"body":{"classes/ColorUtil.html":{}}}],["00ced1",{"_index":409,"title":{},"body":{"classes/ColorUtil.html":{}}}],["00fa9a",{"_index":514,"title":{},"body":{"classes/ColorUtil.html":{}}}],["00ff00",{"_index":493,"title":{},"body":{"classes/ColorUtil.html":{},"index.html":{}}}],["00ff7f",{"_index":597,"title":{},"body":{"classes/ColorUtil.html":{}}}],["00ffff",{"_index":341,"title":{},"body":{"classes/ColorUtil.html":{}}}],["06",{"_index":1874,"title":{},"body":{"changelog.html":{}}}],["0f8f753",{"_index":1897,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":194,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/ColorUtil.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"classes/FilterTool.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"classes/SharpenTool.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["10",{"_index":662,"title":{},"body":{"classes/ColorUtil.html":{}}}],["100",{"_index":664,"title":{},"body":{"classes/ColorUtil.html":{},"classes/FilterTool.html":{}}}],["100).tostring",{"_index":665,"title":{},"body":{"classes/ColorUtil.html":{}}}],["1000",{"_index":975,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["10398f8",{"_index":1957,"title":{},"body":{"changelog.html":{}}}],["11806a",{"_index":303,"title":{},"body":{"classes/ColorUtil.html":{}}}],["14",{"_index":1904,"title":{},"body":{"changelog.html":{}}}],["16).tostring",{"_index":660,"title":{},"body":{"classes/ColorUtil.html":{}}}],["16777216",{"_index":668,"title":{},"body":{"classes/ColorUtil.html":{}}}],["18",{"_index":1877,"title":{},"body":{"changelog.html":{}}}],["191970",{"_index":520,"title":{},"body":{"classes/ColorUtil.html":{}}}],["1abc9c",{"_index":281,"title":{},"body":{"classes/ColorUtil.html":{}}}],["1e90ff",{"_index":420,"title":{},"body":{"classes/ColorUtil.html":{}}}],["1f8b4c",{"_index":305,"title":{},"body":{"classes/ColorUtil.html":{}}}],["1fec6bb",{"_index":1881,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":704,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/ImageTool.html":{},"classes/LayerUtils.html":{}}}],["20",{"_index":1348,"title":{},"body":{"classes/ImageLoader.html":{}}}],["2000cb7",{"_index":1895,"title":{},"body":{"changelog.html":{}}}],["2022",{"_index":1873,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["206694",{"_index":307,"title":{},"body":{"classes/ColorUtil.html":{}}}],["20b2aa",{"_index":482,"title":{},"body":{"classes/ColorUtil.html":{}}}],["21",{"_index":1945,"title":{},"body":{"changelog.html":{}}}],["228b22",{"_index":426,"title":{},"body":{"classes/ColorUtil.html":{}}}],["23272a",{"_index":335,"title":{},"body":{"classes/ColorUtil.html":{}}}],["24",{"_index":2150,"title":{},"body":{"overview.html":{}}}],["255",{"_index":663,"title":{},"body":{"classes/ColorUtil.html":{}}}],["26",{"_index":1938,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":1875,"title":{},"body":{"changelog.html":{}}}],["2a11331",{"_index":1936,"title":{},"body":{"changelog.html":{}}}],["2c2f33",{"_index":333,"title":{},"body":{"classes/ColorUtil.html":{}}}],["2c3e50",{"_index":325,"title":{},"body":{"classes/ColorUtil.html":{}}}],["2e8b57",{"_index":580,"title":{},"body":{"classes/ColorUtil.html":{}}}],["2ecc71",{"_index":283,"title":{},"body":{"classes/ColorUtil.html":{}}}],["2f4f4f",{"_index":406,"title":{},"body":{"classes/ColorUtil.html":{}}}],["3",{"_index":644,"title":{},"body":{"classes/ColorUtil.html":{}}}],["30",{"_index":2149,"title":{},"body":{"overview.html":{}}}],["300",{"_index":1341,"title":{},"body":{"classes/ImageLoader.html":{}}}],["302",{"_index":1305,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/variables.html":{}}}],["32cd32",{"_index":495,"title":{},"body":{"classes/ColorUtil.html":{}}}],["34495e",{"_index":301,"title":{},"body":{"classes/ColorUtil.html":{}}}],["3498db",{"_index":285,"title":{},"body":{"classes/ColorUtil.html":{}}}],["3cb371",{"_index":510,"title":{},"body":{"classes/ColorUtil.html":{}}}],["4",{"_index":650,"title":{},"body":{"classes/ColorUtil.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"classes/ImageTool.html":{}}}],["40e0d0",{"_index":609,"title":{},"body":{"classes/ColorUtil.html":{}}}],["4132053",{"_index":1952,"title":{},"body":{"changelog.html":{}}}],["4169e1",{"_index":572,"title":{},"body":{"classes/ColorUtil.html":{}}}],["4682b4",{"_index":599,"title":{},"body":{"classes/ColorUtil.html":{}}}],["483d8b",{"_index":404,"title":{},"body":{"classes/ColorUtil.html":{}}}],["488fc9f",{"_index":1909,"title":{},"body":{"changelog.html":{}}}],["48d1cc",{"_index":516,"title":{},"body":{"classes/ColorUtil.html":{}}}],["4b0082",{"_index":451,"title":{},"body":{"classes/ColorUtil.html":{}}}],["4d5e94",{"_index":329,"title":{},"body":{"classes/ColorUtil.html":{}}}],["50",{"_index":889,"title":{},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["500",{"_index":2049,"title":{},"body":{"index.html":{}}}],["512",{"_index":2037,"title":{},"body":{"index.html":{}}}],["5156a89",{"_index":1902,"title":{},"body":{"changelog.html":{}}}],["556b2f",{"_index":392,"title":{},"body":{"classes/ColorUtil.html":{}}}],["5a8065f",{"_index":1917,"title":{},"body":{"changelog.html":{}}}],["5af4c28",{"_index":1930,"title":{},"body":{"changelog.html":{}}}],["5f9ea0",{"_index":362,"title":{},"body":{"classes/ColorUtil.html":{}}}],["6",{"_index":652,"title":{},"body":{"classes/ColorUtil.html":{}}}],["6495ed",{"_index":370,"title":{},"body":{"classes/ColorUtil.html":{}}}],["65526ea",{"_index":1955,"title":{},"body":{"changelog.html":{}}}],["663399",{"_index":566,"title":{},"body":{"classes/ColorUtil.html":{}}}],["66cdaa",{"_index":502,"title":{},"body":{"classes/ColorUtil.html":{}}}],["696969",{"_index":417,"title":{},"body":{"classes/ColorUtil.html":{}}}],["6a5acd",{"_index":590,"title":{},"body":{"classes/ColorUtil.html":{}}}],["6b8e23",{"_index":536,"title":{},"body":{"classes/ColorUtil.html":{}}}],["708090",{"_index":592,"title":{},"body":{"classes/ColorUtil.html":{}}}],["71368a",{"_index":309,"title":{},"body":{"classes/ColorUtil.html":{}}}],["71e80d0",{"_index":1942,"title":{},"body":{"changelog.html":{}}}],["7289da",{"_index":327,"title":{},"body":{"classes/ColorUtil.html":{}}}],["778899",{"_index":486,"title":{},"body":{"classes/ColorUtil.html":{}}}],["7825830",{"_index":1894,"title":{},"body":{"changelog.html":{}}}],["783dd58",{"_index":1921,"title":{},"body":{"changelog.html":{}}}],["788adbd",{"_index":1913,"title":{},"body":{"changelog.html":{}}}],["7b68ee",{"_index":512,"title":{},"body":{"classes/ColorUtil.html":{}}}],["7cd61f7",{"_index":1923,"title":{},"body":{"changelog.html":{}}}],["7cfc00",{"_index":461,"title":{},"body":{"classes/ColorUtil.html":{}}}],["7f8c8d",{"_index":321,"title":{},"body":{"classes/ColorUtil.html":{}}}],["7fff00",{"_index":364,"title":{},"body":{"classes/ColorUtil.html":{}}}],["7fffd4",{"_index":343,"title":{},"body":{"classes/ColorUtil.html":{}}}],["8",{"_index":655,"title":{},"body":{"classes/ColorUtil.html":{}}}],["800000",{"_index":500,"title":{},"body":{"classes/ColorUtil.html":{}}}],["800080",{"_index":564,"title":{},"body":{"classes/ColorUtil.html":{}}}],["808000",{"_index":534,"title":{},"body":{"classes/ColorUtil.html":{}}}],["808080",{"_index":438,"title":{},"body":{"classes/ColorUtil.html":{}}}],["819a50c",{"_index":1887,"title":{},"body":{"changelog.html":{}}}],["87ceeb",{"_index":588,"title":{},"body":{"classes/ColorUtil.html":{}}}],["87cefa",{"_index":484,"title":{},"body":{"classes/ColorUtil.html":{}}}],["896a98b",{"_index":1946,"title":{},"body":{"changelog.html":{}}}],["8a2be2",{"_index":356,"title":{},"body":{"classes/ColorUtil.html":{}}}],["8b0000",{"_index":398,"title":{},"body":{"classes/ColorUtil.html":{}}}],["8b008b",{"_index":390,"title":{},"body":{"classes/ColorUtil.html":{}}}],["8b4513",{"_index":574,"title":{},"body":{"classes/ColorUtil.html":{}}}],["8b4f10b",{"_index":1890,"title":{},"body":{"changelog.html":{}}}],["8fbc8f",{"_index":402,"title":{},"body":{"classes/ColorUtil.html":{}}}],["90ee90",{"_index":475,"title":{},"body":{"classes/ColorUtil.html":{}}}],["9370db",{"_index":508,"title":{},"body":{"classes/ColorUtil.html":{}}}],["93a3269",{"_index":1919,"title":{},"body":{"changelog.html":{}}}],["9400d3",{"_index":411,"title":{},"body":{"classes/ColorUtil.html":{}}}],["95a5a6",{"_index":299,"title":{},"body":{"classes/ColorUtil.html":{}}}],["979c9f",{"_index":319,"title":{},"body":{"classes/ColorUtil.html":{}}}],["98fb98",{"_index":546,"title":{},"body":{"classes/ColorUtil.html":{}}}],["992d22",{"_index":317,"title":{},"body":{"classes/ColorUtil.html":{}}}],["9932cc",{"_index":396,"title":{},"body":{"classes/ColorUtil.html":{}}}],["99aab5",{"_index":331,"title":{},"body":{"classes/ColorUtil.html":{}}}],["9acd32",{"_index":619,"title":{},"body":{"classes/ColorUtil.html":{}}}],["9b18a82",{"_index":1908,"title":{},"body":{"changelog.html":{}}}],["9b3316b",{"_index":1920,"title":{},"body":{"changelog.html":{}}}],["9b59b6",{"_index":289,"title":{},"body":{"classes/ColorUtil.html":{}}}],["_data",{"_index":1196,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["a.position",{"_index":792,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["a0522d",{"_index":584,"title":{},"body":{"classes/ColorUtil.html":{}}}],["a1c559a",{"_index":1907,"title":{},"body":{"changelog.html":{}}}],["a209619",{"_index":1932,"title":{},"body":{"changelog.html":{}}}],["a52a2a",{"_index":358,"title":{},"body":{"classes/ColorUtil.html":{}}}],["a7584e9",{"_index":1927,"title":{},"body":{"changelog.html":{}}}],["a7a69c3",{"_index":1939,"title":{},"body":{"changelog.html":{}}}],["a84300",{"_index":315,"title":{},"body":{"classes/ColorUtil.html":{}}}],["a9a9a9",{"_index":383,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ab",{"_index":1367,"title":{},"body":{"classes/ImageLoader.html":{}}}],["ab07a24",{"_index":1933,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":2114,"title":{},"body":{"license.html":{}}}],["accessors",{"_index":725,"title":{},"body":{"classes/ConvolutionTool.html":{},"classes/Illustrator.html":{},"classes/IllustratorColor.html":{},"classes/IllustratorImage.html":{},"classes/Layer.html":{},"classes/PixelsTool.html":{}}}],["action",{"_index":2140,"title":{},"body":{"license.html":{}}}],["ad1457",{"_index":311,"title":{},"body":{"classes/ColorUtil.html":{}}}],["add",{"_index":252,"title":{},"body":{"classes/ColorSwatches.html":{},"changelog.html":{},"index.html":{}}}],["add(data",{"_index":218,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["add8e6",{"_index":465,"title":{},"body":{"classes/ColorUtil.html":{}}}],["adddata",{"_index":798,"title":{},"body":{"classes/DataSource.html":{}}}],["adddata(data",{"_index":804,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["addframe",{"_index":1127,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["addframe(frames",{"_index":1054,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["addframe(layer",{"_index":971,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["addframes",{"_index":1128,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["addframes(layers",{"_index":980,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["addpoint",{"_index":125,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["adff2f",{"_index":442,"title":{},"body":{"classes/ColorUtil.html":{}}}],["afd8532",{"_index":1948,"title":{},"body":{"changelog.html":{}}}],["afeeee",{"_index":548,"title":{},"body":{"classes/ColorUtil.html":{}}}],["algorithm",{"_index":1660,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["aliases",{"_index":2162,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aliceblue",{"_index":336,"title":{},"body":{"classes/ColorUtil.html":{}}}],["alignment",{"_index":1786,"title":{},"body":{"classes/TextTool.html":{}}}],["alive",{"_index":2080,"title":{},"body":{"index.html":{}}}],["alphabetic",{"_index":1788,"title":{},"body":{"classes/TextTool.html":{}}}],["alphafac",{"_index":720,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["already",{"_index":749,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["always",{"_index":1984,"title":{},"body":{"contributing.html":{}}}],["amount",{"_index":262,"title":{},"body":{"classes/ColorSwatches.html":{},"classes/FilterTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{}}}],["and/or",{"_index":2105,"title":{},"body":{"license.html":{}}}],["angle",{"_index":927,"title":{},"body":{"classes/FilterTool.html":{},"classes/TransformTool.html":{}}}],["angle}deg",{"_index":952,"title":{},"body":{"classes/FilterTool.html":{}}}],["animation",{"_index":1015,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"changelog.html":{},"index.html":{}}}],["animation.createanimation",{"_index":2053,"title":{},"body":{"index.html":{}}}],["animation.setrepeat(0).addframes(layers",{"_index":2052,"title":{},"body":{"index.html":{}}}],["animation/illustratoranimation",{"_index":1078,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["antiquewhite",{"_index":338,"title":{},"body":{"classes/ColorUtil.html":{}}}],["api",{"_index":830,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["apis",{"_index":1989,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["applyfilter",{"_index":900,"title":{},"body":{"classes/FilterTool.html":{}}}],["applyfilter(filters",{"_index":911,"title":{},"body":{"classes/FilterTool.html":{}}}],["applysharpness",{"_index":1736,"title":{},"body":{"classes/SharpenTool.html":{}}}],["applysharpness(amount",{"_index":1737,"title":{},"body":{"classes/SharpenTool.html":{}}}],["applytool",{"_index":1414,"title":{},"body":{"classes/Layer.html":{}}}],["applytool(tool",{"_index":1436,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["aqua",{"_index":340,"title":{},"body":{"classes/ColorUtil.html":{}}}],["aquamarine",{"_index":342,"title":{},"body":{"classes/ColorUtil.html":{}}}],["arc",{"_index":1618,"title":{},"body":{"classes/LineTool.html":{}}}],["arc(options",{"_index":44,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["arcto",{"_index":1619,"title":{},"body":{"classes/LineTool.html":{}}}],["arcto(options",{"_index":52,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["arctopoint",{"_index":1,"title":{"interfaces/ArcToPoint.html":{}},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["arg",{"_index":190,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["args",{"_index":974,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/ImageTool.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["args.length",{"_index":1404,"title":{},"body":{"classes/ImageTool.html":{}}}],["arguments",{"_index":1402,"title":{},"body":{"classes/ImageTool.html":{}}}],["arguments.length",{"_index":972,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["arising",{"_index":2144,"title":{},"body":{"license.html":{}}}],["array",{"_index":693,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/DataSource.html":{},"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/TextDataSource.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["array(4).fill(\"0",{"_index":640,"title":{},"body":{"classes/ColorUtil.html":{}}}],["array.isarray(data",{"_index":831,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["array.isarray(filters",{"_index":936,"title":{},"body":{"classes/FilterTool.html":{}}}],["array.isarray(this.#frames",{"_index":1055,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["arraybuffer",{"_index":1307,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/typealiases.html":{}}}],["assertion",{"_index":1052,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/ImageTool.html":{}}}],["associated",{"_index":2093,"title":{},"body":{"license.html":{}}}],["async",{"_index":1012,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{}}}],["author",{"_index":2160,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":2133,"title":{},"body":{"license.html":{}}}],["autoclear",{"_index":72,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{}}}],["avif",{"_index":1084,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["avifconfig",{"_index":1076,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["await",{"_index":1019,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"index.html":{}}}],["awaitable",{"_index":1818,"title":{},"body":{"classes/ToolBox.html":{},"miscellaneous/typealiases.html":{}}}],["azure",{"_index":344,"title":{},"body":{"classes/ColorUtil.html":{}}}],["b",{"_index":790,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["b.position",{"_index":791,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["b0c4de",{"_index":489,"title":{},"body":{"classes/ColorUtil.html":{}}}],["b0e0e6",{"_index":562,"title":{},"body":{"classes/ColorUtil.html":{}}}],["b22222",{"_index":422,"title":{},"body":{"classes/ColorUtil.html":{}}}],["b8860b",{"_index":381,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ba55d3",{"_index":506,"title":{},"body":{"classes/ColorUtil.html":{}}}],["background",{"_index":1089,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"changelog.html":{},"index.html":{}}}],["backgroundcolortool",{"_index":68,"title":{"classes/BackgroundColorTool.html":{}},"body":{"classes/BackgroundColorTool.html":{}}}],["backgroundlayer",{"_index":1058,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["base",{"_index":1898,"title":{},"body":{"changelog.html":{}}}],["base/baseshapetool",{"_index":19,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["base/toolbox",{"_index":117,"title":{},"body":{"classes/BackgroundColorTool.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/ShadowTool.html":{},"classes/TextTool.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["baseshapetool",{"_index":18,"title":{"classes/BaseShapeTool.html":{}},"body":{"interfaces/ArcToPoint.html":{},"classes/BaseShapeTool.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["baseshapetool:100",{"_index":879,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:108",{"_index":874,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:116",{"_index":867,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:14",{"_index":878,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:22",{"_index":876,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:30",{"_index":873,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:38",{"_index":871,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:46",{"_index":875,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:54",{"_index":877,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:6",{"_index":872,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:62",{"_index":866,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:70",{"_index":870,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:78",{"_index":869,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:86",{"_index":868,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["bc8f8f",{"_index":570,"title":{},"body":{"classes/ColorUtil.html":{}}}],["bcc0c0",{"_index":323,"title":{},"body":{"classes/ColorUtil.html":{}}}],["bdb76b",{"_index":388,"title":{},"body":{"classes/ColorUtil.html":{}}}],["before",{"_index":1973,"title":{},"body":{"contributing.html":{}}}],["beginner",{"_index":2021,"title":{},"body":{"index.html":{}}}],["behind",{"_index":2068,"title":{},"body":{"index.html":{}}}],["beige",{"_index":346,"title":{},"body":{"classes/ColorUtil.html":{}}}],["bevel",{"_index":159,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["bgtool",{"_index":2039,"title":{},"body":{"index.html":{}}}],["bgtool.fill(0",{"_index":2043,"title":{},"body":{"index.html":{}}}],["bgtool.render",{"_index":2046,"title":{},"body":{"index.html":{}}}],["bgtool.setfillcolor(color",{"_index":2042,"title":{},"body":{"index.html":{}}}],["bisque",{"_index":348,"title":{},"body":{"classes/ColorUtil.html":{}}}],["black",{"_index":350,"title":{},"body":{"classes/ColorUtil.html":{}}}],["blanchedalmond",{"_index":351,"title":{},"body":{"classes/ColorUtil.html":{}}}],["blue",{"_index":353,"title":{},"body":{"classes/ColorUtil.html":{}}}],["blueviolet",{"_index":355,"title":{},"body":{"classes/ColorUtil.html":{}}}],["blur",{"_index":942,"title":{},"body":{"classes/FilterTool.html":{},"index.html":{}}}],["body",{"_index":1317,"title":{},"body":{"classes/ImageLoader.html":{}}}],["body.push(chunk",{"_index":1320,"title":{},"body":{"classes/ImageLoader.html":{}}}],["boolean",{"_index":27,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/TextDataSource.html":{}}}],["bottom",{"_index":1105,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/TextTool.html":{}}}],["break",{"_index":649,"title":{},"body":{"classes/ColorUtil.html":{}}}],["brightness",{"_index":901,"title":{},"body":{"classes/FilterTool.html":{},"classes/PixelsTool.html":{},"index.html":{}}}],["brightness(amount",{"_index":915,"title":{},"body":{"classes/FilterTool.html":{}}}],["brooooooklyn",{"_index":2066,"title":{},"body":{"index.html":{}}}],["brown",{"_index":357,"title":{},"body":{"classes/ColorUtil.html":{}}}],["buffer",{"_index":1194,"title":{},"body":{"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"interfaces/RawImageData.html":{},"classes/TextTool.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["buffer.isbuffer(source",{"_index":1353,"title":{},"body":{"classes/ImageLoader.html":{}}}],["bufferonly",{"_index":1286,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/functions.html":{}}}],["bug",{"_index":1883,"title":{},"body":{"changelog.html":{}}}],["bugs",{"_index":2156,"title":{},"body":{"properties.html":{}}}],["build",{"_index":2017,"title":{},"body":{"index.html":{}}}],["built",{"_index":2064,"title":{},"body":{"index.html":{}}}],["burlywood",{"_index":359,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c",{"_index":637,"title":{},"body":{"classes/ColorUtil.html":{},"license.html":{}}}],["c.length",{"_index":642,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c.map((char",{"_index":658,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c.pop",{"_index":666,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c0c0c0",{"_index":586,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c1a2b88",{"_index":1950,"title":{},"body":{"changelog.html":{}}}],["c24ef1d",{"_index":1922,"title":{},"body":{"changelog.html":{}}}],["c27c0e",{"_index":313,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c71585",{"_index":518,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c8be6f1",{"_index":1943,"title":{},"body":{"changelog.html":{}}}],["c[0",{"_index":645,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c[1",{"_index":646,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c[2",{"_index":647,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c[3",{"_index":651,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c[4",{"_index":653,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c[5",{"_index":654,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c[6",{"_index":656,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c[7",{"_index":657,"title":{},"body":{"classes/ColorUtil.html":{}}}],["cache",{"_index":1533,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["cadetblue",{"_index":361,"title":{},"body":{"classes/ColorUtil.html":{}}}],["camelcase",{"_index":1985,"title":{},"body":{"contributing.html":{}}}],["canvacord",{"_index":2059,"title":{},"body":{"index.html":{}}}],["canvas",{"_index":1041,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"changelog.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["canvas).encode(\"png",{"_index":1359,"title":{},"body":{"classes/ImageLoader.html":{}}}],["canvas.getcontext(\"2d",{"_index":1094,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["canvasarray",{"_index":1035,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["canvasarray.map((m",{"_index":1044,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["canvasgradient",{"_index":106,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{},"classes/TextTool.html":{}}}],["canvaslinecap",{"_index":151,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["canvaspattern",{"_index":105,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{},"classes/TextTool.html":{}}}],["case",{"_index":643,"title":{},"body":{"classes/ColorUtil.html":{}}}],["cd5c5c",{"_index":449,"title":{},"body":{"classes/ColorUtil.html":{}}}],["cd853f",{"_index":556,"title":{},"body":{"classes/ColorUtil.html":{}}}],["center",{"_index":1780,"title":{},"body":{"classes/TextTool.html":{}}}],["cfcdd83",{"_index":1928,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":1871,"title":{"changelog.html":{}},"body":{}}],["changelogs",{"_index":1995,"title":{},"body":{"contributing.html":{}}}],["charge",{"_index":2089,"title":{},"body":{"license.html":{}}}],["chartreuse",{"_index":363,"title":{},"body":{"classes/ColorUtil.html":{}}}],["check",{"_index":1910,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["chocolate",{"_index":365,"title":{},"body":{"classes/ColorUtil.html":{}}}],["chromasubsampling",{"_index":1208,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{},"miscellaneous/variables.html":{}}}],["chunk",{"_index":1319,"title":{},"body":{"classes/ImageLoader.html":{}}}],["circle",{"_index":1391,"title":{},"body":{"classes/ImageTool.html":{},"changelog.html":{}}}],["circular",{"_index":894,"title":{},"body":{"classes/EraserTool.html":{}}}],["circular(options",{"_index":887,"title":{},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["claim",{"_index":2136,"title":{},"body":{"license.html":{}}}],["class",{"_index":36,"title":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"classes/ConvolutionTool.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"classes/LayerTools.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{}},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"contributing.html":{}}}],["classes",{"_index":69,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"classes/ConvolutionTool.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"classes/LayerTools.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{},"overview.html":{}}}],["clear",{"_index":236,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["clearcache",{"_index":1536,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"changelog.html":{}}}],["clearframes",{"_index":969,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["cleartransformer",{"_index":1673,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["clip",{"_index":126,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["clip(options",{"_index":136,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["clone",{"_index":799,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["close",{"_index":1893,"title":{},"body":{"changelog.html":{}}}],["cmyk",{"_index":1163,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["cmyk(${number",{"_index":212,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["code",{"_index":1001,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/ImageLoader.html":{},"contributing.html":{}}}],["color",{"_index":108,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/EllipseTool.html":{},"classes/FilterTool.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/TextTool.html":{},"changelog.html":{},"index.html":{}}}],["color.indexof(pattern",{"_index":1172,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["color.split(\",\").map(m",{"_index":1176,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["color.startswith(\"rgb",{"_index":1173,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["color.startswith(\"rgba",{"_index":1174,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["colorconfig",{"_index":203,"title":{"interfaces/ColorConfig.html":{}},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["colors",{"_index":270,"title":{"classes/Colors.html":{}},"body":{"classes/ColorUtil.html":{},"classes/Colors.html":{},"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"changelog.html":{},"index.html":{}}}],["colors(this",{"_index":1063,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["colors/colors",{"_index":1079,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["colorspace",{"_index":1217,"title":{},"body":{"classes/IllustratorImage.html":{},"classes/LayerUtils.html":{},"interfaces/RawImageData.html":{}}}],["colorswatches",{"_index":215,"title":{"classes/ColorSwatches.html":{}},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/Colors.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["colorutil",{"_index":267,"title":{"classes/ColorUtil.html":{}},"body":{"classes/ColorUtil.html":{},"classes/Colors.html":{},"changelog.html":{}}}],["colorutil.colors",{"_index":672,"title":{},"body":{"classes/ColorUtil.html":{}}}],["colorutil.colors[color",{"_index":674,"title":{},"body":{"classes/ColorUtil.html":{}}}],["colorutil.ishex(hex",{"_index":639,"title":{},"body":{"classes/ColorUtil.html":{}}}],["colorutil.randomhex",{"_index":673,"title":{},"body":{"classes/ColorUtil.html":{}}}],["commit",{"_index":1916,"title":{},"body":{"changelog.html":{}}}],["commitlint",{"_index":1914,"title":{},"body":{"changelog.html":{}}}],["commits",{"_index":1999,"title":{},"body":{"contributing.html":{}}}],["compression",{"_index":2027,"title":{},"body":{"index.html":{}}}],["compressiontype",{"_index":1209,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{},"miscellaneous/variables.html":{}}}],["compressjpeg",{"_index":1240,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["compressjpeg(src",{"_index":1248,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["compressjpegsync",{"_index":1241,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["compressjpegsync(src",{"_index":1251,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["compresspnglossless",{"_index":1242,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["compresspnglossless(src",{"_index":1253,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["compresspnglosslesssync",{"_index":1243,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["compresspnglosslesssync(src",{"_index":1256,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["conditions",{"_index":2113,"title":{},"body":{"license.html":{}}}],["config",{"_index":732,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/DataSource.html":{},"classes/Illustrator.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"interfaces/TextDataSource.html":{},"index.html":{}}}],["config.avifconfig",{"_index":1123,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["config.encoding",{"_index":1120,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["config.quality",{"_index":1125,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["connection",{"_index":2145,"title":{},"body":{"license.html":{}}}],["console.log(image.width",{"_index":1289,"title":{},"body":{"classes/ImageLoader.html":{}}}],["const",{"_index":227,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"classes/DataSource.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerWrapper.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"interfaces/TextDataSource.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"index.html":{}}}],["constructor",{"_index":631,"title":{},"body":{"classes/ColorUtil.html":{},"classes/Colors.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"classes/IllustratorImage.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"classes/ToolBox.html":{}}}],["constructor(_data",{"_index":1193,"title":{},"body":{"classes/IllustratorImage.html":{}}}],["constructor(ctx",{"_index":1582,"title":{},"body":{"classes/LayerUtils.html":{}}}],["constructor(illustrator",{"_index":679,"title":{},"body":{"classes/Colors.html":{},"classes/IllustratorAnimation.html":{},"classes/LayerManager.html":{}}}],["constructor(layer",{"_index":1561,"title":{},"body":{"classes/LayerTools.html":{},"classes/ToolBox.html":{}}}],["constructor(manager",{"_index":1426,"title":{},"body":{"classes/Layer.html":{}}}],["constructor(private",{"_index":1226,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["constructor(public",{"_index":685,"title":{},"body":{"classes/Colors.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerWrapper.html":{},"classes/ToolBox.html":{}}}],["constructor(swatches",{"_index":1153,"title":{},"body":{"classes/IllustratorColor.html":{}}}],["constructor(width",{"_index":1059,"title":{},"body":{"classes/Illustrator.html":{}}}],["consumestream",{"_index":2002,"title":{},"body":{"miscellaneous/functions.html":{}}}],["consumestream(res).then(resolve",{"_index":1345,"title":{},"body":{"classes/ImageLoader.html":{}}}],["consumestream(source",{"_index":1352,"title":{},"body":{"classes/ImageLoader.html":{}}}],["consumestream(stream",{"_index":1314,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/functions.html":{}}}],["containing",{"_index":1980,"title":{},"body":{"contributing.html":{}}}],["context",{"_index":1424,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"changelog.html":{}}}],["context.from",{"_index":1670,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["context.height",{"_index":1640,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["context.to",{"_index":1638,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["context.width",{"_index":1639,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["continue",{"_index":1110,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["contract",{"_index":2141,"title":{},"body":{"license.html":{}}}],["contrast",{"_index":902,"title":{},"body":{"classes/FilterTool.html":{},"classes/PixelsTool.html":{}}}],["contrast(amount",{"_index":917,"title":{},"body":{"classes/FilterTool.html":{}}}],["contributing",{"_index":1958,"title":{"contributing.html":{}},"body":{"contributing.html":{}}}],["contribution",{"_index":1959,"title":{},"body":{"contributing.html":{}}}],["controlpointx",{"_index":29,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["controlpointy",{"_index":30,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["conventional",{"_index":1998,"title":{},"body":{"contributing.html":{}}}],["conversion",{"_index":2026,"title":{},"body":{"index.html":{}}}],["convolute",{"_index":724,"title":{},"body":{"classes/ConvolutionTool.html":{},"classes/SharpenTool.html":{}}}],["convolute(options",{"_index":696,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/SharpenTool.html":{}}}],["convolution",{"_index":1925,"title":{},"body":{"changelog.html":{}}}],["convolutionfilter",{"_index":1740,"title":{},"body":{"classes/SharpenTool.html":{},"changelog.html":{}}}],["convolutionoptions",{"_index":686,"title":{"interfaces/ConvolutionOptions.html":{}},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/SharpenTool.html":{}}}],["convolutiontool",{"_index":695,"title":{"classes/ConvolutionTool.html":{}},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/SharpenTool.html":{}}}],["convolutiontool:13",{"_index":1739,"title":{},"body":{"classes/SharpenTool.html":{}}}],["coordinates",{"_index":1411,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["copies",{"_index":2107,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1445,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"license.html":{}}}],["copyright",{"_index":2083,"title":{},"body":{"license.html":{}}}],["coral",{"_index":367,"title":{},"body":{"classes/ColorUtil.html":{}}}],["cornflowerblue",{"_index":369,"title":{},"body":{"classes/ColorUtil.html":{}}}],["cornsilk",{"_index":371,"title":{},"body":{"classes/ColorUtil.html":{}}}],["count",{"_index":238,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["counterclockwise",{"_index":26,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["create",{"_index":2035,"title":{},"body":{"index.html":{}}}],["createanimation",{"_index":1013,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["createcanvas",{"_index":1077,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["createcanvas(this.width",{"_index":1092,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["createconicgradient",{"_index":1573,"title":{},"body":{"classes/LayerUtils.html":{}}}],["createconicgradient(startangle",{"_index":1584,"title":{},"body":{"classes/LayerUtils.html":{}}}],["created",{"_index":1676,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["createimage",{"_index":1281,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/functions.html":{}}}],["createimage(await",{"_index":1351,"title":{},"body":{"classes/ImageLoader.html":{}}}],["createimage(buffer.from(ab",{"_index":1377,"title":{},"body":{"classes/ImageLoader.html":{}}}],["createimage(buffer.from(source",{"_index":1355,"title":{},"body":{"classes/ImageLoader.html":{}}}],["createimage(data",{"_index":1282,"title":{},"body":{"classes/ImageLoader.html":{}}}],["createimage(res",{"_index":1379,"title":{},"body":{"classes/ImageLoader.html":{}}}],["createimage(source",{"_index":1310,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/functions.html":{}}}],["createimage(source.src",{"_index":1356,"title":{},"body":{"classes/ImageLoader.html":{}}}],["createlayer",{"_index":1088,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/LayerManager.html":{}}}],["createlayer(options",{"_index":744,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["createlayeroptions",{"_index":730,"title":{"interfaces/CreateLayerOptions.html":{}},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["createlineargradient",{"_index":1574,"title":{},"body":{"classes/LayerUtils.html":{}}}],["createlineargradient(x0",{"_index":1586,"title":{},"body":{"classes/LayerUtils.html":{}}}],["createpattern",{"_index":1575,"title":{},"body":{"classes/LayerUtils.html":{}}}],["createpattern(image",{"_index":1590,"title":{},"body":{"classes/LayerUtils.html":{}}}],["createradialgradient",{"_index":1576,"title":{},"body":{"classes/LayerUtils.html":{}}}],["createradialgradient(x0",{"_index":1593,"title":{},"body":{"classes/LayerUtils.html":{}}}],["createrawtransformer",{"_index":1677,"title":{},"body":{"classes/PixelsTool.html":{}}}],["createrawtransformer(src",{"_index":1633,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["creates",{"_index":1284,"title":{},"body":{"classes/ImageLoader.html":{}}}],["createtransformation",{"_index":1415,"title":{},"body":{"classes/Layer.html":{}}}],["createtransformation(data",{"_index":1439,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["createtransformer",{"_index":1678,"title":{},"body":{"classes/PixelsTool.html":{}}}],["createtransformer(context",{"_index":1636,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["creating",{"_index":2034,"title":{},"body":{"index.html":{}}}],["crimson",{"_index":373,"title":{},"body":{"classes/ColorUtil.html":{}}}],["crop",{"_index":1679,"title":{},"body":{"classes/PixelsTool.html":{},"index.html":{}}}],["crop(context",{"_index":1645,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["ctx",{"_index":698,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/DataSource.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"interfaces/ImageDataSource.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/TextDataSource.html":{},"classes/ToolBox.html":{}}}],["ctx.arc",{"_index":45,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["ctx.arc(options.x",{"_index":888,"title":{},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["ctx.arcto",{"_index":1712,"title":{},"body":{"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["ctx.arcto(options.x",{"_index":1713,"title":{},"body":{"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["ctx.arcto(options.x1",{"_index":53,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["ctx.beginpath",{"_index":182,"title":{},"body":{"classes/BaseShapeTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["ctx.beziercurveto",{"_index":61,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["ctx.clearrect(0",{"_index":891,"title":{},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["ctx.clearrect(options.x",{"_index":884,"title":{},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["ctx.clip",{"_index":202,"title":{},"body":{"classes/BaseShapeTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["ctx.closepath",{"_index":183,"title":{},"body":{"classes/BaseShapeTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["ctx.direction",{"_index":1803,"title":{},"body":{"classes/TextTool.html":{}}}],["ctx.drawimage",{"_index":1099,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["ctx.drawimage(data",{"_index":1669,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["ctx.drawimage(image",{"_index":1409,"title":{},"body":{"classes/ImageTool.html":{}}}],["ctx.ellipse",{"_index":857,"title":{},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{}}}],["ctx.fill",{"_index":189,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["ctx.fillrect(x",{"_index":119,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["ctx.fillstyle",{"_index":118,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/TextTool.html":{}}}],["ctx.filltext(...makeargs((el",{"_index":1808,"title":{},"body":{"classes/TextTool.html":{}}}],["ctx.filter",{"_index":938,"title":{},"body":{"classes/FilterTool.html":{}}}],["ctx.font",{"_index":1806,"title":{},"body":{"classes/TextTool.html":{}}}],["ctx.linecap",{"_index":178,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["ctx.linedashoffset",{"_index":179,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["ctx.linejoin",{"_index":180,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["ctx.lineto(from",{"_index":42,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["ctx.linewidth",{"_index":122,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{}}}],["ctx.miterlimit",{"_index":181,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["ctx.moveto(options.x",{"_index":1711,"title":{},"body":{"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["ctx.moveto(x",{"_index":184,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["ctx.quadraticcurveto(options.controlpointx",{"_index":58,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["ctx.rect(options.x",{"_index":1709,"title":{},"body":{"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["ctx.resettransform",{"_index":1844,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["ctx.restore",{"_index":1407,"title":{},"body":{"classes/ImageTool.html":{},"classes/ToolBox.html":{}}}],["ctx.rotate(angle",{"_index":1855,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["ctx.save",{"_index":1403,"title":{},"body":{"classes/ImageTool.html":{},"classes/ToolBox.html":{}}}],["ctx.scale(x",{"_index":1857,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["ctx.setlinedash(segments",{"_index":201,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["ctx.settransform",{"_index":1842,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["ctx.shadowblur",{"_index":1731,"title":{},"body":{"classes/ShadowTool.html":{}}}],["ctx.shadowcolor",{"_index":1730,"title":{},"body":{"classes/ShadowTool.html":{}}}],["ctx.shadowoffsetx",{"_index":1732,"title":{},"body":{"classes/ShadowTool.html":{}}}],["ctx.shadowoffsety",{"_index":1733,"title":{},"body":{"classes/ShadowTool.html":{}}}],["ctx.stroke",{"_index":200,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["ctx.stroke(options.path",{"_index":199,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["ctx.strokerect(x",{"_index":120,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["ctx.strokestyle",{"_index":121,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/TextTool.html":{}}}],["ctx.stroketext(...makeargs((el",{"_index":1810,"title":{},"body":{"classes/TextTool.html":{}}}],["ctx.textalign",{"_index":1804,"title":{},"body":{"classes/TextTool.html":{}}}],["ctx.textbaseline",{"_index":1805,"title":{},"body":{"classes/TextTool.html":{}}}],["ctx.transform",{"_index":1836,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["ctx.translate(x",{"_index":1832,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["cubicbeziercurve",{"_index":1620,"title":{},"body":{"classes/LineTool.html":{}}}],["cubicbeziercurve(options",{"_index":60,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["cubicbeziercurveoptions",{"_index":31,"title":{"interfaces/CubicBezierCurveOptions.html":{}},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["cyan",{"_index":375,"title":{},"body":{"classes/ColorUtil.html":{}}}],["d2691e",{"_index":366,"title":{},"body":{"classes/ColorUtil.html":{}}}],["d2b48c",{"_index":601,"title":{},"body":{"classes/ColorUtil.html":{}}}],["d3d3d3",{"_index":473,"title":{},"body":{"classes/ColorUtil.html":{}}}],["d4c5685",{"_index":1956,"title":{},"body":{"changelog.html":{}}}],["d8bfd8",{"_index":605,"title":{},"body":{"classes/ColorUtil.html":{}}}],["d96aa88",{"_index":1935,"title":{},"body":{"changelog.html":{}}}],["da",{"_index":633,"title":{},"body":{"classes/ColorUtil.html":{}}}],["da70d6",{"_index":542,"title":{},"body":{"classes/ColorUtil.html":{}}}],["daa520",{"_index":434,"title":{},"body":{"classes/ColorUtil.html":{}}}],["damages",{"_index":2137,"title":{},"body":{"license.html":{}}}],["darkblue",{"_index":376,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkcyan",{"_index":378,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkgoldenrod",{"_index":380,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkgray",{"_index":382,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkgreen",{"_index":384,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkgrey",{"_index":386,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkkhaki",{"_index":387,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkmagenta",{"_index":389,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkolivegreen",{"_index":391,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkorange",{"_index":393,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkorchid",{"_index":395,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkred",{"_index":397,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darksalmon",{"_index":399,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkseagreen",{"_index":401,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkslateblue",{"_index":403,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkslategray",{"_index":405,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkslategrey",{"_index":407,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkturquoise",{"_index":408,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkviolet",{"_index":410,"title":{},"body":{"classes/ColorUtil.html":{}}}],["data",{"_index":216,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/DataSource.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"classes/LayerUtils.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"interfaces/TextDataSource.html":{},"changelog.html":{}}}],["data.color",{"_index":223,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["data.coordinates",{"_index":1487,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["data.force",{"_index":225,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["data.height",{"_index":1234,"title":{},"body":{"classes/IllustratorImage.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/RawImageData.html":{}}}],["data.name",{"_index":219,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["data.width",{"_index":1233,"title":{},"body":{"classes/IllustratorImage.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/RawImageData.html":{}}}],["data[name",{"_index":251,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["datasource",{"_index":796,"title":{"classes/DataSource.html":{}},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{},"changelog.html":{}}}],["db7093",{"_index":550,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc143c",{"_index":374,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_aqua",{"_index":280,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_blue",{"_index":284,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_blurple",{"_index":326,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_dark_aqua",{"_index":302,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_dark_blue",{"_index":306,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_dark_blurple",{"_index":328,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_dark_but_not_black",{"_index":332,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_dark_gold",{"_index":312,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_dark_green",{"_index":304,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_dark_grey",{"_index":318,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_dark_navy",{"_index":324,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_dark_orange",{"_index":314,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_dark_purple",{"_index":308,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_dark_red",{"_index":316,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_dark_vivid_pink",{"_index":310,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_darker_grey",{"_index":320,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_default",{"_index":276,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_gold",{"_index":292,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_green",{"_index":282,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_grey",{"_index":298,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_greyple",{"_index":330,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_light_grey",{"_index":322,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_luminous_vivid_pink",{"_index":290,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_navy",{"_index":300,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_not_quite_black",{"_index":334,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_orange",{"_index":294,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_purple",{"_index":288,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_red",{"_index":296,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_white",{"_index":278,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_yellow",{"_index":286,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dcdcdc",{"_index":430,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dda0dd",{"_index":560,"title":{},"body":{"classes/ColorUtil.html":{}}}],["de626b5",{"_index":1924,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":2094,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2146,"title":{},"body":{"license.html":{}}}],["deb887",{"_index":360,"title":{},"body":{"classes/ColorUtil.html":{}}}],["deeppink",{"_index":412,"title":{},"body":{"classes/ColorUtil.html":{}}}],["deepskyblue",{"_index":414,"title":{},"body":{"classes/ColorUtil.html":{}}}],["default",{"_index":85,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"classes/ConvolutionTool.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/Illustrator.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":89,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"classes/ConvolutionTool.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"classes/LayerTools.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{}}}],["delay",{"_index":997,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["delete",{"_index":1558,"title":{},"body":{"classes/LayerTools.html":{}}}],["delete(name",{"_index":1538,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["deletelayer",{"_index":1507,"title":{},"body":{"classes/LayerManager.html":{}}}],["deletelayer(layer",{"_index":763,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["deployment",{"_index":1974,"title":{},"body":{"contributing.html":{}}}],["description",{"_index":1261,"title":{},"body":{"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"properties.html":{}}}],["devandromeda",{"_index":2084,"title":{},"body":{"license.html":{},"properties.html":{}}}],["dh",{"_index":1389,"title":{},"body":{"classes/ImageTool.html":{}}}],["dh].every((x",{"_index":1408,"title":{},"body":{"classes/ImageTool.html":{}}}],["dimgray",{"_index":416,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dimgrey",{"_index":418,"title":{},"body":{"classes/ColorUtil.html":{}}}],["direction",{"_index":1774,"title":{},"body":{"classes/TextTool.html":{}}}],["disable",{"_index":1046,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/ImageTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["discord",{"_index":2073,"title":{},"body":{"index.html":{}}}],["disposalcode",{"_index":964,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["distribute",{"_index":2103,"title":{},"body":{"license.html":{}}}],["divider",{"_index":1599,"title":{},"body":{"classes/LayerUtils.html":{}}}],["document",{"_index":1988,"title":{},"body":{"contributing.html":{}}}],["documentation",{"_index":2030,"title":{},"body":{"index.html":{},"license.html":{}}}],["dodgerblue",{"_index":419,"title":{},"body":{"classes/ColorUtil.html":{}}}],["don't",{"_index":1111,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"contributing.html":{}}}],["done",{"_index":2062,"title":{},"body":{"index.html":{}}}],["draw",{"_index":862,"title":{},"body":{"classes/EllipseTool.html":{},"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/ImageTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["draw(from",{"_index":40,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["draw(image",{"_index":1384,"title":{},"body":{"classes/ImageTool.html":{}}}],["draw(options",{"_index":856,"title":{},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["drawarcoptions",{"_index":21,"title":{"interfaces/DrawArcOptions.html":{}},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["drawcircle",{"_index":863,"title":{},"body":{"classes/EllipseTool.html":{}}}],["drawcircle(options",{"_index":861,"title":{},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{}}}],["drawcircleoptions",{"_index":853,"title":{},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"miscellaneous/typealiases.html":{}}}],["drawellipseoptions",{"_index":848,"title":{"interfaces/DrawEllipseOptions.html":{}},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{}}}],["drawrounded",{"_index":1383,"title":{},"body":{"classes/ImageTool.html":{},"classes/RectangleTool.html":{},"changelog.html":{}}}],["drawrounded(image",{"_index":1394,"title":{},"body":{"classes/ImageTool.html":{}}}],["drawrounded(options",{"_index":1710,"title":{},"body":{"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["drop",{"_index":946,"title":{},"body":{"classes/FilterTool.html":{}}}],["dropshadow",{"_index":903,"title":{},"body":{"classes/FilterTool.html":{}}}],["dropshadow(x",{"_index":919,"title":{},"body":{"classes/FilterTool.html":{}}}],["ds",{"_index":844,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["ds.loaddata(this.data.slice",{"_index":845,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["ds.name",{"_index":836,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["dst",{"_index":718,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["duplicate",{"_index":1416,"title":{},"body":{"classes/Layer.html":{}}}],["duplicate(name",{"_index":1442,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["duplicatelayer",{"_index":1508,"title":{},"body":{"classes/LayerManager.html":{}}}],["duplicatelayer(layer",{"_index":760,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["duration",{"_index":959,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"index.html":{}}}],["dw",{"_index":1388,"title":{},"body":{"classes/ImageTool.html":{}}}],["dx",{"_index":1385,"title":{},"body":{"classes/ImageTool.html":{},"classes/LayerUtils.html":{}}}],["dy",{"_index":1386,"title":{},"body":{"classes/ImageTool.html":{},"classes/LayerUtils.html":{}}}],["e",{"_index":1330,"title":{},"body":{"classes/ImageLoader.html":{}}}],["e0dc795",{"_index":1953,"title":{},"body":{"changelog.html":{}}}],["e0ffff",{"_index":469,"title":{},"body":{"classes/ColorUtil.html":{}}}],["e42a539",{"_index":1899,"title":{},"body":{"changelog.html":{}}}],["e67e22",{"_index":295,"title":{},"body":{"classes/ColorUtil.html":{}}}],["e6e6fa",{"_index":459,"title":{},"body":{"classes/ColorUtil.html":{}}}],["e74c3c",{"_index":297,"title":{},"body":{"classes/ColorUtil.html":{}}}],["e91e63",{"_index":291,"title":{},"body":{"classes/ColorUtil.html":{}}}],["e9967a",{"_index":400,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ee82ee",{"_index":611,"title":{},"body":{"classes/ColorUtil.html":{}}}],["eee8aa",{"_index":544,"title":{},"body":{"classes/ColorUtil.html":{}}}],["eefa81d",{"_index":1911,"title":{},"body":{"changelog.html":{}}}],["efbcb18",{"_index":1880,"title":{},"body":{"changelog.html":{}}}],["eg",{"_index":1981,"title":{},"body":{"contributing.html":{}}}],["el",{"_index":1809,"title":{},"body":{"classes/TextTool.html":{}}}],["ellipse",{"_index":1929,"title":{},"body":{"changelog.html":{}}}],["ellipsetool",{"_index":855,"title":{"classes/EllipseTool.html":{}},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{}}}],["encoder",{"_index":1016,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoder.addframe(frame.ctx.getimagedata(0",{"_index":1030,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoder.createreadstream",{"_index":1022,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoder.finish",{"_index":1033,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoder.setdelay(frame.duration",{"_index":1029,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoder.setdispose(this.#encoderconfig.dispose",{"_index":1023,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoder.setframerate(this.#encoderconfig.framerate",{"_index":1024,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoder.setquality(this.#encoderconfig.quality",{"_index":1025,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoder.setrepeat(this.#encoderconfig.repeat",{"_index":1026,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoder.settransparent(this.#encoderconfig.transparent",{"_index":1027,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoder.start",{"_index":1028,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoderconfig",{"_index":968,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoderoptions",{"_index":963,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoding",{"_index":1082,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["end",{"_index":1781,"title":{},"body":{"classes/TextTool.html":{}}}],["endangle",{"_index":25,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["english",{"_index":1986,"title":{},"body":{"contributing.html":{}}}],["ensuretransformer",{"_index":1674,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["eraser",{"_index":1892,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["eraseroptions",{"_index":880,"title":{"interfaces/EraserOptions.html":{}},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["erasertool",{"_index":882,"title":{"classes/EraserTool.html":{}},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["err",{"_index":1324,"title":{},"body":{"classes/ImageLoader.html":{}}}],["error",{"_index":1224,"title":{},"body":{"classes/IllustratorImage.html":{},"classes/ImageLoader.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"classes/TextTool.html":{},"miscellaneous/variables.html":{}}}],["error(\"cannot",{"_index":1502,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["error(\"frame",{"_index":973,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["error(\"frames",{"_index":982,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["error(\"invalid",{"_index":839,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["error(\"layer",{"_index":746,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["error(\"missing",{"_index":978,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["error(\"not",{"_index":1168,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["error(\"tool",{"_index":1499,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["error(\"transformer",{"_index":1675,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["error(`request",{"_index":1342,"title":{},"body":{"classes/ImageLoader.html":{}}}],["error(`unknown",{"_index":1553,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["error(`unsupported",{"_index":1126,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["eslint",{"_index":1045,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/ImageTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["eslint/no",{"_index":1050,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/ImageTool.html":{}}}],["etc",{"_index":1982,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["evenodd",{"_index":186,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["event",{"_index":2132,"title":{},"body":{"license.html":{}}}],["example",{"_index":1291,"title":{},"body":{"classes/ImageLoader.html":{},"index.html":{}}}],["examples",{"_index":2057,"title":{},"body":{"index.html":{}}}],["exists",{"_index":750,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["expect",{"_index":1223,"title":{},"body":{"classes/IllustratorImage.html":{},"classes/ImageLoader.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"classes/TextTool.html":{},"miscellaneous/variables.html":{}}}],["explain",{"_index":1996,"title":{},"body":{"contributing.html":{}}}],["export",{"_index":20,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"changelog.html":{}}}],["export(config",{"_index":1069,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["exports",{"_index":1629,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"changelog.html":{}}}],["expose",{"_index":1912,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":2123,"title":{},"body":{"license.html":{}}}],["extends",{"_index":38,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ColorUtil.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/IllustratorImage.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["f08080",{"_index":467,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f0e68c",{"_index":455,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f0f8ff",{"_index":337,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f0fff0",{"_index":445,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f0ffff",{"_index":345,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f1c40f",{"_index":293,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f4a460",{"_index":578,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f5deb3",{"_index":613,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f5f5dc",{"_index":347,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f5f5f5",{"_index":616,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f5fffa",{"_index":522,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f8f8ff",{"_index":432,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f]{3}){1,2}|([\\da",{"_index":635,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f]{4}){1,2})$/.test(hex",{"_index":636,"title":{},"body":{"classes/ColorUtil.html":{}}}],["fa",{"_index":634,"title":{},"body":{"classes/ColorUtil.html":{}}}],["fa8072",{"_index":576,"title":{},"body":{"classes/ColorUtil.html":{}}}],["faebd7",{"_index":339,"title":{},"body":{"classes/ColorUtil.html":{}}}],["faf0e6",{"_index":497,"title":{},"body":{"classes/ColorUtil.html":{}}}],["fafad2",{"_index":471,"title":{},"body":{"classes/ColorUtil.html":{}}}],["false",{"_index":87,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{},"miscellaneous/functions.html":{}}}],["fast",{"_index":2018,"title":{},"body":{"index.html":{}}}],["fdf5e6",{"_index":532,"title":{},"body":{"classes/ColorUtil.html":{}}}],["features",{"_index":1878,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["fetch",{"_index":1366,"title":{},"body":{"classes/ImageLoader.html":{}}}],["fetch(source",{"_index":1368,"title":{},"body":{"classes/ImageLoader.html":{}}}],["ff",{"_index":648,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ff0000",{"_index":568,"title":{},"body":{"classes/ColorUtil.html":{},"index.html":{}}}],["ff00ff",{"_index":428,"title":{},"body":{"classes/ColorUtil.html":{},"index.html":{}}}],["ff1493",{"_index":413,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ff4500",{"_index":540,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ff6347",{"_index":607,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ff69b4",{"_index":447,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ff7f50",{"_index":368,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ff8c00",{"_index":394,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffa07a",{"_index":480,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffa500",{"_index":538,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffb6c1",{"_index":478,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffc0cb",{"_index":558,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffd700",{"_index":436,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffdab9",{"_index":554,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffdead",{"_index":528,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffe4b5",{"_index":526,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffe4c4",{"_index":349,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffe4e1",{"_index":524,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffebcd",{"_index":352,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffefd5",{"_index":552,"title":{},"body":{"classes/ColorUtil.html":{}}}],["fff0f5",{"_index":457,"title":{},"body":{"classes/ColorUtil.html":{}}}],["fff5ee",{"_index":582,"title":{},"body":{"classes/ColorUtil.html":{}}}],["fff8dc",{"_index":372,"title":{},"body":{"classes/ColorUtil.html":{}}}],["fffacd",{"_index":463,"title":{},"body":{"classes/ColorUtil.html":{}}}],["fffaf0",{"_index":424,"title":{},"body":{"classes/ColorUtil.html":{}}}],["fffafa",{"_index":595,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffff00",{"_index":287,"title":{},"body":{"classes/ColorUtil.html":{},"index.html":{}}}],["ffffe0",{"_index":491,"title":{},"body":{"classes/ColorUtil.html":{}}}],["fffff0",{"_index":453,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffffff",{"_index":279,"title":{},"body":{"classes/ColorUtil.html":{},"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"contributing.html":{},"index.html":{}}}],["files",{"_index":1979,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["fill",{"_index":77,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{},"index.html":{}}}],["fill(options",{"_index":141,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["fill(x",{"_index":93,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["fillrule",{"_index":185,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["filter",{"_index":1886,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{}}}],["filter((frame",{"_index":1037,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["filterargs",{"_index":912,"title":{},"body":{"classes/FilterTool.html":{},"miscellaneous/typealiases.html":{}}}],["filters",{"_index":914,"title":{},"body":{"classes/FilterTool.html":{},"index.html":{}}}],["filters.length",{"_index":937,"title":{},"body":{"classes/FilterTool.html":{}}}],["filters.map((m",{"_index":939,"title":{},"body":{"classes/FilterTool.html":{}}}],["filtertool",{"_index":898,"title":{"classes/FilterTool.html":{}},"body":{"classes/FilterTool.html":{}}}],["filtertype",{"_index":1211,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{},"miscellaneous/variables.html":{}}}],["firebrick",{"_index":421,"title":{},"body":{"classes/ColorUtil.html":{}}}],["first",{"_index":1095,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["firstcontrolpointx",{"_index":32,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["firstcontrolpointy",{"_index":33,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["fitness",{"_index":2128,"title":{},"body":{"license.html":{}}}],["fix",{"_index":1885,"title":{},"body":{"changelog.html":{}}}],["fixes",{"_index":1884,"title":{},"body":{"changelog.html":{}}}],["flatten",{"_index":1889,"title":{},"body":{"changelog.html":{}}}],["floralwhite",{"_index":423,"title":{},"body":{"classes/ColorUtil.html":{}}}],["fn",{"_index":842,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["fn.name",{"_index":843,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["follow",{"_index":1372,"title":{},"body":{"classes/ImageLoader.html":{},"contributing.html":{}}}],["followed",{"_index":1968,"title":{},"body":{"contributing.html":{}}}],["following",{"_index":2112,"title":{},"body":{"license.html":{}}}],["font",{"_index":827,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{}}}],["fontdir",{"_index":1767,"title":{},"body":{"classes/TextTool.html":{}}}],["fontpath",{"_index":828,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{}}}],["force",{"_index":205,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["forestgreen",{"_index":425,"title":{},"body":{"classes/ColorUtil.html":{}}}],["format",{"_index":1972,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["formatting",{"_index":1969,"title":{},"body":{"contributing.html":{}}}],["frame",{"_index":960,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"index.html":{}}}],["frame.ctx.canvas.height).data",{"_index":1032,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["frame.ctx.canvas.width",{"_index":1031,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["frame.frame.hidden",{"_index":1038,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["framelayer",{"_index":957,"title":{"interfaces/FrameLayer.html":{}},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["framelayer).duration",{"_index":976,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["framelayer).frame",{"_index":977,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["framerate",{"_index":989,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["frames",{"_index":967,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"index.html":{}}}],["free",{"_index":2088,"title":{},"body":{"license.html":{}}}],["friendly",{"_index":2022,"title":{},"body":{"index.html":{}}}],["fromimagedata",{"_index":1189,"title":{},"body":{"classes/IllustratorImage.html":{}}}],["fromimagedata(data",{"_index":1197,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["fromimagedatasync",{"_index":1190,"title":{},"body":{"classes/IllustratorImage.html":{}}}],["fromimagedatasync(data",{"_index":1201,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["fs",{"_index":1297,"title":{},"body":{"classes/ImageLoader.html":{},"index.html":{}}}],["fs.existssync(source",{"_index":1364,"title":{},"body":{"classes/ImageLoader.html":{}}}],["fs.promises.readfile(source",{"_index":1365,"title":{},"body":{"classes/ImageLoader.html":{}}}],["fuchsia",{"_index":427,"title":{},"body":{"classes/ColorUtil.html":{}}}],["function",{"_index":837,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"interfaces/TextDataSource.html":{},"contributing.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":2001,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":2110,"title":{},"body":{"license.html":{}}}],["gainsboro",{"_index":429,"title":{},"body":{"classes/ColorUtil.html":{}}}],["gaussianblur",{"_index":904,"title":{},"body":{"classes/FilterTool.html":{},"classes/PixelsTool.html":{}}}],["gaussianblur(amount",{"_index":921,"title":{},"body":{"classes/FilterTool.html":{}}}],["gaussianblur(sigma",{"_index":1654,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["general",{"_index":1965,"title":{},"body":{"contributing.html":{}}}],["generate",{"_index":1994,"title":{},"body":{"contributing.html":{}}}],["generaterandomid",{"_index":734,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{},"miscellaneous/functions.html":{}}}],["get(config",{"_index":1544,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["get(name",{"_index":232,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["get(nameorconfig",{"_index":1568,"title":{},"body":{"classes/LayerTools.html":{}}}],["get(nameorfn",{"_index":808,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["getalllayers",{"_index":1509,"title":{},"body":{"classes/LayerManager.html":{}}}],["getalllayers(ordered",{"_index":786,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["getbackgroundlayer",{"_index":1074,"title":{},"body":{"classes/Illustrator.html":{}}}],["getcenterpoint",{"_index":1577,"title":{},"body":{"classes/LayerUtils.html":{},"changelog.html":{}}}],["getcenterpoint(divider",{"_index":1597,"title":{},"body":{"classes/LayerUtils.html":{}}}],["getcontext",{"_index":1462,"title":{},"body":{"classes/Layer.html":{}}}],["getfonts",{"_index":1743,"title":{},"body":{"classes/TextTool.html":{}}}],["gethidden",{"_index":1468,"title":{},"body":{"classes/Layer.html":{}}}],["getillustrator",{"_index":1460,"title":{},"body":{"classes/Layer.html":{}}}],["getimage",{"_index":1663,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["getimagedata",{"_index":1578,"title":{},"body":{"classes/LayerUtils.html":{}}}],["getimagedata(sx",{"_index":1600,"title":{},"body":{"classes/LayerUtils.html":{}}}],["getimagesync",{"_index":1665,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["getlayer",{"_index":1510,"title":{},"body":{"classes/LayerManager.html":{}}}],["getlayer(layer",{"_index":767,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["getlayerposition",{"_index":1511,"title":{},"body":{"classes/LayerManager.html":{}}}],["getlayerposition(layer",{"_index":770,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["getlayertransformation",{"_index":1579,"title":{},"body":{"classes/LayerUtils.html":{}}}],["getlocked",{"_index":1466,"title":{},"body":{"classes/Layer.html":{}}}],["getmatrices",{"_index":728,"title":{},"body":{"classes/ConvolutionTool.html":{}}}],["getname",{"_index":1160,"title":{},"body":{"classes/IllustratorColor.html":{},"classes/Layer.html":{}}}],["getposition",{"_index":1464,"title":{},"body":{"classes/Layer.html":{}}}],["getsource",{"_index":1205,"title":{},"body":{"classes/IllustratorImage.html":{}}}],["getting",{"_index":1869,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["gettransform",{"_index":1845,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["gettransformer",{"_index":1703,"title":{},"body":{"classes/PixelsTool.html":{}}}],["ghostwhite",{"_index":431,"title":{},"body":{"classes/ColorUtil.html":{}}}],["gif",{"_index":2029,"title":{},"body":{"index.html":{}}}],["gifencoder",{"_index":962,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["gifencoder(this.illustrator.width",{"_index":1017,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["gifstream",{"_index":1021,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["git+https://github.com/devandromeda/illustrator.js.git",{"_index":2159,"title":{},"body":{"properties.html":{}}}],["given",{"_index":1264,"title":{},"body":{"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{}}}],["globalfonts",{"_index":1797,"title":{},"body":{"classes/TextTool.html":{}}}],["globalfonts.families",{"_index":1801,"title":{},"body":{"classes/TextTool.html":{}}}],["globalfonts.has(name",{"_index":1802,"title":{},"body":{"classes/TextTool.html":{}}}],["globalfonts.loadfontsfromdir(fontdir",{"_index":1800,"title":{},"body":{"classes/TextTool.html":{}}}],["globalfonts.register(font",{"_index":1798,"title":{},"body":{"classes/TextTool.html":{}}}],["globalfonts.registerfrompath(fontpath",{"_index":1799,"title":{},"body":{"classes/TextTool.html":{}}}],["gold",{"_index":435,"title":{},"body":{"classes/ColorUtil.html":{}}}],["goldenrod",{"_index":433,"title":{},"body":{"classes/ColorUtil.html":{}}}],["granted",{"_index":2087,"title":{},"body":{"license.html":{}}}],["gray",{"_index":437,"title":{},"body":{"classes/ColorUtil.html":{}}}],["grayscale",{"_index":905,"title":{},"body":{"classes/FilterTool.html":{}}}],["grayscale(amount",{"_index":923,"title":{},"body":{"classes/FilterTool.html":{}}}],["green",{"_index":439,"title":{},"body":{"classes/ColorUtil.html":{}}}],["greenyellow",{"_index":441,"title":{},"body":{"classes/ColorUtil.html":{}}}],["grey",{"_index":443,"title":{},"body":{"classes/ColorUtil.html":{}}}],["guide",{"_index":1960,"title":{},"body":{"contributing.html":{}}}],["h",{"_index":95,"title":{},"body":{"classes/BackgroundColorTool.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["halfside",{"_index":702,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["hanging",{"_index":1789,"title":{},"body":{"classes/TextTool.html":{}}}],["hard",{"_index":2060,"title":{},"body":{"index.html":{}}}],["has(name",{"_index":234,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["hasfont",{"_index":1744,"title":{},"body":{"classes/TextTool.html":{}}}],["hasfont(name",{"_index":1756,"title":{},"body":{"classes/TextTool.html":{}}}],["haslayer",{"_index":1512,"title":{},"body":{"classes/LayerManager.html":{}}}],["haslayer(layer",{"_index":766,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["height",{"_index":737,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/DataSource.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/Illustrator.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"interfaces/ImageDataSource.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"interfaces/TextDataSource.html":{}}}],["help",{"_index":2078,"title":{},"body":{"index.html":{}}}],["here",{"_index":1966,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["hereby",{"_index":2086,"title":{},"body":{"license.html":{}}}],["hex",{"_index":623,"title":{},"body":{"classes/ColorUtil.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["hex.substring(1).split",{"_index":638,"title":{},"body":{"classes/ColorUtil.html":{}}}],["hextorgba",{"_index":271,"title":{},"body":{"classes/ColorUtil.html":{}}}],["hextorgba(hex",{"_index":621,"title":{},"body":{"classes/ColorUtil.html":{}}}],["hidden",{"_index":1112,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["hide",{"_index":1417,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["history",{"_index":73,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{}}}],["historycallback",{"_index":91,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{},"miscellaneous/typealiases.html":{}}}],["holders",{"_index":2134,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":2155,"title":{},"body":{"properties.html":{}}}],["honeydew",{"_index":444,"title":{},"body":{"classes/ColorUtil.html":{}}}],["horizontalscaling",{"_index":1824,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["horizontalskewing",{"_index":1825,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["horizontaltranslation",{"_index":1826,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["hotpink",{"_index":446,"title":{},"body":{"classes/ColorUtil.html":{}}}],["hsl",{"_index":1170,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["hsl(${number",{"_index":213,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["hsla",{"_index":1164,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["hsla(\"].some(pattern",{"_index":1171,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["hsla(${number",{"_index":214,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["http",{"_index":1298,"title":{},"body":{"classes/ImageLoader.html":{}}}],["httpreq",{"_index":2005,"title":{},"body":{"miscellaneous/functions.html":{}}}],["httpreq(link",{"_index":1346,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/functions.html":{}}}],["httpreq(source",{"_index":1378,"title":{},"body":{"classes/ImageLoader.html":{}}}],["https",{"_index":1299,"title":{},"body":{"classes/ImageLoader.html":{}}}],["https://discord.gg/cr8jxrxswr",{"_index":2077,"title":{},"body":{"index.html":{}}}],["https://github.com/devandromeda/illustrator.js/issues",{"_index":2157,"title":{},"body":{"properties.html":{}}}],["https://illustrator.js.org",{"_index":2031,"title":{},"body":{"index.html":{},"properties.html":{}}}],["https://www.npmjs.com/package/illustrator.js",{"_index":2032,"title":{},"body":{"index.html":{}}}],["hue",{"_index":951,"title":{},"body":{"classes/FilterTool.html":{},"classes/PixelsTool.html":{}}}],["huerotate",{"_index":906,"title":{},"body":{"classes/FilterTool.html":{},"classes/PixelsTool.html":{}}}],["huerotate(angle",{"_index":925,"title":{},"body":{"classes/FilterTool.html":{}}}],["huerotate(hue",{"_index":1652,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["id",{"_index":739,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{}}}],["ideographic",{"_index":1790,"title":{},"body":{"classes/TextTool.html":{}}}],["idx",{"_index":191,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["ignore",{"_index":1220,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["iimage",{"_index":1235,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["ijs",{"_index":2154,"title":{},"body":{"properties.html":{}}}],["illustrator",{"_index":676,"title":{"classes/Illustrator.html":{}},"body":{"classes/Colors.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"changelog.html":{},"contributing.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["illustrator(512",{"_index":2036,"title":{},"body":{"index.html":{}}}],["illustrator.animation",{"_index":2047,"title":{},"body":{"index.html":{}}}],["illustrator.height",{"_index":2045,"title":{},"body":{"index.html":{}}}],["illustrator.js",{"_index":1350,"title":{},"body":{"classes/ImageLoader.html":{},"index.html":{}}}],["illustrator.layers.createlayer",{"_index":2038,"title":{},"body":{"index.html":{}}}],["illustrator.layers.getalllayers().map(m",{"_index":2048,"title":{},"body":{"index.html":{}}}],["illustrator.width",{"_index":2044,"title":{},"body":{"index.html":{}}}],["illustrator/illustrator",{"_index":683,"title":{},"body":{"classes/Colors.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/ImageLoader.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["illustratoranimation",{"_index":966,"title":{"classes/IllustratorAnimation.html":{}},"body":{"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["illustratoranimation(this",{"_index":1061,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["illustratorcollection",{"_index":207,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerWrapper.html":{}}}],["illustratorcolor",{"_index":209,"title":{"classes/IllustratorColor.html":{}},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["illustratorcolor(this",{"_index":228,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["illustratorcolordata",{"_index":1162,"title":{"interfaces/IllustratorColorData.html":{}},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["illustratordatasource",{"_index":805,"title":{"interfaces/IllustratorDataSource.html":{}},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["illustratorexportconfig",{"_index":1070,"title":{"interfaces/IllustratorExportConfig.html":{}},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["illustratorimage",{"_index":1186,"title":{"classes/IllustratorImage.html":{}},"body":{"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["illustratorimage(await",{"_index":1236,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["illustratorimage(img",{"_index":1277,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["illustratorimage(transformer.rawpixelssync",{"_index":1238,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["illustratorimage.fromimagedata(data",{"_index":1641,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["illustratorimage.fromimagedata(source",{"_index":1362,"title":{},"body":{"classes/ImageLoader.html":{}}}],["illustratorimagedata",{"_index":1216,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{},"miscellaneous/typealiases.html":{}}}],["illustratorimageenums",{"_index":1221,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"miscellaneous/variables.html":{}}}],["illustratorimageenums.resizefiltertype[algorithm",{"_index":1662,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["illustratorimagemanager",{"_index":1066,"title":{"classes/IllustratorImageManager.html":{}},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImageManager.html":{}}}],["illustratorimagesource",{"_index":820,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/TextDataSource.html":{},"miscellaneous/typealiases.html":{}}}],["image",{"_index":823,"title":{},"body":{"classes/DataSource.html":{},"classes/Illustrator.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/LayerUtils.html":{},"interfaces/TextDataSource.html":{},"changelog.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["image.height",{"_index":1290,"title":{},"body":{"classes/ImageLoader.html":{},"classes/ImageTool.html":{}}}],["image.src",{"_index":1311,"title":{},"body":{"classes/ImageLoader.html":{}}}],["image.width",{"_index":1406,"title":{},"body":{"classes/ImageTool.html":{}}}],["image/illustratorimage",{"_index":1630,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["image/illustratorimagemanager",{"_index":1080,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["image/imageloader",{"_index":821,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/TextDataSource.html":{}}}],["imagedata",{"_index":1198,"title":{},"body":{"classes/IllustratorImage.html":{},"classes/ImageLoader.html":{},"classes/LayerUtils.html":{},"interfaces/RawImageData.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["imagedatasource",{"_index":825,"title":{"interfaces/ImageDataSource.html":{}},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["imageloader",{"_index":1215,"title":{"classes/ImageLoader.html":{}},"body":{"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"interfaces/RawImageData.html":{},"changelog.html":{}}}],["imageloader.createimage(png",{"_index":1230,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["imageloader.loadimage(source",{"_index":1398,"title":{},"body":{"classes/ImageTool.html":{}}}],["imageloader.loadimage(src",{"_index":1273,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["imagetool",{"_index":1381,"title":{"classes/ImageTool.html":{}},"body":{"classes/ImageTool.html":{},"changelog.html":{}}}],["img",{"_index":1275,"title":{},"body":{"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{}}}],["img.png",{"_index":1363,"title":{},"body":{"classes/ImageLoader.html":{}}}],["impl",{"_index":1906,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":1926,"title":{},"body":{"changelog.html":{}}}],["implemented",{"_index":1169,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["implied",{"_index":2124,"title":{},"body":{"license.html":{}}}],["import",{"_index":17,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"index.html":{}}}],["included",{"_index":2117,"title":{},"body":{"license.html":{}}}],["including",{"_index":2097,"title":{},"body":{"license.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indianred",{"_index":448,"title":{},"body":{"classes/ColorUtil.html":{}}}],["indigo",{"_index":450,"title":{},"body":{"classes/ColorUtil.html":{}}}],["infinite",{"_index":2051,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["inherit",{"_index":1770,"title":{},"body":{"classes/TextTool.html":{}}}],["inherited",{"_index":88,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/TransformTool.html":{}}}],["initialize",{"_index":1940,"title":{},"body":{"changelog.html":{}}}],["install",{"_index":2015,"title":{},"body":{"index.html":{}}}],["installation",{"_index":2014,"title":{},"body":{"index.html":{}}}],["instance",{"_index":986,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"changelog.html":{},"index.html":{}}}],["instanceof",{"_index":193,"title":{},"body":{"classes/BaseShapeTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{}}}],["instancetype",{"_index":1543,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["int",{"_index":1150,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["interest",{"_index":1962,"title":{},"body":{"contributing.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ArcToPoint.html":{},"interfaces/ColorConfig.html":{},"interfaces/ConvolutionOptions.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"interfaces/EraserOptions.html":{},"interfaces/FrameLayer.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"interfaces/ImageDataSource.html":{},"interfaces/LayerToolConfig.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"interfaces/RoundedRectangleOptions.html":{},"interfaces/TextDataSource.html":{},"interfaces/TransformOptions.html":{}},"body":{"interfaces/ArcToPoint.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"interfaces/ImageDataSource.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"interfaces/TextDataSource.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/ColorConfig.html":{},"interfaces/ConvolutionOptions.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"interfaces/EraserOptions.html":{},"interfaces/FrameLayer.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"interfaces/ImageDataSource.html":{},"interfaces/LayerToolConfig.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"interfaces/RoundedRectangleOptions.html":{},"interfaces/TextDataSource.html":{},"interfaces/TransformOptions.html":{},"overview.html":{}}}],["invert",{"_index":907,"title":{},"body":{"classes/FilterTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["invert(amount",{"_index":928,"title":{},"body":{"classes/FilterTool.html":{}}}],["isbufferlike",{"_index":1302,"title":{},"body":{"classes/ImageLoader.html":{}}}],["isbufferlike(source",{"_index":1354,"title":{},"body":{"classes/ImageLoader.html":{}}}],["iscached",{"_index":1559,"title":{},"body":{"classes/LayerTools.html":{}}}],["iscached(name",{"_index":1541,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["ishex",{"_index":272,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ishex(hex",{"_index":624,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ishidden",{"_index":1418,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["islocked",{"_index":1419,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["isvalidtool",{"_index":1560,"title":{},"body":{"classes/LayerTools.html":{}}}],["isvalidtool(name",{"_index":1557,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["iterableiterator",{"_index":819,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["iterate",{"_index":794,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["iterations",{"_index":688,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["ivory",{"_index":452,"title":{},"body":{"classes/ColorUtil.html":{}}}],["javascript",{"_index":2011,"title":{},"body":{"index.html":{},"properties.html":{}}}],["join",{"_index":2074,"title":{},"body":{"index.html":{}}}],["jpeg",{"_index":1085,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["jpegcompressoptions",{"_index":1249,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["jscolortype",{"_index":1210,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{},"miscellaneous/variables.html":{}}}],["k",{"_index":1539,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["keep",{"_index":2079,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":671,"title":{},"body":{"classes/ColorUtil.html":{}}}],["keywords",{"_index":2153,"title":{},"body":{"properties.html":{}}}],["khaki",{"_index":454,"title":{},"body":{"classes/ColorUtil.html":{}}}],["kind",{"_index":2122,"title":{},"body":{"license.html":{}}}],["l",{"_index":768,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["l.frame",{"_index":984,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["l.name",{"_index":785,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["l.position",{"_index":772,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["lavender",{"_index":458,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lavenderblush",{"_index":456,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lawngreen",{"_index":460,"title":{},"body":{"classes/ColorUtil.html":{}}}],["layer",{"_index":75,"title":{"classes/Layer.html":{}},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["layer(this",{"_index":752,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["layer.tools.get(\"backgroundcolortool",{"_index":2040,"title":{},"body":{"index.html":{}}}],["layer/layer",{"_index":961,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/ImageLoader.html":{},"classes/ToolBox.html":{}}}],["layer/layermanager",{"_index":1081,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["layerconfig",{"_index":1107,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["layerconfig.layer.coordinates.x",{"_index":1115,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["layerconfig.layer.coordinates.y",{"_index":1116,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["layerconfig.layer.height",{"_index":1118,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["layerconfig.layer.hidden",{"_index":1113,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["layerconfig.layer.render",{"_index":1114,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["layerconfig.layer.width",{"_index":1117,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["layerconfig.name",{"_index":1109,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["layermanager",{"_index":741,"title":{"classes/LayerManager.html":{}},"body":{"interfaces/CreateLayerOptions.html":{},"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"contributing.html":{}}}],["layermanager(this",{"_index":1067,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["layerobj",{"_index":751,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["layerobj.layer",{"_index":759,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["layerobj.layer.sethistory(history",{"_index":761,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["layerobj.layer.setposition(layer.position",{"_index":762,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["layerobj.layer.setposition(layerobj.position",{"_index":758,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["layerresolvable",{"_index":740,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{},"miscellaneous/typealiases.html":{}}}],["layers",{"_index":742,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{},"index.html":{}}}],["layers.every((l",{"_index":983,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["layers.length",{"_index":981,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["layerstobeupdated.foreach((l",{"_index":774,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["layertoolconfig",{"_index":1531,"title":{"interfaces/LayerToolConfig.html":{}},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["layertoolhistory",{"_index":736,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"miscellaneous/typealiases.html":{}}}],["layertools",{"_index":1471,"title":{"classes/LayerTools.html":{}},"body":{"classes/Layer.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"changelog.html":{}}}],["layertools(this",{"_index":1431,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["layertransformationdata",{"_index":1440,"title":{"interfaces/LayerTransformationData.html":{}},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["layerutils",{"_index":1433,"title":{"classes/LayerUtils.html":{}},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"changelog.html":{}}}],["layerutils(this.#ctx",{"_index":1482,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["layerwrapper",{"_index":738,"title":{"interfaces/LayerWrapper.html":{}},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["left",{"_index":1782,"title":{},"body":{"classes/TextTool.html":{}}}],["lemonchiffon",{"_index":462,"title":{},"body":{"classes/ColorUtil.html":{}}}],["liability",{"_index":2138,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2135,"title":{},"body":{"license.html":{}}}],["library",{"_index":2013,"title":{},"body":{"index.html":{},"properties.html":{}}}],["license",{"_index":2081,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["lightblue",{"_index":464,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightcoral",{"_index":466,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightcyan",{"_index":468,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightgoldenrodyellow",{"_index":470,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightgray",{"_index":472,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightgreen",{"_index":474,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightgrey",{"_index":476,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightpink",{"_index":477,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightsalmon",{"_index":479,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightseagreen",{"_index":481,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightskyblue",{"_index":483,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightslategray",{"_index":485,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightslategrey",{"_index":487,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightsteelblue",{"_index":488,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightyellow",{"_index":490,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lime",{"_index":492,"title":{},"body":{"classes/ColorUtil.html":{}}}],["limegreen",{"_index":494,"title":{},"body":{"classes/ColorUtil.html":{}}}],["limit",{"_index":168,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["limitation",{"_index":2098,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2125,"title":{},"body":{"license.html":{}}}],["line",{"_index":1048,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/ImageTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["linecapstyle",{"_index":153,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["linen",{"_index":496,"title":{},"body":{"classes/ColorUtil.html":{}}}],["linetool",{"_index":37,"title":{"classes/LineTool.html":{}},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["link",{"_index":1274,"title":{},"body":{"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"miscellaneous/functions.html":{}}}],["literal",{"_index":137,"title":{},"body":{"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorUtil.html":{},"interfaces/CreateLayerOptions.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/ImageDataSource.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{},"interfaces/TextDataSource.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":1244,"title":{},"body":{"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{}}}],["load(source",{"_index":1396,"title":{},"body":{"classes/ImageTool.html":{}}}],["load(src",{"_index":1258,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["loaddata",{"_index":800,"title":{},"body":{"classes/DataSource.html":{}}}],["loaddata(data",{"_index":811,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["loadimage",{"_index":1245,"title":{},"body":{"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"changelog.html":{}}}],["loadimage(\"https://example.com/image.png",{"_index":1288,"title":{},"body":{"classes/ImageLoader.html":{}}}],["loadimage(&quot;https://example.com/image.png&quot",{"_index":1293,"title":{},"body":{"classes/ImageLoader.html":{}}}],["loadimage(source",{"_index":1285,"title":{},"body":{"classes/ImageLoader.html":{}}}],["loadimage(src",{"_index":1262,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["loads",{"_index":1260,"title":{},"body":{"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{}}}],["lock",{"_index":1090,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["locked",{"_index":1425,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["losslesscompresspng",{"_index":1270,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["losslesscompresspng(src",{"_index":1278,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["losslesscompresspngsync",{"_index":1271,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["losslesscompresspngsync(src",{"_index":1279,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["lowercase/camelcase",{"_index":1983,"title":{},"body":{"contributing.html":{}}}],["ltr",{"_index":1771,"title":{},"body":{"classes/TextTool.html":{}}}],["m",{"_index":1040,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["m(this.#ctx",{"_index":1506,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["m.canvas!.getcontext(\"2d",{"_index":1053,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["m.duration",{"_index":1043,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["m.frame.render",{"_index":1042,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["m.layer",{"_index":2050,"title":{},"body":{"index.html":{}}}],["m.name",{"_index":245,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["m.name}(${m.value})`).join",{"_index":940,"title":{},"body":{"classes/FilterTool.html":{}}}],["m.trim",{"_index":1178,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["magenta",{"_index":498,"title":{},"body":{"classes/ColorUtil.html":{}}}],["magic",{"_index":1977,"title":{},"body":{"contributing.html":{}}}],["main",{"_index":1098,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["make",{"_index":1970,"title":{},"body":{"contributing.html":{}}}],["makeargs",{"_index":176,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/TextTool.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["makeargs(filter",{"_index":2009,"title":{},"body":{"miscellaneous/functions.html":{}}}],["makerequest",{"_index":1326,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/functions.html":{}}}],["makerequest(link",{"_index":1347,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/functions.html":{}}}],["makerequest(res.headers.location",{"_index":1339,"title":{},"body":{"classes/ImageLoader.html":{}}}],["making",{"_index":1991,"title":{},"body":{"contributing.html":{}}}],["manager",{"_index":1412,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"changelog.html":{}}}],["manipulation",{"_index":1901,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["map(async",{"_index":1039,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["maroon",{"_index":499,"title":{},"body":{"classes/ColorUtil.html":{}}}],["matching",{"_index":67,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"changelog.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random",{"_index":667,"title":{},"body":{"classes/ColorUtil.html":{}}}],["math.floor(side",{"_index":703,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["math.pi",{"_index":890,"title":{},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["math.round((parseint(c[3",{"_index":661,"title":{},"body":{"classes/ColorUtil.html":{}}}],["math.round(math.sqrt(options.matrix.length",{"_index":701,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["matrices",{"_index":726,"title":{},"body":{"classes/ConvolutionTool.html":{},"changelog.html":{}}}],["matrix",{"_index":689,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["maxwidth",{"_index":826,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{}}}],["measure",{"_index":1745,"title":{},"body":{"classes/TextTool.html":{}}}],["measure(text",{"_index":1758,"title":{},"body":{"classes/TextTool.html":{}}}],["measuretext",{"_index":1580,"title":{},"body":{"classes/LayerUtils.html":{}}}],["measuretext(text",{"_index":1605,"title":{},"body":{"classes/LayerUtils.html":{}}}],["mediumaquamarine",{"_index":501,"title":{},"body":{"classes/ColorUtil.html":{}}}],["mediumblue",{"_index":503,"title":{},"body":{"classes/ColorUtil.html":{}}}],["mediumorchid",{"_index":505,"title":{},"body":{"classes/ColorUtil.html":{}}}],["mediumpurple",{"_index":507,"title":{},"body":{"classes/ColorUtil.html":{}}}],["mediumseagreen",{"_index":509,"title":{},"body":{"classes/ColorUtil.html":{}}}],["mediumslateblue",{"_index":511,"title":{},"body":{"classes/ColorUtil.html":{}}}],["mediumspringgreen",{"_index":513,"title":{},"body":{"classes/ColorUtil.html":{}}}],["mediumturquoise",{"_index":515,"title":{},"body":{"classes/ColorUtil.html":{}}}],["mediumvioletred",{"_index":517,"title":{},"body":{"classes/ColorUtil.html":{}}}],["merchantability",{"_index":2127,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2101,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":1213,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["method",{"_index":1370,"title":{},"body":{"classes/ImageLoader.html":{},"changelog.html":{}}}],["methods",{"_index":76,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/ConvolutionTool.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"classes/LayerTools.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{},"changelog.html":{}}}],["middle",{"_index":1791,"title":{},"body":{"classes/TextTool.html":{}}}],["midnightblue",{"_index":519,"title":{},"body":{"classes/ColorUtil.html":{}}}],["mintcream",{"_index":521,"title":{},"body":{"classes/ColorUtil.html":{}}}],["miscellaneous",{"_index":2000,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mistyrose",{"_index":523,"title":{},"body":{"classes/ColorUtil.html":{}}}],["mit",{"_index":2082,"title":{},"body":{"license.html":{},"properties.html":{}}}],["miter",{"_index":160,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["moccasin",{"_index":525,"title":{},"body":{"classes/ColorUtil.html":{}}}],["modify",{"_index":2100,"title":{},"body":{"license.html":{}}}],["modules",{"_index":2147,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":1949,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["move",{"_index":127,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{},"changelog.html":{}}}],["move(x",{"_index":143,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["much",{"_index":2028,"title":{},"body":{"index.html":{}}}],["name",{"_index":98,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["namealias",{"_index":1761,"title":{},"body":{"classes/TextTool.html":{}}}],["nameorconfig",{"_index":1545,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["nameorconfig.cache",{"_index":1548,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["nameorconfig.name",{"_index":1546,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["nameorfn",{"_index":810,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["names",{"_index":243,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"contributing.html":{}}}],["name}${size",{"_index":1807,"title":{},"body":{"classes/TextTool.html":{}}}],["napi",{"_index":174,"title":{},"body":{"classes/BaseShapeTool.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/RawImageData.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"index.html":{}}}],["navajowhite",{"_index":527,"title":{},"body":{"classes/ColorUtil.html":{}}}],["navy",{"_index":529,"title":{},"body":{"classes/ColorUtil.html":{}}}],["new",{"_index":217,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/CreateLayerOptions.html":{},"classes/DataSource.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"interfaces/TextDataSource.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":1047,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/ImageTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["non",{"_index":1051,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/ImageTool.html":{}}}],["noninfringement",{"_index":2131,"title":{},"body":{"license.html":{}}}],["nonzero",{"_index":187,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["noop",{"_index":632,"title":{},"body":{"classes/ColorUtil.html":{}}}],["notice",{"_index":2115,"title":{},"body":{"license.html":{}}}],["npm",{"_index":2016,"title":{},"body":{"index.html":{}}}],["null",{"_index":629,"title":{},"body":{"classes/ColorUtil.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"classes/TextTool.html":{}}}],["number",{"_index":14,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["object",{"_index":275,"title":{},"body":{"classes/ColorUtil.html":{},"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/Layer.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"miscellaneous/variables.html":{}}}],["obtaining",{"_index":2091,"title":{},"body":{"license.html":{}}}],["official",{"_index":2075,"title":{},"body":{"index.html":{}}}],["offset",{"_index":148,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["oldlace",{"_index":531,"title":{},"body":{"classes/ColorUtil.html":{}}}],["olive",{"_index":533,"title":{},"body":{"classes/ColorUtil.html":{}}}],["olivedrab",{"_index":535,"title":{},"body":{"classes/ColorUtil.html":{}}}],["omit",{"_index":854,"title":{},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["op",{"_index":1349,"title":{},"body":{"classes/ImageLoader.html":{}}}],["opacity",{"_index":908,"title":{},"body":{"classes/FilterTool.html":{}}}],["opacity(amount",{"_index":930,"title":{},"body":{"classes/FilterTool.html":{}}}],["opaque",{"_index":690,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["operations",{"_index":1504,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["optional",{"_index":99,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":139,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/IllustratorImageManager.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{},"classes/SharpenTool.html":{},"classes/TransformTool.html":{}}}],["options.config",{"_index":753,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["options.controlpointy",{"_index":59,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["options.counterclockwise",{"_index":51,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["options.ctx.canvas.height",{"_index":710,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["options.ctx.canvas.width",{"_index":709,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["options.ctx.getimagedata",{"_index":706,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["options.endangle",{"_index":50,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["options.fillrule",{"_index":197,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["options.firstcontrolpointx",{"_index":62,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["options.firstcontrolpointy",{"_index":63,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["options.height",{"_index":886,"title":{},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["options.horizontalscaling",{"_index":1834,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["options.horizontalskewing",{"_index":1838,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["options.horizontaltranslation",{"_index":1839,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["options.iterations",{"_index":699,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["options.name",{"_index":745,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["options.opaque",{"_index":721,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["options.path",{"_index":196,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["options.position",{"_index":754,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["options.radius",{"_index":48,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["options.radiusx",{"_index":858,"title":{},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{}}}],["options.radiusy",{"_index":859,"title":{},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{}}}],["options.rotation",{"_index":860,"title":{},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{}}}],["options.secondcontrolpointx",{"_index":64,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["options.secondcontrolpointy",{"_index":65,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["options.startangle",{"_index":49,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["options.sx",{"_index":707,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["options.sy",{"_index":708,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["options.verticalscaling",{"_index":1835,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["options.verticalskewing",{"_index":1837,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["options.verticaltranslation",{"_index":1840,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["options.width",{"_index":885,"title":{},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["options.x",{"_index":46,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["options.x2",{"_index":55,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["options.y",{"_index":47,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["options.y1",{"_index":54,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["options.y2",{"_index":56,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["options?.height",{"_index":1473,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["options?.path",{"_index":198,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["options?.width",{"_index":1476,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["orange",{"_index":537,"title":{},"body":{"classes/ColorUtil.html":{}}}],["orangered",{"_index":539,"title":{},"body":{"classes/ColorUtil.html":{}}}],["orchid",{"_index":541,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ordered",{"_index":788,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["orientation",{"_index":1207,"title":{},"body":{"classes/IllustratorImage.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"miscellaneous/variables.html":{}}}],["otherwise",{"_index":2143,"title":{},"body":{"license.html":{}}}],["out",{"_index":2058,"title":{},"body":{"index.html":{},"license.html":{}}}],["output",{"_index":717,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"index.html":{}}}],["output.canvas.encode(\"avif",{"_index":1122,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["output.canvas.encode(\"png",{"_index":1121,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["output.canvas.encode(config.encoding",{"_index":1124,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["output.data",{"_index":719,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["output.pipe(fs.createwritestream(\"./animation.gif\"));output",{"_index":2055,"title":{},"body":{"index.html":{}}}],["overview",{"_index":2148,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":2151,"title":{"properties.html":{}},"body":{}}],["padstart(6",{"_index":670,"title":{},"body":{"classes/ColorUtil.html":{}}}],["palegoldenrod",{"_index":543,"title":{},"body":{"classes/ColorUtil.html":{}}}],["palegreen",{"_index":545,"title":{},"body":{"classes/ColorUtil.html":{}}}],["paleturquoise",{"_index":547,"title":{},"body":{"classes/ColorUtil.html":{}}}],["palevioletred",{"_index":549,"title":{},"body":{"classes/ColorUtil.html":{}}}],["papayawhip",{"_index":551,"title":{},"body":{"classes/ColorUtil.html":{}}}],["param",{"_index":1272,"title":{},"body":{"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{}}}],["parameter",{"_index":840,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["parameters",{"_index":97,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"classes/ConvolutionTool.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"classes/LayerTools.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":1401,"title":{},"body":{"classes/ImageTool.html":{}}}],["parse(color",{"_index":1166,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["parsefloat(val",{"_index":1181,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["parseint(char",{"_index":659,"title":{},"body":{"classes/ColorUtil.html":{}}}],["particular",{"_index":2129,"title":{},"body":{"license.html":{}}}],["pascalcase",{"_index":1978,"title":{},"body":{"contributing.html":{}}}],["path",{"_index":188,"title":{},"body":{"classes/BaseShapeTool.html":{},"changelog.html":{}}}],["path2d",{"_index":173,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["peachpuff",{"_index":553,"title":{},"body":{"classes/ColorUtil.html":{}}}],["people",{"_index":2067,"title":{},"body":{"index.html":{}}}],["perform",{"_index":1503,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["permission",{"_index":2085,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2108,"title":{},"body":{"license.html":{}}}],["person",{"_index":2090,"title":{},"body":{"license.html":{}}}],["persons",{"_index":2109,"title":{},"body":{"license.html":{}}}],["peru",{"_index":555,"title":{},"body":{"classes/ColorUtil.html":{}}}],["pink",{"_index":557,"title":{},"body":{"classes/ColorUtil.html":{}}}],["pixels",{"_index":705,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"changelog.html":{}}}],["pixels.data",{"_index":712,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["pixels.height",{"_index":716,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["pixels.width",{"_index":714,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["pixelstool",{"_index":1632,"title":{"classes/PixelsTool.html":{}},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"changelog.html":{}}}],["pixeltool",{"_index":1900,"title":{},"body":{"changelog.html":{}}}],["pixeltransformercontext",{"_index":1627,"title":{"interfaces/PixelTransformerContext.html":{}},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["pixeltransformerrendercontext",{"_index":1631,"title":{"interfaces/PixelTransformerRenderContext.html":{}},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["plum",{"_index":559,"title":{},"body":{"classes/ColorUtil.html":{}}}],["png",{"_index":1083,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["pnglosslessoptions",{"_index":1254,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["pngquantize",{"_index":1246,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["pngquantize(src",{"_index":1265,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["pngquantizesync",{"_index":1247,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["pngquantizesync(src",{"_index":1268,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["pngquantoptions",{"_index":1266,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["points",{"_index":1175,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["points[0",{"_index":1185,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["portions",{"_index":2119,"title":{},"body":{"license.html":{}}}],["position",{"_index":733,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{}}}],["powderblue",{"_index":561,"title":{},"body":{"classes/ColorUtil.html":{}}}],["powered",{"_index":2019,"title":{},"body":{"index.html":{}}}],["pre",{"_index":1915,"title":{},"body":{"changelog.html":{}}}],["predefinedcolorspace",{"_index":1218,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["prefer",{"_index":1399,"title":{},"body":{"classes/ImageTool.html":{}}}],["prettier",{"_index":1219,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["preview",{"_index":2056,"title":{},"body":{"index.html":{}}}],["private",{"_index":630,"title":{},"body":{"classes/ColorUtil.html":{},"classes/ImageLoader.html":{}}}],["processing",{"_index":2012,"title":{},"body":{"index.html":{},"properties.html":{}}}],["project",{"_index":1941,"title":{},"body":{"changelog.html":{},"contributing.html":{},"index.html":{}}}],["projects",{"_index":2071,"title":{},"body":{"index.html":{}}}],["promise",{"_index":1294,"title":{},"body":{"classes/ImageLoader.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/ToolBox.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["promise((resolve",{"_index":1315,"title":{},"body":{"classes/ImageLoader.html":{}}}],["promise.all",{"_index":1036,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["promise.all(this.#toolhistory.flat(2).map((m",{"_index":1505,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["properly",{"_index":1987,"title":{},"body":{"contributing.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"properties.html":{}}}],["provided",{"_index":2120,"title":{},"body":{"license.html":{}}}],["provides",{"_index":2020,"title":{},"body":{"index.html":{}}}],["public",{"_index":39,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["publish",{"_index":2102,"title":{},"body":{"license.html":{}}}],["pull",{"_index":1992,"title":{},"body":{"contributing.html":{}}}],["purple",{"_index":563,"title":{},"body":{"classes/ColorUtil.html":{}}}],["purpose",{"_index":2130,"title":{},"body":{"license.html":{}}}],["putimagedata",{"_index":1581,"title":{},"body":{"classes/LayerUtils.html":{}}}],["putimagedata(data",{"_index":1607,"title":{},"body":{"classes/LayerUtils.html":{}}}],["quadraticbeziercurve",{"_index":1621,"title":{},"body":{"classes/LineTool.html":{}}}],["quadraticbeziercurve(options",{"_index":57,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["quadraticbeziercurveoptions",{"_index":28,"title":{"interfaces/QuadraticBezierCurveOptions.html":{}},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["quality",{"_index":1005,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["quick",{"_index":2033,"title":{},"body":{"index.html":{}}}],["quot;illustrator.js&quot",{"_index":1292,"title":{},"body":{"classes/ImageLoader.html":{}}}],["r0",{"_index":1594,"title":{},"body":{"classes/LayerUtils.html":{}}}],["r1",{"_index":1595,"title":{},"body":{"classes/LayerUtils.html":{}}}],["radius",{"_index":9,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageTool.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"interfaces/TextDataSource.html":{}}}],["radiusx",{"_index":850,"title":{},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{}}}],["radiusy",{"_index":851,"title":{},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{}}}],["random",{"_index":240,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{}}}],["random(amount",{"_index":241,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["randomhex",{"_index":273,"title":{},"body":{"classes/ColorUtil.html":{}}}],["rate",{"_index":990,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["rawimagedata",{"_index":1199,"title":{"interfaces/RawImageData.html":{}},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["readable",{"_index":1300,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/functions.html":{}}}],["readonly",{"_index":74,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/Colors.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{}}}],["rearrange",{"_index":757,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["rebeccapurple",{"_index":565,"title":{},"body":{"classes/ColorUtil.html":{}}}],["received",{"_index":1550,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["record",{"_index":249,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["rectangle",{"_index":1944,"title":{},"body":{"changelog.html":{}}}],["rectangleoptions",{"_index":1705,"title":{"interfaces/RectangleOptions.html":{}},"body":{"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["rectangletool",{"_index":1708,"title":{"classes/RectangleTool.html":{}},"body":{"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["rectangular",{"_index":895,"title":{},"body":{"classes/EraserTool.html":{}}}],["rectangular(options",{"_index":883,"title":{},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["red",{"_index":567,"title":{},"body":{"classes/ColorUtil.html":{}}}],["redirect",{"_index":1371,"title":{},"body":{"classes/ImageLoader.html":{}}}],["redirect_statuses",{"_index":1303,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/variables.html":{}}}],["redirect_statuses.has(res.statuscode",{"_index":1337,"title":{},"body":{"classes/ImageLoader.html":{}}}],["redirectcount",{"_index":1327,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/functions.html":{}}}],["registerfont",{"_index":1746,"title":{},"body":{"classes/TextTool.html":{}}}],["registerfont(font",{"_index":1760,"title":{},"body":{"classes/TextTool.html":{}}}],["registerfontpath",{"_index":1747,"title":{},"body":{"classes/TextTool.html":{}}}],["registerfontpath(fontpath",{"_index":1763,"title":{},"body":{"classes/TextTool.html":{}}}],["registerfontsdir",{"_index":1748,"title":{},"body":{"classes/TextTool.html":{}}}],["registerfontsdir(fontdir",{"_index":1765,"title":{},"body":{"classes/TextTool.html":{}}}],["reject",{"_index":1316,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/functions.html":{}}}],["reject(err",{"_index":1325,"title":{},"body":{"classes/ImageLoader.html":{}}}],["rejected",{"_index":1343,"title":{},"body":{"classes/ImageLoader.html":{}}}],["remove",{"_index":253,"title":{},"body":{"classes/ColorSwatches.html":{},"changelog.html":{}}}],["remove(name",{"_index":230,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["removedata",{"_index":801,"title":{},"body":{"classes/DataSource.html":{}}}],["removedata(nameorfn",{"_index":813,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["removepoint",{"_index":128,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["render",{"_index":78,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{},"index.html":{}}}],["rendereachlayer",{"_index":1034,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["rendered",{"_index":1097,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["rendering",{"_index":1918,"title":{},"body":{"changelog.html":{}}}],["rendertransformer",{"_index":1680,"title":{},"body":{"classes/PixelsTool.html":{}}}],["rendertransformer(context",{"_index":1667,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["rendertransformersync",{"_index":1681,"title":{},"body":{"classes/PixelsTool.html":{}}}],["rendertransformersync(context",{"_index":1671,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["repeat",{"_index":1591,"title":{},"body":{"classes/LayerUtils.html":{},"index.html":{}}}],["repeats",{"_index":1009,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["repository",{"_index":2158,"title":{},"body":{"properties.html":{}}}],["reqby",{"_index":1332,"title":{},"body":{"classes/ImageLoader.html":{}}}],["reqby.get(url",{"_index":1334,"title":{},"body":{"classes/ImageLoader.html":{}}}],["requestinfo",{"_index":1369,"title":{},"body":{"classes/ImageLoader.html":{}}}],["requests",{"_index":1993,"title":{},"body":{"contributing.html":{}}}],["required",{"_index":222,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{},"index.html":{}}}],["res",{"_index":1335,"title":{},"body":{"classes/ImageLoader.html":{}}}],["res.arraybuffer",{"_index":1376,"title":{},"body":{"classes/ImageLoader.html":{}}}],["res.headers.location",{"_index":1338,"title":{},"body":{"classes/ImageLoader.html":{}}}],["res.ok",{"_index":1374,"title":{},"body":{"classes/ImageLoader.html":{}}}],["res.status",{"_index":1375,"title":{},"body":{"classes/ImageLoader.html":{}}}],["res.statuscode",{"_index":1340,"title":{},"body":{"classes/ImageLoader.html":{}}}],["resettransform",{"_index":1843,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["resize",{"_index":1659,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["resize(width",{"_index":1697,"title":{},"body":{"classes/PixelsTool.html":{}}}],["resizefiltertype",{"_index":1212,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{},"miscellaneous/variables.html":{}}}],["resolve",{"_index":1328,"title":{},"body":{"classes/ImageLoader.html":{},"classes/LayerManager.html":{},"miscellaneous/functions.html":{}}}],["resolve(buffer.concat(body",{"_index":1322,"title":{},"body":{"classes/ImageLoader.html":{}}}],["resolve(layer",{"_index":781,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["resolvehex",{"_index":274,"title":{},"body":{"classes/ColorUtil.html":{}}}],["resolvehex(color",{"_index":627,"title":{},"body":{"classes/ColorUtil.html":{}}}],["resolveid",{"_index":1513,"title":{},"body":{"classes/LayerManager.html":{}}}],["resolveid(layer",{"_index":779,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["resolvelayer",{"_index":1514,"title":{},"body":{"classes/LayerManager.html":{}}}],["resolvelayer(layer",{"_index":777,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["rest",{"_index":1400,"title":{},"body":{"classes/ImageTool.html":{}}}],["restore",{"_index":83,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{}}}],["restriction",{"_index":2096,"title":{},"body":{"license.html":{}}}],["results",{"_index":66,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"changelog.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":43,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["returns",{"_index":100,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/ConvolutionTool.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"classes/LayerTools.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{},"miscellaneous/functions.html":{}}}],["rgb",{"_index":1151,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["rgb(${number",{"_index":210,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["rgba",{"_index":1152,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["rgba(${number",{"_index":211,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["right",{"_index":1783,"title":{},"body":{"classes/TextTool.html":{}}}],["rights",{"_index":2099,"title":{},"body":{"license.html":{}}}],["rosybrown",{"_index":569,"title":{},"body":{"classes/ColorUtil.html":{}}}],["rotate",{"_index":950,"title":{},"body":{"classes/FilterTool.html":{},"classes/PixelsTool.html":{},"classes/TransformTool.html":{}}}],["rotate(angle",{"_index":1854,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["rotate(orientation",{"_index":1642,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["rotation",{"_index":852,"title":{},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{}}}],["round",{"_index":158,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["rounded",{"_index":1937,"title":{},"body":{"changelog.html":{}}}],["roundedrectangleoptions",{"_index":1707,"title":{"interfaces/RoundedRectangleOptions.html":{}},"body":{"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["royalblue",{"_index":571,"title":{},"body":{"classes/ColorUtil.html":{}}}],["rs",{"_index":2069,"title":{},"body":{"index.html":{}}}],["rs/canvas",{"_index":175,"title":{},"body":{"classes/BaseShapeTool.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/RawImageData.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"index.html":{}}}],["rs/image",{"_index":1214,"title":{},"body":{"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/RawImageData.html":{}}}],["rtl",{"_index":1772,"title":{},"body":{"classes/TextTool.html":{}}}],["rules",{"_index":1964,"title":{},"body":{"contributing.html":{}}}],["run",{"_index":1975,"title":{},"body":{"contributing.html":{}}}],["saddlebrown",{"_index":573,"title":{},"body":{"classes/ColorUtil.html":{}}}],["salmon",{"_index":575,"title":{},"body":{"classes/ColorUtil.html":{}}}],["sandybrown",{"_index":577,"title":{},"body":{"classes/ColorUtil.html":{}}}],["saturate",{"_index":909,"title":{},"body":{"classes/FilterTool.html":{}}}],["saturate(amount",{"_index":932,"title":{},"body":{"classes/FilterTool.html":{}}}],["save",{"_index":84,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{}}}],["scale",{"_index":1858,"title":{},"body":{"classes/TransformTool.html":{}}}],["scale(x",{"_index":1856,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["scx",{"_index":723,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["scy",{"_index":722,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["seagreen",{"_index":579,"title":{},"body":{"classes/ColorUtil.html":{}}}],["seashell",{"_index":581,"title":{},"body":{"classes/ColorUtil.html":{}}}],["secondcontrolpointx",{"_index":34,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["secondcontrolpointy",{"_index":35,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["segments",{"_index":156,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["sell",{"_index":2106,"title":{},"body":{"license.html":{}}}],["sepia",{"_index":910,"title":{},"body":{"classes/FilterTool.html":{}}}],["sepia(amount",{"_index":934,"title":{},"body":{"classes/FilterTool.html":{}}}],["server",{"_index":2076,"title":{},"body":{"index.html":{}}}],["set",{"_index":2041,"title":{},"body":{"index.html":{}}}],["set([301",{"_index":1304,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/variables.html":{}}}],["setblur",{"_index":1718,"title":{},"body":{"classes/ShadowTool.html":{}}}],["setblur(amount",{"_index":1722,"title":{},"body":{"classes/ShadowTool.html":{}}}],["setbrightness",{"_index":1682,"title":{},"body":{"classes/PixelsTool.html":{}}}],["setbrightness(brightness",{"_index":1648,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["setcolor",{"_index":1719,"title":{},"body":{"classes/ShadowTool.html":{},"classes/TextTool.html":{}}}],["setcolor(color",{"_index":1724,"title":{},"body":{"classes/ShadowTool.html":{},"classes/TextTool.html":{}}}],["setcontrast",{"_index":1683,"title":{},"body":{"classes/PixelsTool.html":{}}}],["setcontrast(contrast",{"_index":1650,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["setdashoffset",{"_index":129,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setdashoffset(offset",{"_index":146,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setdirection",{"_index":1749,"title":{},"body":{"classes/TextTool.html":{}}}],["setdirection(direction",{"_index":1769,"title":{},"body":{"classes/TextTool.html":{}}}],["setdisposalcode",{"_index":1129,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["setdisposalcode(code",{"_index":1000,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["setfillcolor",{"_index":79,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setfillcolor(color",{"_index":103,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setfont",{"_index":1750,"title":{},"body":{"classes/TextTool.html":{}}}],["setfont(name",{"_index":1775,"title":{},"body":{"classes/TextTool.html":{}}}],["setframedelay",{"_index":1130,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["setframedelay(delay",{"_index":996,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["setframerate",{"_index":1131,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["setframerate(framerate",{"_index":988,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["sethistory",{"_index":1420,"title":{},"body":{"classes/Layer.html":{}}}],["sethistory(history",{"_index":1453,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["setlayerposition",{"_index":1515,"title":{},"body":{"classes/LayerManager.html":{}}}],["setlayerposition(layer",{"_index":773,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["setlinecap",{"_index":130,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setlinecap(linecapstyle",{"_index":150,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setlinedash",{"_index":131,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setlinedash(segments",{"_index":154,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setlinejoinstyle",{"_index":132,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setlinejoinstyle(style",{"_index":157,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setlinewidth",{"_index":133,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setlinewidth(width",{"_index":163,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setmiterlimit",{"_index":134,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setmiterlimit(limit",{"_index":166,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setoffsetx",{"_index":1720,"title":{},"body":{"classes/ShadowTool.html":{}}}],["setoffsetx(amount",{"_index":1726,"title":{},"body":{"classes/ShadowTool.html":{}}}],["setoffsety",{"_index":1721,"title":{},"body":{"classes/ShadowTool.html":{}}}],["setoffsety(amount",{"_index":1728,"title":{},"body":{"classes/ShadowTool.html":{}}}],["setposition",{"_index":1421,"title":{},"body":{"classes/Layer.html":{}}}],["setposition(position",{"_index":1455,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["setquality",{"_index":1132,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["setquality(quality",{"_index":1004,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["setrepeat",{"_index":1133,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["setrepeat(repeats",{"_index":1008,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["setstrokecolor",{"_index":80,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{},"classes/TextTool.html":{}}}],["setstrokecolor(color",{"_index":109,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{},"classes/TextTool.html":{}}}],["setstrokewidth",{"_index":81,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["setstrokewidth(w",{"_index":111,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["settextalignment",{"_index":1751,"title":{},"body":{"classes/TextTool.html":{}}}],["settextalignment(alignment",{"_index":1779,"title":{},"body":{"classes/TextTool.html":{}}}],["settextbaseline",{"_index":1752,"title":{},"body":{"classes/TextTool.html":{}}}],["settextbaseline(alignment",{"_index":1787,"title":{},"body":{"classes/TextTool.html":{}}}],["settransform",{"_index":1859,"title":{},"body":{"classes/TransformTool.html":{}}}],["settransform(options",{"_index":1841,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["settransparency",{"_index":1134,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["settransparency(transparent",{"_index":992,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["sh",{"_index":715,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/LayerUtils.html":{}}}],["shadow",{"_index":947,"title":{},"body":{"classes/FilterTool.html":{}}}],["shadowtool",{"_index":1716,"title":{"classes/ShadowTool.html":{}},"body":{"classes/ShadowTool.html":{}}}],["shall",{"_index":2116,"title":{},"body":{"license.html":{}}}],["shape",{"_index":1954,"title":{},"body":{"changelog.html":{}}}],["shapes",{"_index":1947,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sharedarraybuffer",{"_index":1308,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/typealiases.html":{}}}],["sharpen",{"_index":1951,"title":{},"body":{"changelog.html":{}}}],["sharpentool",{"_index":1734,"title":{"classes/SharpenTool.html":{}},"body":{"classes/SharpenTool.html":{}}}],["sharpness",{"_index":2025,"title":{},"body":{"index.html":{}}}],["shouldcache",{"_index":1547,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["shouldredirect",{"_index":1336,"title":{},"body":{"classes/ImageLoader.html":{}}}],["show",{"_index":1422,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["side",{"_index":700,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["sienna",{"_index":583,"title":{},"body":{"classes/ColorUtil.html":{}}}],["sigma",{"_index":1690,"title":{},"body":{"classes/PixelsTool.html":{}}}],["silver",{"_index":585,"title":{},"body":{"classes/ColorUtil.html":{}}}],["simple",{"_index":2061,"title":{},"body":{"index.html":{}}}],["size",{"_index":1776,"title":{},"body":{"classes/TextTool.html":{}}}],["skip",{"_index":1108,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"changelog.html":{}}}],["skrscontext2d",{"_index":694,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"classes/ToolBox.html":{}}}],["skyblue",{"_index":587,"title":{},"body":{"classes/ColorUtil.html":{}}}],["skyra/gifenc",{"_index":965,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["slateblue",{"_index":589,"title":{},"body":{"classes/ColorUtil.html":{}}}],["slategray",{"_index":591,"title":{},"body":{"classes/ColorUtil.html":{}}}],["slategrey",{"_index":593,"title":{},"body":{"classes/ColorUtil.html":{}}}],["slice(0",{"_index":1182,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["snow",{"_index":594,"title":{},"body":{"classes/ColorUtil.html":{}}}],["software",{"_index":2092,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["source.encode(\"png",{"_index":1357,"title":{},"body":{"classes/ImageLoader.html":{}}}],["source.export",{"_index":1360,"title":{},"body":{"classes/ImageLoader.html":{}}}],["source.png",{"_index":1361,"title":{},"body":{"classes/ImageLoader.html":{}}}],["source.render",{"_index":1358,"title":{},"body":{"classes/ImageLoader.html":{}}}],["special",{"_index":2065,"title":{},"body":{"index.html":{}}}],["springgreen",{"_index":596,"title":{},"body":{"classes/ColorUtil.html":{}}}],["src",{"_index":711,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/IllustratorImageManager.html":{},"classes/PixelsTool.html":{}}}],["src/.../ellipse.ts",{"_index":2164,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../filter.ts",{"_index":2165,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../illustratorimage.ts",{"_index":2166,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../imageloader.ts",{"_index":2003,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../layer.ts",{"_index":2168,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../layermanager.ts",{"_index":2167,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../makeargs.ts",{"_index":2006,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../randomid.ts",{"_index":2004,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../toolbox.ts",{"_index":2163,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/animation/illustratoranimation.ts",{"_index":958,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:12",{"_index":1135,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:14",{"_index":1136,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:16",{"_index":1141,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:20",{"_index":1137,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:21",{"_index":1138,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:22",{"_index":1139,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:42",{"_index":1140,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:49",{"_index":1145,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:55",{"_index":1148,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:61",{"_index":1144,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:67",{"_index":1143,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:73",{"_index":1146,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:79",{"_index":1147,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:85",{"_index":1142,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/colors/colors.ts",{"_index":675,"title":{},"body":{"classes/Colors.html":{}}}],["src/colors/colors.ts:6",{"_index":682,"title":{},"body":{"classes/Colors.html":{}}}],["src/colors/colors.ts:7",{"_index":680,"title":{},"body":{"classes/Colors.html":{}}}],["src/colors/colors.ts:8",{"_index":681,"title":{},"body":{"classes/Colors.html":{}}}],["src/colors/colorswatches.ts",{"_index":204,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["src/colors/colorswatches.ts:21",{"_index":254,"title":{},"body":{"classes/ColorSwatches.html":{}}}],["src/colors/colorswatches.ts:34",{"_index":264,"title":{},"body":{"classes/ColorSwatches.html":{}}}],["src/colors/colorswatches.ts:38",{"_index":257,"title":{},"body":{"classes/ColorSwatches.html":{}}}],["src/colors/colorswatches.ts:42",{"_index":258,"title":{},"body":{"classes/ColorSwatches.html":{}}}],["src/colors/colorswatches.ts:46",{"_index":255,"title":{},"body":{"classes/ColorSwatches.html":{}}}],["src/colors/colorswatches.ts:50",{"_index":256,"title":{},"body":{"classes/ColorSwatches.html":{}}}],["src/colors/colorswatches.ts:54",{"_index":260,"title":{},"body":{"classes/ColorSwatches.html":{}}}],["src/colors/colorswatches.ts:55",{"_index":261,"title":{},"body":{"classes/ColorSwatches.html":{}}}],["src/colors/colorswatches.ts:56",{"_index":263,"title":{},"body":{"classes/ColorSwatches.html":{}}}],["src/colors/colorswatches.ts:60",{"_index":259,"title":{},"body":{"classes/ColorSwatches.html":{}}}],["src/colors/colorswatches.ts:64",{"_index":265,"title":{},"body":{"classes/ColorSwatches.html":{}}}],["src/colors/colorswatches.ts:68",{"_index":266,"title":{},"body":{"classes/ColorSwatches.html":{}}}],["src/colors/illustratorcolor.ts",{"_index":1149,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["src/colors/illustratorcolor.ts:12",{"_index":1154,"title":{},"body":{"classes/IllustratorColor.html":{}}}],["src/colors/illustratorcolor.ts:13",{"_index":1155,"title":{},"body":{"classes/IllustratorColor.html":{}}}],["src/colors/illustratorcolor.ts:49",{"_index":1156,"title":{},"body":{"classes/IllustratorColor.html":{}}}],["src/colors/illustratorcolor.ts:53",{"_index":1157,"title":{},"body":{"classes/IllustratorColor.html":{}}}],["src/colors/illustratorcolor.ts:57",{"_index":1159,"title":{},"body":{"classes/IllustratorColor.html":{}}}],["src/colors/illustratorcolor.ts:61",{"_index":1158,"title":{},"body":{"classes/IllustratorColor.html":{}}}],["src/colors/illustratorcolor.ts:65",{"_index":1161,"title":{},"body":{"classes/IllustratorColor.html":{}}}],["src/data/datasource.ts",{"_index":797,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["src/data/datasource.ts:33",{"_index":803,"title":{},"body":{"classes/DataSource.html":{}}}],["src/data/datasource.ts:35",{"_index":812,"title":{},"body":{"classes/DataSource.html":{}}}],["src/data/datasource.ts:40",{"_index":806,"title":{},"body":{"classes/DataSource.html":{}}}],["src/data/datasource.ts:44",{"_index":814,"title":{},"body":{"classes/DataSource.html":{}}}],["src/data/datasource.ts:50",{"_index":809,"title":{},"body":{"classes/DataSource.html":{}}}],["src/data/datasource.ts:54",{"_index":816,"title":{},"body":{"classes/DataSource.html":{}}}],["src/data/datasource.ts:58",{"_index":815,"title":{},"body":{"classes/DataSource.html":{}}}],["src/data/datasource.ts:62",{"_index":817,"title":{},"body":{"classes/DataSource.html":{}}}],["src/data/datasource.ts:66",{"_index":807,"title":{},"body":{"classes/DataSource.html":{}}}],["src/data/datasource.ts:72",{"_index":818,"title":{},"body":{"classes/DataSource.html":{}}}],["src/illustrator/illustrator.ts",{"_index":1057,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["src/illustrator/illustrator.ts:15",{"_index":1068,"title":{},"body":{"classes/Illustrator.html":{}}}],["src/illustrator/illustrator.ts:16",{"_index":1062,"title":{},"body":{"classes/Illustrator.html":{}}}],["src/illustrator/illustrator.ts:17",{"_index":1064,"title":{},"body":{"classes/Illustrator.html":{}}}],["src/illustrator/illustrator.ts:18",{"_index":1060,"title":{},"body":{"classes/Illustrator.html":{}}}],["src/illustrator/illustrator.ts:20",{"_index":1065,"title":{},"body":{"classes/Illustrator.html":{}}}],["src/illustrator/illustrator.ts:28",{"_index":1075,"title":{},"body":{"classes/Illustrator.html":{}}}],["src/illustrator/illustrator.ts:32",{"_index":1073,"title":{},"body":{"classes/Illustrator.html":{}}}],["src/illustrator/illustrator.ts:73",{"_index":1071,"title":{},"body":{"classes/Illustrator.html":{}}}],["src/image/illustratorimage.ts",{"_index":1187,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/image/illustratorimage.ts:31",{"_index":1195,"title":{},"body":{"classes/IllustratorImage.html":{}}}],["src/image/illustratorimage.ts:36",{"_index":1206,"title":{},"body":{"classes/IllustratorImage.html":{}}}],["src/image/illustratorimage.ts:40",{"_index":1203,"title":{},"body":{"classes/IllustratorImage.html":{}}}],["src/image/illustratorimage.ts:45",{"_index":1204,"title":{},"body":{"classes/IllustratorImage.html":{}}}],["src/image/illustratorimage.ts:50",{"_index":1200,"title":{},"body":{"classes/IllustratorImage.html":{}}}],["src/image/illustratorimage.ts:56",{"_index":1202,"title":{},"body":{"classes/IllustratorImage.html":{}}}],["src/image/illustratorimagemanager.ts",{"_index":1239,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["src/image/illustratorimagemanager.ts:20",{"_index":1259,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["src/image/illustratorimagemanager.ts:28",{"_index":1263,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["src/image/illustratorimagemanager.ts:33",{"_index":1250,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["src/image/illustratorimagemanager.ts:37",{"_index":1252,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["src/image/illustratorimagemanager.ts:41",{"_index":1255,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["src/image/illustratorimagemanager.ts:45",{"_index":1257,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["src/image/illustratorimagemanager.ts:49",{"_index":1267,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["src/image/illustratorimagemanager.ts:53",{"_index":1269,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["src/image/imageloader.ts",{"_index":1280,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/image/imageloader.ts:131",{"_index":1283,"title":{},"body":{"classes/ImageLoader.html":{}}}],["src/image/imageloader.ts:85",{"_index":1287,"title":{},"body":{"classes/ImageLoader.html":{}}}],["src/image/imageloader.ts:86",{"_index":1295,"title":{},"body":{"classes/ImageLoader.html":{}}}],["src/image/imageloader.ts:87",{"_index":1296,"title":{},"body":{"classes/ImageLoader.html":{}}}],["src/layer/layer.ts",{"_index":1410,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"miscellaneous/typealiases.html":{}}}],["src/layer/layer.ts:100",{"_index":1446,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:105",{"_index":1457,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:110",{"_index":1452,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:114",{"_index":1451,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:118",{"_index":1443,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:129",{"_index":1437,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:135",{"_index":1454,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:143",{"_index":1450,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:24",{"_index":1434,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:25",{"_index":1432,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:26",{"_index":1428,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:30",{"_index":1435,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:31",{"_index":1427,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:34",{"_index":1430,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:35",{"_index":1429,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:48",{"_index":1459,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:52",{"_index":1461,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:56",{"_index":1463,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:60",{"_index":1465,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:64",{"_index":1456,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:68",{"_index":1441,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:74",{"_index":1467,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:78",{"_index":1448,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:82",{"_index":1449,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:87",{"_index":1458,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:92",{"_index":1447,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:96",{"_index":1469,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layermanager.ts",{"_index":731,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{},"miscellaneous/typealiases.html":{}}}],["src/layer/layermanager.ts:113",{"_index":1529,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:117",{"_index":1528,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:121",{"_index":1527,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:127",{"_index":1522,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:131",{"_index":1526,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:25",{"_index":1516,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:27",{"_index":1517,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:29",{"_index":1518,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:33",{"_index":1519,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:52",{"_index":1521,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:72",{"_index":1520,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:78",{"_index":1525,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:83",{"_index":1523,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:89",{"_index":1524,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:95",{"_index":1530,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layertools.ts",{"_index":1532,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["src/layer/layertools.ts:11",{"_index":1562,"title":{},"body":{"classes/LayerTools.html":{}}}],["src/layer/layertools.ts:12",{"_index":1563,"title":{},"body":{"classes/LayerTools.html":{}}}],["src/layer/layertools.ts:14",{"_index":1564,"title":{},"body":{"classes/LayerTools.html":{}}}],["src/layer/layertools.ts:18",{"_index":1565,"title":{},"body":{"classes/LayerTools.html":{}}}],["src/layer/layertools.ts:22",{"_index":1570,"title":{},"body":{"classes/LayerTools.html":{}}}],["src/layer/layertools.ts:26",{"_index":1566,"title":{},"body":{"classes/LayerTools.html":{}}}],["src/layer/layertools.ts:27",{"_index":1567,"title":{},"body":{"classes/LayerTools.html":{}}}],["src/layer/layertools.ts:28",{"_index":1569,"title":{},"body":{"classes/LayerTools.html":{}}}],["src/layer/layertools.ts:45",{"_index":1571,"title":{},"body":{"classes/LayerTools.html":{}}}],["src/layer/layerutils.ts",{"_index":1572,"title":{},"body":{"classes/LayerUtils.html":{}}}],["src/layer/layerutils.ts:10",{"_index":1606,"title":{},"body":{"classes/LayerUtils.html":{}}}],["src/layer/layerutils.ts:14",{"_index":1604,"title":{},"body":{"classes/LayerUtils.html":{}}}],["src/layer/layerutils.ts:18",{"_index":1588,"title":{},"body":{"classes/LayerUtils.html":{}}}],["src/layer/layerutils.ts:22",{"_index":1596,"title":{},"body":{"classes/LayerUtils.html":{}}}],["src/layer/layerutils.ts:26",{"_index":1585,"title":{},"body":{"classes/LayerUtils.html":{}}}],["src/layer/layerutils.ts:30",{"_index":1592,"title":{},"body":{"classes/LayerUtils.html":{}}}],["src/layer/layerutils.ts:34",{"_index":1601,"title":{},"body":{"classes/LayerUtils.html":{}}}],["src/layer/layerutils.ts:38",{"_index":1608,"title":{},"body":{"classes/LayerUtils.html":{}}}],["src/layer/layerutils.ts:4",{"_index":1583,"title":{},"body":{"classes/LayerUtils.html":{}}}],["src/layer/layerutils.ts:42",{"_index":1598,"title":{},"body":{"classes/LayerUtils.html":{}}}],["src/toolbox/base/baseshapetool.ts",{"_index":124,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:100",{"_index":171,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:108",{"_index":155,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:116",{"_index":138,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:14",{"_index":169,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:22",{"_index":164,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:30",{"_index":152,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:38",{"_index":147,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:46",{"_index":161,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:54",{"_index":167,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:6",{"_index":149,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:62",{"_index":135,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:70",{"_index":145,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:78",{"_index":144,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:86",{"_index":142,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/toolbox.ts",{"_index":1812,"title":{},"body":{"classes/ToolBox.html":{},"miscellaneous/typealiases.html":{}}}],["src/toolbox/base/toolbox.ts:11",{"_index":1817,"title":{},"body":{"classes/ToolBox.html":{}}}],["src/toolbox/base/toolbox.ts:19",{"_index":1816,"title":{},"body":{"classes/ToolBox.html":{}}}],["src/toolbox/base/toolbox.ts:27",{"_index":1815,"title":{},"body":{"classes/ToolBox.html":{}}}],["src/toolbox/base/toolbox.ts:8",{"_index":1813,"title":{},"body":{"classes/ToolBox.html":{}}}],["src/toolbox/base/toolbox.ts:9",{"_index":1814,"title":{},"body":{"classes/ToolBox.html":{}}}],["src/toolbox/color/backgroundcolor.ts",{"_index":70,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["src/toolbox/color/backgroundcolor.ts:11",{"_index":96,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["src/toolbox/color/backgroundcolor.ts:18",{"_index":114,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["src/toolbox/color/backgroundcolor.ts:25",{"_index":110,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["src/toolbox/color/backgroundcolor.ts:32",{"_index":112,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["src/toolbox/color/backgroundcolor.ts:4",{"_index":107,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["src/toolbox/eraser/eraser.ts",{"_index":881,"title":{},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["src/toolbox/eraser/eraser.ts:11",{"_index":897,"title":{},"body":{"classes/EraserTool.html":{}}}],["src/toolbox/eraser/eraser.ts:18",{"_index":896,"title":{},"body":{"classes/EraserTool.html":{}}}],["src/toolbox/filters/convolutionfilter.ts",{"_index":687,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["src/toolbox/filters/convolutionfilter.ts:13",{"_index":727,"title":{},"body":{"classes/ConvolutionTool.html":{}}}],["src/toolbox/filters/convolutionfilter.ts:90",{"_index":729,"title":{},"body":{"classes/ConvolutionTool.html":{}}}],["src/toolbox/filters/filter.ts",{"_index":899,"title":{},"body":{"classes/FilterTool.html":{},"miscellaneous/typealiases.html":{}}}],["src/toolbox/filters/filter.ts:103",{"_index":935,"title":{},"body":{"classes/FilterTool.html":{}}}],["src/toolbox/filters/filter.ts:14",{"_index":922,"title":{},"body":{"classes/FilterTool.html":{}}}],["src/toolbox/filters/filter.ts:24",{"_index":916,"title":{},"body":{"classes/FilterTool.html":{}}}],["src/toolbox/filters/filter.ts:34",{"_index":918,"title":{},"body":{"classes/FilterTool.html":{}}}],["src/toolbox/filters/filter.ts:44",{"_index":920,"title":{},"body":{"classes/FilterTool.html":{}}}],["src/toolbox/filters/filter.ts:53",{"_index":924,"title":{},"body":{"classes/FilterTool.html":{}}}],["src/toolbox/filters/filter.ts:6",{"_index":913,"title":{},"body":{"classes/FilterTool.html":{}}}],["src/toolbox/filters/filter.ts:63",{"_index":926,"title":{},"body":{"classes/FilterTool.html":{}}}],["src/toolbox/filters/filter.ts:73",{"_index":929,"title":{},"body":{"classes/FilterTool.html":{}}}],["src/toolbox/filters/filter.ts:83",{"_index":931,"title":{},"body":{"classes/FilterTool.html":{}}}],["src/toolbox/filters/filter.ts:93",{"_index":933,"title":{},"body":{"classes/FilterTool.html":{}}}],["src/toolbox/filters/shadow.ts",{"_index":1717,"title":{},"body":{"classes/ShadowTool.html":{}}}],["src/toolbox/filters/shadow.ts:12",{"_index":1723,"title":{},"body":{"classes/ShadowTool.html":{}}}],["src/toolbox/filters/shadow.ts:20",{"_index":1727,"title":{},"body":{"classes/ShadowTool.html":{}}}],["src/toolbox/filters/shadow.ts:28",{"_index":1729,"title":{},"body":{"classes/ShadowTool.html":{}}}],["src/toolbox/filters/shadow.ts:4",{"_index":1725,"title":{},"body":{"classes/ShadowTool.html":{}}}],["src/toolbox/filters/sharpen.ts",{"_index":1735,"title":{},"body":{"classes/SharpenTool.html":{}}}],["src/toolbox/filters/sharpen.ts:4",{"_index":1738,"title":{},"body":{"classes/SharpenTool.html":{}}}],["src/toolbox/image/image.ts",{"_index":1382,"title":{},"body":{"classes/ImageTool.html":{}}}],["src/toolbox/image/image.ts:10",{"_index":1387,"title":{},"body":{"classes/ImageTool.html":{}}}],["src/toolbox/image/image.ts:11",{"_index":1390,"title":{},"body":{"classes/ImageTool.html":{}}}],["src/toolbox/image/image.ts:12",{"_index":1392,"title":{},"body":{"classes/ImageTool.html":{}}}],["src/toolbox/image/image.ts:13",{"_index":1393,"title":{},"body":{"classes/ImageTool.html":{}}}],["src/toolbox/image/image.ts:39",{"_index":1395,"title":{},"body":{"classes/ImageTool.html":{}}}],["src/toolbox/image/image.ts:6",{"_index":1397,"title":{},"body":{"classes/ImageTool.html":{}}}],["src/toolbox/pixels/pixels.ts",{"_index":1628,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:104",{"_index":1692,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:110",{"_index":1695,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:122",{"_index":1696,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:134",{"_index":1685,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:22",{"_index":1686,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:27",{"_index":1687,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:33",{"_index":1699,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:41",{"_index":1688,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:47",{"_index":1694,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:53",{"_index":1700,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:59",{"_index":1701,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:65",{"_index":1693,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:71",{"_index":1689,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:77",{"_index":1702,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:83",{"_index":1698,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:94",{"_index":1704,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:98",{"_index":1691,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/shapes/ellipse.ts",{"_index":849,"title":{},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"miscellaneous/typealiases.html":{}}}],["src/toolbox/shapes/ellipse.ts:17",{"_index":864,"title":{},"body":{"classes/EllipseTool.html":{}}}],["src/toolbox/shapes/ellipse.ts:35",{"_index":865,"title":{},"body":{"classes/EllipseTool.html":{}}}],["src/toolbox/shapes/line.ts",{"_index":6,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["src/toolbox/shapes/line.ts:37",{"_index":1625,"title":{},"body":{"classes/LineTool.html":{}}}],["src/toolbox/shapes/line.ts:45",{"_index":1622,"title":{},"body":{"classes/LineTool.html":{}}}],["src/toolbox/shapes/line.ts:60",{"_index":1623,"title":{},"body":{"classes/LineTool.html":{}}}],["src/toolbox/shapes/line.ts:68",{"_index":1626,"title":{},"body":{"classes/LineTool.html":{}}}],["src/toolbox/shapes/line.ts:76",{"_index":1624,"title":{},"body":{"classes/LineTool.html":{}}}],["src/toolbox/shapes/rectangle.ts",{"_index":1706,"title":{},"body":{"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["src/toolbox/shapes/rectangle.ts:19",{"_index":1714,"title":{},"body":{"classes/RectangleTool.html":{}}}],["src/toolbox/shapes/rectangle.ts:27",{"_index":1715,"title":{},"body":{"classes/RectangleTool.html":{}}}],["src/toolbox/text/text.ts",{"_index":1742,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:10",{"_index":1764,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:14",{"_index":1766,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:18",{"_index":1755,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:22",{"_index":1757,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:26",{"_index":1773,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:34",{"_index":1785,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:42",{"_index":1792,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:50",{"_index":1777,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:58",{"_index":1768,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:6",{"_index":1762,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:66",{"_index":1778,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:74",{"_index":1796,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:83",{"_index":1794,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:92",{"_index":1759,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/transform/transform.ts",{"_index":1823,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["src/toolbox/transform/transform.ts:13",{"_index":1868,"title":{},"body":{"classes/TransformTool.html":{}}}],["src/toolbox/transform/transform.ts:21",{"_index":1867,"title":{},"body":{"classes/TransformTool.html":{}}}],["src/toolbox/transform/transform.ts:39",{"_index":1866,"title":{},"body":{"classes/TransformTool.html":{}}}],["src/toolbox/transform/transform.ts:57",{"_index":1863,"title":{},"body":{"classes/TransformTool.html":{}}}],["src/toolbox/transform/transform.ts:65",{"_index":1862,"title":{},"body":{"classes/TransformTool.html":{}}}],["src/toolbox/transform/transform.ts:78",{"_index":1864,"title":{},"body":{"classes/TransformTool.html":{}}}],["src/toolbox/transform/transform.ts:86",{"_index":1865,"title":{},"body":{"classes/TransformTool.html":{}}}],["src/utils/colorutil.ts",{"_index":268,"title":{},"body":{"classes/ColorUtil.html":{}}}],["src/utils/colorutil.ts:187",{"_index":625,"title":{},"body":{"classes/ColorUtil.html":{}}}],["src/utils/colorutil.ts:191",{"_index":622,"title":{},"body":{"classes/ColorUtil.html":{}}}],["src/utils/colorutil.ts:219",{"_index":626,"title":{},"body":{"classes/ColorUtil.html":{}}}],["src/utils/colorutil.ts:225",{"_index":628,"title":{},"body":{"classes/ColorUtil.html":{}}}],["src/utils/colorutil.ts:6",{"_index":620,"title":{},"body":{"classes/ColorUtil.html":{}}}],["src/utils/makeargs.ts",{"_index":2008,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/utils/randomid.ts",{"_index":2007,"title":{},"body":{"miscellaneous/functions.html":{}}}],["start",{"_index":1784,"title":{},"body":{"classes/TextTool.html":{}}}],["startangle",{"_index":24,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["started",{"_index":1870,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["static",{"_index":269,"title":{},"body":{"classes/ColorUtil.html":{},"classes/IllustratorImage.html":{},"classes/ImageLoader.html":{},"interfaces/RawImageData.html":{}}}],["status",{"_index":1344,"title":{},"body":{"classes/ImageLoader.html":{}}}],["steelblue",{"_index":598,"title":{},"body":{"classes/ColorUtil.html":{}}}],["stream",{"_index":1301,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/functions.html":{}}}],["stream.on(\"data",{"_index":1318,"title":{},"body":{"classes/ImageLoader.html":{}}}],["stream.on(\"end",{"_index":1321,"title":{},"body":{"classes/ImageLoader.html":{}}}],["stream.on(\"error",{"_index":1323,"title":{},"body":{"classes/ImageLoader.html":{}}}],["stream/consumers",{"_index":1313,"title":{},"body":{"classes/ImageLoader.html":{}}}],["strict",{"_index":1963,"title":{},"body":{"contributing.html":{}}}],["string",{"_index":104,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"interfaces/CreateLayerOptions.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"classes/FilterTool.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"miscellaneous/typealiases.html":{}}}],["stroke",{"_index":82,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["stroke(options",{"_index":170,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["stroke(x",{"_index":113,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["stroketext",{"_index":1753,"title":{},"body":{"classes/TextTool.html":{}}}],["stroketext(text",{"_index":1793,"title":{},"body":{"classes/TextTool.html":{}}}],["style",{"_index":162,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{},"classes/TextTool.html":{},"contributing.html":{}}}],["subject",{"_index":2111,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":2104,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":2118,"title":{},"body":{"license.html":{}}}],["such",{"_index":2024,"title":{},"body":{"index.html":{}}}],["super(_data",{"_index":1227,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["super.fromrgbapixels(data.data",{"_index":1232,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["super.png",{"_index":1229,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["super.pngsync",{"_index":1231,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["support",{"_index":1934,"title":{},"body":{"changelog.html":{}}}],["supported",{"_index":2023,"title":{},"body":{"index.html":{}}}],["sure",{"_index":1971,"title":{},"body":{"contributing.html":{}}}],["sw",{"_index":713,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/LayerUtils.html":{}}}],["swatches",{"_index":677,"title":{},"body":{"classes/Colors.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["switch",{"_index":641,"title":{},"body":{"classes/ColorUtil.html":{}}}],["sx",{"_index":691,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/LayerUtils.html":{}}}],["sy",{"_index":692,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/LayerUtils.html":{}}}],["symbol.iterator",{"_index":846,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["t",{"_index":1819,"title":{},"body":{"classes/ToolBox.html":{},"miscellaneous/typealiases.html":{}}}],["tan",{"_index":600,"title":{},"body":{"classes/ColorUtil.html":{}}}],["teal",{"_index":602,"title":{},"body":{"classes/ColorUtil.html":{}}}],["template",{"_index":206,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorUtil.html":{},"classes/DataSource.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["test",{"_index":1990,"title":{},"body":{"contributing.html":{}}}],["text",{"_index":822,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/LayerUtils.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"changelog.html":{},"index.html":{}}}],["textdatasource",{"_index":824,"title":{"interfaces/TextDataSource.html":{}},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["texttool",{"_index":1741,"title":{"classes/TextTool.html":{}},"body":{"classes/TextTool.html":{},"changelog.html":{}}}],["thanks",{"_index":1961,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["then((res",{"_index":1373,"title":{},"body":{"classes/ImageLoader.html":{}}}],["things",{"_index":1967,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["this.#addframe(layers",{"_index":987,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.#canvas",{"_index":1478,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.#canvas.getcontext(\"2d",{"_index":1480,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.#ctx",{"_index":1479,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{}}}],["this.#ctx.canvas.height",{"_index":1603,"title":{},"body":{"classes/LayerUtils.html":{}}}],["this.#ctx.canvas.width",{"_index":1602,"title":{},"body":{"classes/LayerUtils.html":{}}}],["this.#ctx.createconicgradient(startangle",{"_index":1613,"title":{},"body":{"classes/LayerUtils.html":{}}}],["this.#ctx.createlineargradient(x0",{"_index":1611,"title":{},"body":{"classes/LayerUtils.html":{}}}],["this.#ctx.createpattern(image",{"_index":1614,"title":{},"body":{"classes/LayerUtils.html":{}}}],["this.#ctx.createradialgradient(x0",{"_index":1612,"title":{},"body":{"classes/LayerUtils.html":{}}}],["this.#ctx.getimagedata(sx",{"_index":1615,"title":{},"body":{"classes/LayerUtils.html":{}}}],["this.#ctx.gettransform",{"_index":1610,"title":{},"body":{"classes/LayerUtils.html":{}}}],["this.#ctx.measuretext(text",{"_index":1609,"title":{},"body":{"classes/LayerUtils.html":{}}}],["this.#ctx.putimagedata(data",{"_index":1616,"title":{},"body":{"classes/LayerUtils.html":{}}}],["this.#ctx.restore",{"_index":1494,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.#ctx.save",{"_index":1493,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.#data",{"_index":250,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["this.#data.array",{"_index":247,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["this.#data.clear",{"_index":237,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["this.#data.delete(name",{"_index":231,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["this.#data.get(name",{"_index":233,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["this.#data.has(data.name",{"_index":226,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["this.#data.has(name",{"_index":235,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["this.#data.hex",{"_index":1184,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["this.#data.map((m",{"_index":244,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["this.#data.random(amount",{"_index":242,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["this.#data.rgba",{"_index":1183,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["this.#data.set(data.name",{"_index":229,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["this.#data.size",{"_index":239,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["this.#encoderconfig.delay",{"_index":999,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.#encoderconfig.dispose",{"_index":1003,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.#encoderconfig.framerate",{"_index":991,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.#encoderconfig.quality",{"_index":1007,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.#encoderconfig.repeat",{"_index":1011,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.#encoderconfig.transparent",{"_index":995,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.#ensuretransformer",{"_index":1643,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.#frames",{"_index":970,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.#frames.push(...frames",{"_index":1056,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.#frames?.length",{"_index":1014,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.#hidden",{"_index":1492,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.#layers.array",{"_index":793,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.#layers.array().sort((a",{"_index":789,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.#layers.delete(id",{"_index":765,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.#layers.find((l",{"_index":784,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.#layers.findkey((x",{"_index":747,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.#layers.get(l.id)?.position",{"_index":776,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.#layers.get(layer",{"_index":783,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.#layers.get(layer.id",{"_index":782,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.#layers.set(l.id",{"_index":775,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.#layers.set(layerobj.id",{"_index":756,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.#layers.size",{"_index":743,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.#layers.values",{"_index":795,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.#locked",{"_index":1489,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.#parse(data.color",{"_index":1165,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["this.#rendereachlayer",{"_index":1020,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.#throwiflocked",{"_index":1498,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.#toolhistory",{"_index":1496,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.#toolhistory.push(tool.history",{"_index":1500,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.#toolscache.clear",{"_index":1537,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["this.#toolscache.delete(name",{"_index":1540,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["this.#toolscache.get(name",{"_index":1551,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["this.#toolscache.has(name",{"_index":1542,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["this.#toolscache.set(name",{"_index":1556,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["this.#transformer",{"_index":1635,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.#transformer!.toimage",{"_index":1664,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.#transformer!.toimagesync",{"_index":1666,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.#transformer?.adjustcontrast(contrast",{"_index":1651,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.#transformer?.blur(sigma",{"_index":1655,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.#transformer?.brighten(brightness",{"_index":1649,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.#transformer?.crop(context.from",{"_index":1646,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.#transformer?.huerotate(hue",{"_index":1653,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.#transformer?.invert",{"_index":1647,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.#transformer?.resize(width",{"_index":1661,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.#transformer?.rotate(illustratorimageenums.orientation[orientation",{"_index":1644,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.#transformer?.unsharpen(sigma",{"_index":1658,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this._data",{"_index":1228,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["this.addframes([frame",{"_index":979,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.applyfilter",{"_index":943,"title":{},"body":{"classes/FilterTool.html":{}}}],["this.autoclear",{"_index":1820,"title":{},"body":{"classes/ToolBox.html":{}}}],["this.backgroundlayer.coordinates.x",{"_index":1100,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["this.backgroundlayer.coordinates.y",{"_index":1101,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["this.backgroundlayer.height",{"_index":1103,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["this.backgroundlayer.render",{"_index":1096,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["this.backgroundlayer.width",{"_index":1102,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["this.coordinates",{"_index":1488,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.count",{"_index":755,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.data",{"_index":833,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["this.data.color",{"_index":1167,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["this.data.filter((ds",{"_index":835,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["this.data.filter(nameorfn",{"_index":838,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["this.data.find(typeof",{"_index":841,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["this.data.push(data",{"_index":834,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["this.drawrounded(image",{"_index":1405,"title":{},"body":{"classes/ImageTool.html":{}}}],["this.getimage",{"_index":1668,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.getimagesync",{"_index":1672,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.height",{"_index":1093,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.hidden",{"_index":1491,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.history",{"_index":1821,"title":{},"body":{"classes/ToolBox.html":{}}}],["this.history.push((ctx",{"_index":41,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["this.history.push(async",{"_index":697,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["this.illustrator.height",{"_index":1018,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.layer.applytool(this",{"_index":123,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/ToolBox.html":{}}}],["this.layer.context.getimagedata(context.from",{"_index":1637,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.layer.height",{"_index":893,"title":{},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["this.layer.illustrator.image.loadimage(src",{"_index":1634,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.layer.utils.getlayertransformation",{"_index":1847,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["this.layer.utils.measuretext(text",{"_index":1811,"title":{},"body":{"classes/TextTool.html":{}}}],["this.layer.width",{"_index":892,"title":{},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["this.layers",{"_index":1087,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["this.layers.getalllayers(true",{"_index":1106,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["this.layers.getlayer(\"background",{"_index":1091,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["this.load(src",{"_index":1276,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["this.locked",{"_index":1490,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.manager.duplicatelayer(this",{"_index":1495,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.manager.getlayerposition(this",{"_index":1485,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.manager.illustrator",{"_index":1484,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.manager.illustrator.height",{"_index":1474,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.manager.illustrator.width",{"_index":1477,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.manager.resolve(this)?.name",{"_index":1483,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.manager.setlayerposition(this",{"_index":1486,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.name",{"_index":1444,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.position",{"_index":1497,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.render",{"_index":1119,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["this.resolve(layer",{"_index":771,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.resolve(layer)?.id",{"_index":780,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.resolve(layer)?.layer",{"_index":778,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.resolveid(layer",{"_index":764,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.resolvelayer(layer",{"_index":769,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.utils",{"_index":1481,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.width",{"_index":1475,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["thistle",{"_index":604,"title":{},"body":{"classes/ColorUtil.html":{}}}],["threshold",{"_index":1657,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["throw",{"_index":220,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"interfaces/CreateLayerOptions.html":{},"classes/DataSource.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/TextDataSource.html":{}}}],["throwiflocked",{"_index":1501,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["toarray",{"_index":246,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["todo",{"_index":829,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"interfaces/TextDataSource.html":{}}}],["toimage",{"_index":1191,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["toimagesync",{"_index":1192,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["tojson",{"_index":248,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["tomato",{"_index":606,"title":{},"body":{"classes/ColorUtil.html":{}}}],["tool",{"_index":1438,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"changelog.html":{},"index.html":{}}}],["toolbox",{"_index":71,"title":{"classes/ToolBox.html":{}},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"changelog.html":{}}}],["toolbox/base/toolbox",{"_index":1470,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["toolbox/exports",{"_index":1534,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["toolbox:11",{"_index":116,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/TransformTool.html":{}}}],["toolbox:19",{"_index":115,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/TransformTool.html":{}}}],["toolbox:27",{"_index":172,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/TransformTool.html":{}}}],["toolbox:39",{"_index":101,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["toolbox:8",{"_index":92,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/TransformTool.html":{}}}],["toolbox:9",{"_index":90,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/TransformTool.html":{}}}],["toolconstructor",{"_index":1554,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["toolconstructor(this.layer",{"_index":1555,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["toolhistory",{"_index":1472,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["tools",{"_index":1413,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"changelog.html":{},"index.html":{}}}],["tools[name",{"_index":1552,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["toolscache",{"_index":1535,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["top",{"_index":1104,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/TextTool.html":{}}}],["tort",{"_index":2142,"title":{},"body":{"license.html":{}}}],["tostring",{"_index":802,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["tostring(16",{"_index":669,"title":{},"body":{"classes/ColorUtil.html":{}}}],["transform",{"_index":1860,"title":{},"body":{"classes/TransformTool.html":{},"changelog.html":{},"index.html":{}}}],["transform(options",{"_index":1833,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["transformation",{"_index":1846,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["transformation.a",{"_index":1848,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["transformation.b",{"_index":1849,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["transformation.c",{"_index":1850,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["transformation.d",{"_index":1851,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["transformation.e",{"_index":1852,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["transformation.f",{"_index":1853,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["transformer",{"_index":1188,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{}}}],["transformer.rawpixels",{"_index":1237,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["transformoptions",{"_index":1822,"title":{"interfaces/TransformOptions.html":{}},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["transformtool",{"_index":1830,"title":{"classes/TransformTool.html":{}},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["translate",{"_index":1861,"title":{},"body":{"classes/TransformTool.html":{}}}],["translate(x",{"_index":1831,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["transparent",{"_index":993,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["true",{"_index":787,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{}}}],["ts",{"_index":1222,"title":{},"body":{"classes/IllustratorImage.html":{},"classes/ImageLoader.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"classes/TextTool.html":{},"miscellaneous/variables.html":{}}}],["turquoise",{"_index":608,"title":{},"body":{"classes/ColorUtil.html":{}}}],["type",{"_index":15,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2161,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeerror(\"brightness",{"_index":944,"title":{},"body":{"classes/FilterTool.html":{}}}],["typeerror(\"color",{"_index":224,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["typeerror(\"contrast",{"_index":945,"title":{},"body":{"classes/FilterTool.html":{}}}],["typeerror(\"data",{"_index":832,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["typeerror(\"delay",{"_index":998,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["typeerror(\"disposal",{"_index":1002,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["typeerror(\"divider",{"_index":1617,"title":{},"body":{"classes/LayerUtils.html":{}}}],["typeerror(\"frame",{"_index":985,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["typeerror(\"gaussian",{"_index":941,"title":{},"body":{"classes/FilterTool.html":{}}}],["typeerror(\"grayscale",{"_index":948,"title":{},"body":{"classes/FilterTool.html":{}}}],["typeerror(\"hue",{"_index":949,"title":{},"body":{"classes/FilterTool.html":{}}}],["typeerror(\"invert",{"_index":953,"title":{},"body":{"classes/FilterTool.html":{}}}],["typeerror(\"name",{"_index":221,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["typeerror(\"opacity",{"_index":954,"title":{},"body":{"classes/FilterTool.html":{}}}],["typeerror(\"quality",{"_index":1006,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["typeerror(\"repeats",{"_index":1010,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["typeerror(\"saturation",{"_index":955,"title":{},"body":{"classes/FilterTool.html":{}}}],["typeerror(\"sepia",{"_index":956,"title":{},"body":{"classes/FilterTool.html":{}}}],["typeerror(\"transparency",{"_index":994,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["typeerror(\"unsupported",{"_index":1380,"title":{},"body":{"classes/ImageLoader.html":{}}}],["typeerror(`tool",{"_index":1549,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["typeof",{"_index":195,"title":{},"body":{"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"interfaces/CreateLayerOptions.html":{},"classes/DataSource.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"interfaces/TextDataSource.html":{}}}],["typescript",{"_index":1049,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/ImageTool.html":{},"index.html":{}}}],["uint8array",{"_index":1309,"title":{},"body":{"classes/ImageLoader.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["uint8clampedarray",{"_index":1225,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["undefined",{"_index":2010,"title":{},"body":{"miscellaneous/functions.html":{}}}],["under",{"_index":2072,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":1072,"title":{},"body":{"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"classes/PixelsTool.html":{}}}],["unlock",{"_index":1423,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["unsharpmasking",{"_index":1684,"title":{},"body":{"classes/PixelsTool.html":{}}}],["unsharpmasking(sigma",{"_index":1656,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["update",{"_index":1997,"title":{},"body":{"contributing.html":{}}}],["url",{"_index":1306,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/typealiases.html":{}}}],["url(link",{"_index":1331,"title":{},"body":{"classes/ImageLoader.html":{}}}],["url.protocol",{"_index":1333,"title":{},"body":{"classes/ImageLoader.html":{}}}],["use",{"_index":1312,"title":{},"body":{"classes/ImageLoader.html":{},"contributing.html":{},"license.html":{}}}],["utilities",{"_index":1879,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["utility",{"_index":1896,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["utils",{"_index":678,"title":{},"body":{"classes/Colors.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"changelog.html":{}}}],["utils/colorutil",{"_index":684,"title":{},"body":{"classes/Colors.html":{}}}],["utils/illustratorcollection",{"_index":208,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerWrapper.html":{}}}],["utils/makeargs",{"_index":177,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/TextTool.html":{}}}],["utils/randomid",{"_index":735,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["v",{"_index":1329,"title":{},"body":{"classes/ImageLoader.html":{}}}],["val",{"_index":1177,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["val.includes",{"_index":1179,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["value",{"_index":86,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"classes/ConvolutionTool.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":2169,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":2152,"title":{},"body":{"properties.html":{}}}],["verticalscaling",{"_index":1827,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["verticalskewing",{"_index":1828,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["verticaltranslation",{"_index":1829,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["via",{"_index":2063,"title":{},"body":{"index.html":{}}}],["violet",{"_index":610,"title":{},"body":{"classes/ColorUtil.html":{}}}],["void",{"_index":102,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ColorSwatches.html":{},"classes/ConvolutionTool.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{},"miscellaneous/typealiases.html":{}}}],["w",{"_index":94,"title":{},"body":{"classes/BackgroundColorTool.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["warranties",{"_index":2126,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2121,"title":{},"body":{"license.html":{}}}],["webp",{"_index":1086,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["wheat",{"_index":612,"title":{},"body":{"classes/ColorUtil.html":{}}}],["whether",{"_index":2139,"title":{},"body":{"license.html":{}}}],["white",{"_index":614,"title":{},"body":{"classes/ColorUtil.html":{}}}],["whitesmoke",{"_index":615,"title":{},"body":{"classes/ColorUtil.html":{}}}],["width",{"_index":165,"title":{},"body":{"classes/BaseShapeTool.html":{},"interfaces/CreateLayerOptions.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/Illustrator.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"interfaces/ImageDataSource.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"interfaces/TextDataSource.html":{}}}],["without",{"_index":2095,"title":{},"body":{"license.html":{}}}],["work",{"_index":2070,"title":{},"body":{"index.html":{}}}],["worker",{"_index":1905,"title":{},"body":{"changelog.html":{}}}],["write",{"_index":2054,"title":{},"body":{"index.html":{}}}],["writetext",{"_index":1754,"title":{},"body":{"classes/TextTool.html":{}}}],["writetext(text",{"_index":1795,"title":{},"body":{"classes/TextTool.html":{}}}],["x",{"_index":22,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/TransformTool.html":{}}}],["x.name",{"_index":748,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["x0",{"_index":1589,"title":{},"body":{"classes/LayerUtils.html":{}}}],["x1",{"_index":10,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["x2",{"_index":11,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["y",{"_index":23,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["y0",{"_index":1587,"title":{},"body":{"classes/LayerUtils.html":{}}}],["y1",{"_index":12,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["y2",{"_index":13,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["yarn",{"_index":1976,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["yellow",{"_index":617,"title":{},"body":{"classes/ColorUtil.html":{}}}],["yellowgreen",{"_index":618,"title":{},"body":{"classes/ColorUtil.html":{}}}],["yes",{"_index":140,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/ColorSwatches.html":{},"classes/EllipseTool.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerTools.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/TextTool.html":{},"miscellaneous/functions.html":{}}}],["yield",{"_index":847,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ArcToPoint.html":{"url":"interfaces/ArcToPoint.html","title":"interface - ArcToPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ArcToPoint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/shapes/Line.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            radius\n                                        \n                                \n                                \n                                        \n                                            x1\n                                        \n                                \n                                \n                                        \n                                            x2\n                                        \n                                \n                                \n                                        \n                                            y1\n                                        \n                                \n                                \n                                        \n                                            y2\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        radius\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        radius:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x1\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x1:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x2\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x2:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y1\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y1:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y2\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y2:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseShapeTool } from \"../base/BaseShapeTool\";\n\nexport interface DrawArcOptions {\n    x: number;\n    y: number;\n    radius: number;\n    startAngle: number;\n    endAngle: number;\n    counterclockwise?: boolean;\n}\n\nexport interface ArcToPoint {\n    x1: number;\n    y1: number;\n    x2: number;\n    y2: number;\n    radius: number;\n}\n\nexport interface QuadraticBezierCurveOptions {\n    controlPointX: number;\n    controlPointY: number;\n    x: number;\n    y: number;\n}\n\nexport interface CubicBezierCurveOptions {\n    firstControlPointX: number;\n    firstControlPointY: number;\n    secondControlPointX: number;\n    secondControlPointY: number;\n    x: number;\n    y: number;\n}\n\nexport class LineTool extends BaseShapeTool {\n    public draw(from: number, to: number) {\n        this.history.push((ctx) => {\n            ctx.lineTo(from, to);\n        });\n\n        return this;\n    }\n\n    public arc(options: DrawArcOptions) {\n        this.history.push((ctx) => {\n            ctx.arc(\n                options.x,\n                options.y,\n                options.radius,\n                options.startAngle,\n                options.endAngle,\n                !!options.counterclockwise\n            );\n        });\n\n        return this;\n    }\n\n    public arcTo(options: ArcToPoint) {\n        this.history.push((ctx) => {\n            ctx.arcTo(options.x1, options.y1, options.x2, options.y2, options.radius);\n        });\n\n        return this;\n    }\n\n    public quadraticBezierCurve(options: QuadraticBezierCurveOptions) {\n        this.history.push((ctx) => {\n            ctx.quadraticCurveTo(options.controlPointX, options.controlPointY, options.x, options.y);\n        });\n\n        return this;\n    }\n\n    public cubicBezierCurve(options: CubicBezierCurveOptions) {\n        this.history.push((ctx) => {\n            ctx.bezierCurveTo(\n                options.firstControlPointX,\n                options.firstControlPointY,\n                options.secondControlPointX,\n                options.secondControlPointY,\n                options.x,\n                options.y\n            );\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BackgroundColorTool.html":{"url":"classes/BackgroundColorTool.html","title":"class - BackgroundColorTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BackgroundColorTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/color/BackgroundColor.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ToolBox\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                fill\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                setFillColor\n                            \n                            \n                                    Public\n                                setStrokeColor\n                            \n                            \n                                    Public\n                                setStrokeWidth\n                            \n                            \n                                    Public\n                                stroke\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fill\n                        \n                    \n                \n            \n            \n                \n                    \n                    fill(x: number, y: number, w: number, h: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/color/BackgroundColor.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    w\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    h\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:39\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setFillColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setFillColor(color: string | CanvasPattern | CanvasGradient)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/color/BackgroundColor.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                            string | CanvasPattern | CanvasGradient\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setStrokeColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setStrokeColor(color: string | CanvasPattern | CanvasGradient)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/color/BackgroundColor.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                            string | CanvasPattern | CanvasGradient\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setStrokeWidth\n                        \n                    \n                \n            \n            \n                \n                    \n                    setStrokeWidth(w: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/color/BackgroundColor.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    w\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        stroke\n                        \n                    \n                \n            \n            \n                \n                    \n                    stroke(x: number, y: number, w: number, h: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/color/BackgroundColor.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    w\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    h\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ToolBox } from \"../base/ToolBox\";\n\nexport class BackgroundColorTool extends ToolBox {\n    public setFillColor(color: string | CanvasPattern | CanvasGradient) {\n        this.history.push((ctx) => {\n            ctx.fillStyle = color;\n        });\n        return this;\n    }\n\n    public fill(x: number, y: number, w: number, h: number) {\n        this.history.push((ctx) => {\n            ctx.fillRect(x, y, w, h);\n        });\n        return this;\n    }\n\n    public stroke(x: number, y: number, w: number, h: number) {\n        this.history.push((ctx) => {\n            ctx.strokeRect(x, y, w, h);\n        });\n        return this;\n    }\n\n    public setStrokeColor(color: string | CanvasPattern | CanvasGradient) {\n        this.history.push((ctx) => {\n            ctx.strokeStyle = color;\n        });\n        return this;\n    }\n\n    public setStrokeWidth(w: number) {\n        this.history.push((ctx) => {\n            ctx.lineWidth = w;\n        });\n        return this;\n    }\n\n    public render() {\n        this.layer.applyTool(this);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseShapeTool.html":{"url":"classes/BaseShapeTool.html","title":"class - BaseShapeTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseShapeTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/base/BaseShapeTool.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ToolBox\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addPoint\n                            \n                            \n                                    Public\n                                clip\n                            \n                            \n                                    Public\n                                fill\n                            \n                            \n                                    Public\n                                move\n                            \n                            \n                                    Public\n                                removePoint\n                            \n                            \n                                    Public\n                                setDashOffset\n                            \n                            \n                                    Public\n                                setFillColor\n                            \n                            \n                                    Public\n                                setLineCap\n                            \n                            \n                                    Public\n                                setLineDash\n                            \n                            \n                                    Public\n                                setLineJoinStyle\n                            \n                            \n                                    Public\n                                setLineWidth\n                            \n                            \n                                    Public\n                                setMiterLimit\n                            \n                            \n                                    Public\n                                setStrokeColor\n                            \n                            \n                                    Public\n                                stroke\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addPoint\n                        \n                    \n                \n            \n            \n                \n                    \n                    addPoint()\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clip\n                        \n                    \n                \n            \n            \n                \n                    \n                    clip(options?: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fill\n                        \n                    \n                \n            \n            \n                \n                    \n                    fill(options?: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        move\n                        \n                    \n                \n            \n            \n                \n                    \n                    move(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removePoint\n                        \n                    \n                \n            \n            \n                \n                    \n                    removePoint()\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setDashOffset\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDashOffset(offset: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setFillColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setFillColor(color: string | CanvasGradient | CanvasPattern)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                            string | CanvasGradient | CanvasPattern\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineCap\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineCap(lineCapStyle: CanvasLineCap)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lineCapStyle\n                                    \n                                            CanvasLineCap\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineDash\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineDash(segments: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    segments\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineJoinStyle\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineJoinStyle(style: \"round\" | \"bevel\" | \"miter\")\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    style\n                                    \n                                            \"round\" | \"bevel\" | \"miter\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineWidth\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineWidth(width: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setMiterLimit\n                        \n                    \n                \n            \n            \n                \n                    \n                    setMiterLimit(limit: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setStrokeColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setStrokeColor(color: string | CanvasGradient | CanvasPattern)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                            string | CanvasGradient | CanvasPattern\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        stroke\n                        \n                    \n                \n            \n            \n                \n                    \n                    stroke(options?: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Path2D } from \"@napi-rs/canvas\";\nimport { makeArgs } from \"../../utils/makeArgs\";\nimport { ToolBox } from \"./ToolBox\";\n\nexport class BaseShapeTool extends ToolBox {\n    public setFillColor(color: string | CanvasGradient | CanvasPattern) {\n        this.history.push((ctx) => {\n            ctx.fillStyle = color;\n        });\n\n        return this;\n    }\n\n    public setStrokeColor(color: string | CanvasGradient | CanvasPattern) {\n        this.history.push((ctx) => {\n            ctx.strokeStyle = color;\n        });\n\n        return this;\n    }\n\n    public setLineWidth(width: number) {\n        this.history.push((ctx) => {\n            ctx.lineWidth = width;\n        });\n\n        return this;\n    }\n\n    public setLineCap(lineCapStyle: CanvasLineCap) {\n        this.history.push((ctx) => {\n            ctx.lineCap = lineCapStyle;\n        });\n\n        return this;\n    }\n\n    public setDashOffset(offset: number) {\n        this.history.push((ctx) => {\n            ctx.lineDashOffset = offset;\n        });\n\n        return this;\n    }\n\n    public setLineJoinStyle(style: \"round\" | \"bevel\" | \"miter\") {\n        this.history.push((ctx) => {\n            ctx.lineJoin = style;\n        });\n\n        return this;\n    }\n\n    public setMiterLimit(limit: number) {\n        this.history.push((ctx) => {\n            ctx.miterLimit = limit;\n        });\n\n        return this;\n    }\n\n    public addPoint() {\n        this.history.push((ctx) => {\n            ctx.beginPath();\n        });\n\n        return this;\n    }\n\n    public removePoint() {\n        this.history.push((ctx) => {\n            ctx.closePath();\n        });\n\n        return this;\n    }\n\n    public move(x: number, y: number) {\n        this.history.push((ctx) => {\n            ctx.moveTo(x, y);\n        });\n\n        return this;\n    }\n\n    public fill(options?: { fillRule?: \"evenodd\" | \"nonzero\"; path: Path2D }) {\n        this.history.push((ctx) => {\n            if (!options) return ctx.fill();\n            ctx.fill(\n                ...makeArgs(\n                    (arg, idx) => (idx === 0 ? arg instanceof Path2D : idx === 1 ? typeof arg === \"string\" : false),\n                    [options.path, options.fillRule]\n                )\n            );\n        });\n\n        return this;\n    }\n\n    public stroke(options?: { path: Path2D }) {\n        this.history.push((ctx) => {\n            options?.path ? ctx.stroke(options.path) : ctx.stroke();\n        });\n\n        return this;\n    }\n\n    public setLineDash(segments: number[] = []) {\n        this.history.push((ctx) => {\n            ctx.setLineDash(segments);\n        });\n\n        return this;\n    }\n\n    public clip(options?: { fillRule?: \"evenodd\" | \"nonzero\"; path?: Path2D }) {\n        this.history.push((ctx) => {\n            if (!options) return ctx.clip();\n            ctx.clip(\n                ...makeArgs(\n                    (arg, idx) => (idx === 0 ? arg instanceof Path2D : idx === 1 ? typeof arg === \"string\" : false),\n                    [options.path, options.fillRule]\n                )\n            );\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ColorConfig.html":{"url":"interfaces/ColorConfig.html","title":"interface - ColorConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ColorConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/colors/ColorSwatches.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            color\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            force\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:     number[] | number | template literal type | template literal type | template literal type | template literal type | template literal type | template literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[] | number | template literal type | template literal type | template literal type | template literal type | template literal type | template literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        force\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        force:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IllustratorCollection } from \"../utils/IllustratorCollection\";\nimport { IllustratorColor } from \"./IllustratorColor\";\n\nexport interface ColorConfig {\n    color:\n        | number[]\n        | number\n        | `#${string}`\n        | `rgb(${number}, ${number}, ${number})`\n        | `rgba(${number}, ${number})`\n        | `cmyk(${number}%, ${number}%, ${number}%, ${number}%)`\n        | `hsl(${number}%, ${number}%, ${number}%)`\n        | `hsla(${number}%, ${number}%, ${number}%, ${number}%)`;\n    name: string;\n    force?: boolean;\n}\n\nexport class ColorSwatches {\n    #data = new IllustratorCollection();\n\n    public add(data: ColorConfig): IllustratorColor | false {\n        if (!data.name || typeof data.name !== \"string\") throw new TypeError(\"name is required\");\n        if (!data.color || typeof data.color !== \"string\") throw new TypeError(\"color is required\");\n        data.force ??= false;\n\n        if (this.#data.has(data.name) && !data.force) return false;\n\n        const color = new IllustratorColor(this, data);\n        this.#data.set(data.name, color);\n\n        return color;\n    }\n\n    public remove(name: string) {\n        return this.#data.delete(name);\n    }\n\n    public get(name: string) {\n        return this.#data.get(name);\n    }\n\n    public has(name: string) {\n        return this.#data.has(name);\n    }\n\n    public clear() {\n        this.#data.clear();\n    }\n\n    public count() {\n        return this.#data.size;\n    }\n\n    public random(): IllustratorColor;\n    public random(amount: number): IllustratorColor[];\n    public random(amount?: number): IllustratorColor | IllustratorColor[] {\n        return this.#data.random(amount as number);\n    }\n\n    public names() {\n        return this.#data.map((m) => m.name);\n    }\n\n    public toArray() {\n        return this.#data.array();\n    }\n\n    public toJSON() {\n        const data: Record = {};\n\n        for (const [name, color] of this.#data) {\n            data[name] = color;\n        }\n\n        return data;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ColorSwatches.html":{"url":"classes/ColorSwatches.html","title":"class - ColorSwatches","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ColorSwatches\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/colors/ColorSwatches.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                count\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                has\n                            \n                            \n                                    Public\n                                names\n                            \n                            \n                                    Public\n                                random\n                            \n                            \n                                    Public\n                                random\n                            \n                            \n                                    Public\n                                random\n                            \n                            \n                                    Public\n                                remove\n                            \n                            \n                                    Public\n                                toArray\n                            \n                            \n                                    Public\n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        add\n                        \n                    \n                \n            \n            \n                \n                    \n                    add(data: ColorConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/colors/ColorSwatches.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ColorConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IllustratorColor | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clear\n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in src/colors/ColorSwatches.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        count\n                        \n                    \n                \n            \n            \n                \n                    \n                    count()\n                \n            \n\n\n            \n                \n                    Defined in src/colors/ColorSwatches.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/colors/ColorSwatches.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        has\n                        \n                    \n                \n            \n            \n                \n                    \n                    has(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/colors/ColorSwatches.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        names\n                        \n                    \n                \n            \n            \n                \n                    \n                    names()\n                \n            \n\n\n            \n                \n                    Defined in src/colors/ColorSwatches.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        random\n                        \n                    \n                \n            \n            \n                \n                    \n                    random()\n                \n            \n\n\n            \n                \n                    Defined in src/colors/ColorSwatches.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         IllustratorColor\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        random\n                        \n                    \n                \n            \n            \n                \n                    \n                    random(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/colors/ColorSwatches.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IllustratorColor[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        random\n                        \n                    \n                \n            \n            \n                \n                    \n                    random(amount?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/colors/ColorSwatches.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IllustratorColor | []\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/colors/ColorSwatches.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toArray\n                        \n                    \n                \n            \n            \n                \n                    \n                    toArray()\n                \n            \n\n\n            \n                \n                    Defined in src/colors/ColorSwatches.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toJSON\n                        \n                    \n                \n            \n            \n                \n                    \n                    toJSON()\n                \n            \n\n\n            \n                \n                    Defined in src/colors/ColorSwatches.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Record\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IllustratorCollection } from \"../utils/IllustratorCollection\";\nimport { IllustratorColor } from \"./IllustratorColor\";\n\nexport interface ColorConfig {\n    color:\n        | number[]\n        | number\n        | `#${string}`\n        | `rgb(${number}, ${number}, ${number})`\n        | `rgba(${number}, ${number})`\n        | `cmyk(${number}%, ${number}%, ${number}%, ${number}%)`\n        | `hsl(${number}%, ${number}%, ${number}%)`\n        | `hsla(${number}%, ${number}%, ${number}%, ${number}%)`;\n    name: string;\n    force?: boolean;\n}\n\nexport class ColorSwatches {\n    #data = new IllustratorCollection();\n\n    public add(data: ColorConfig): IllustratorColor | false {\n        if (!data.name || typeof data.name !== \"string\") throw new TypeError(\"name is required\");\n        if (!data.color || typeof data.color !== \"string\") throw new TypeError(\"color is required\");\n        data.force ??= false;\n\n        if (this.#data.has(data.name) && !data.force) return false;\n\n        const color = new IllustratorColor(this, data);\n        this.#data.set(data.name, color);\n\n        return color;\n    }\n\n    public remove(name: string) {\n        return this.#data.delete(name);\n    }\n\n    public get(name: string) {\n        return this.#data.get(name);\n    }\n\n    public has(name: string) {\n        return this.#data.has(name);\n    }\n\n    public clear() {\n        this.#data.clear();\n    }\n\n    public count() {\n        return this.#data.size;\n    }\n\n    public random(): IllustratorColor;\n    public random(amount: number): IllustratorColor[];\n    public random(amount?: number): IllustratorColor | IllustratorColor[] {\n        return this.#data.random(amount as number);\n    }\n\n    public names() {\n        return this.#data.map((m) => m.name);\n    }\n\n    public toArray() {\n        return this.#data.array();\n    }\n\n    public toJSON() {\n        const data: Record = {};\n\n        for (const [name, color] of this.#data) {\n            data[name] = color;\n        }\n\n        return data;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ColorUtil.html":{"url":"classes/ColorUtil.html","title":"class - ColorUtil","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ColorUtil\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/ColorUtil.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                Colors\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                hexToRGBA\n                            \n                            \n                                    Static\n                                isHex\n                            \n                            \n                                    Static\n                                randomHex\n                            \n                            \n                                    Static\n                                resolveHex\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        Colors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n        DC_DEFAULT: \"#000000\",\n        DC_WHITE: \"#FFFFFF\",\n        DC_AQUA: \"#1ABC9C\",\n        DC_GREEN: \"#2ECC71\",\n        DC_BLUE: \"#3498DB\",\n        DC_YELLOW: \"#FFFF00\",\n        DC_PURPLE: \"#9B59B6\",\n        DC_LUMINOUS_VIVID_PINK: \"#E91E63\",\n        DC_GOLD: \"#F1C40F\",\n        DC_ORANGE: \"#E67E22\",\n        DC_RED: \"#E74C3C\",\n        DC_GREY: \"#95A5A6\",\n        DC_NAVY: \"#34495E\",\n        DC_DARK_AQUA: \"#11806A\",\n        DC_DARK_GREEN: \"#1F8B4C\",\n        DC_DARK_BLUE: \"#206694\",\n        DC_DARK_PURPLE: \"#71368A\",\n        DC_DARK_VIVID_PINK: \"#AD1457\",\n        DC_DARK_GOLD: \"#C27C0E\",\n        DC_DARK_ORANGE: \"#A84300\",\n        DC_DARK_RED: \"#992D22\",\n        DC_DARK_GREY: \"#979C9F\",\n        DC_DARKER_GREY: \"#7F8C8D\",\n        DC_LIGHT_GREY: \"#BCC0C0\",\n        DC_DARK_NAVY: \"#2C3E50\",\n        DC_BLURPLE: \"#7289DA\",\n        DC_DARK_BLURPLE: \"#4D5E94\",\n        DC_GREYPLE: \"#99AAB5\",\n        DC_DARK_BUT_NOT_BLACK: \"#2C2F33\",\n        DC_NOT_QUITE_BLACK: \"#23272A\",\n        aliceblue: \"#F0F8FF\",\n        antiquewhite: \"#FAEBD7\",\n        aqua: \"#00FFFF\",\n        aquamarine: \"#7FFFD4\",\n        azure: \"#F0FFFF\",\n        beige: \"#F5F5DC\",\n        bisque: \"#FFE4C4\",\n        black: \"#000000\",\n        blanchedalmond: \"#FFEBCD\",\n        blue: \"#0000FF\",\n        blueviolet: \"#8A2BE2\",\n        brown: \"#A52A2A\",\n        burlywood: \"#DEB887\",\n        cadetblue: \"#5F9EA0\",\n        chartreuse: \"#7FFF00\",\n        chocolate: \"#D2691E\",\n        coral: \"#FF7F50\",\n        cornflowerblue: \"#6495ED\",\n        cornsilk: \"#FFF8DC\",\n        crimson: \"#DC143C\",\n        cyan: \"#00FFFF\",\n        darkblue: \"#00008B\",\n        darkcyan: \"#008B8B\",\n        darkgoldenrod: \"#B8860B\",\n        darkgray: \"#A9A9A9\",\n        darkgreen: \"#006400\",\n        darkgrey: \"#A9A9A9\",\n        darkkhaki: \"#BDB76B\",\n        darkmagenta: \"#8B008B\",\n        darkolivegreen: \"#556B2F\",\n        darkorange: \"#FF8C00\",\n        darkorchid: \"#9932CC\",\n        darkred: \"#8B0000\",\n        darksalmon: \"#E9967A\",\n        darkseagreen: \"#8FBC8F\",\n        darkslateblue: \"#483D8B\",\n        darkslategray: \"#2F4F4F\",\n        darkslategrey: \"#2F4F4F\",\n        darkturquoise: \"#00CED1\",\n        darkviolet: \"#9400D3\",\n        deeppink: \"#FF1493\",\n        deepskyblue: \"#00BFFF\",\n        dimgray: \"#696969\",\n        dimgrey: \"#696969\",\n        dodgerblue: \"#1E90FF\",\n        firebrick: \"#B22222\",\n        floralwhite: \"#FFFAF0\",\n        forestgreen: \"#228B22\",\n        fuchsia: \"#FF00FF\",\n        gainsboro: \"#DCDCDC\",\n        ghostwhite: \"#F8F8FF\",\n        goldenrod: \"#DAA520\",\n        gold: \"#FFD700\",\n        gray: \"#808080\",\n        green: \"#008000\",\n        greenyellow: \"#ADFF2F\",\n        grey: \"#808080\",\n        honeydew: \"#F0FFF0\",\n        hotpink: \"#FF69B4\",\n        indianred: \"#CD5C5C\",\n        indigo: \"#4B0082\",\n        ivory: \"#FFFFF0\",\n        khaki: \"#F0E68C\",\n        lavenderblush: \"#FFF0F5\",\n        lavender: \"#E6E6FA\",\n        lawngreen: \"#7CFC00\",\n        lemonchiffon: \"#FFFACD\",\n        lightblue: \"#ADD8E6\",\n        lightcoral: \"#F08080\",\n        lightcyan: \"#E0FFFF\",\n        lightgoldenrodyellow: \"#FAFAD2\",\n        lightgray: \"#D3D3D3\",\n        lightgreen: \"#90EE90\",\n        lightgrey: \"#D3D3D3\",\n        lightpink: \"#FFB6C1\",\n        lightsalmon: \"#FFA07A\",\n        lightseagreen: \"#20B2AA\",\n        lightskyblue: \"#87CEFA\",\n        lightslategray: \"#778899\",\n        lightslategrey: \"#778899\",\n        lightsteelblue: \"#B0C4DE\",\n        lightyellow: \"#FFFFE0\",\n        lime: \"#00FF00\",\n        limegreen: \"#32CD32\",\n        linen: \"#FAF0E6\",\n        magenta: \"#FF00FF\",\n        maroon: \"#800000\",\n        mediumaquamarine: \"#66CDAA\",\n        mediumblue: \"#0000CD\",\n        mediumorchid: \"#BA55D3\",\n        mediumpurple: \"#9370DB\",\n        mediumseagreen: \"#3CB371\",\n        mediumslateblue: \"#7B68EE\",\n        mediumspringgreen: \"#00FA9A\",\n        mediumturquoise: \"#48D1CC\",\n        mediumvioletred: \"#C71585\",\n        midnightblue: \"#191970\",\n        mintcream: \"#F5FFFA\",\n        mistyrose: \"#FFE4E1\",\n        moccasin: \"#FFE4B5\",\n        navajowhite: \"#FFDEAD\",\n        navy: \"#000080\",\n        oldlace: \"#FDF5E6\",\n        olive: \"#808000\",\n        olivedrab: \"#6B8E23\",\n        orange: \"#FFA500\",\n        orangered: \"#FF4500\",\n        orchid: \"#DA70D6\",\n        palegoldenrod: \"#EEE8AA\",\n        palegreen: \"#98FB98\",\n        paleturquoise: \"#AFEEEE\",\n        palevioletred: \"#DB7093\",\n        papayawhip: \"#FFEFD5\",\n        peachpuff: \"#FFDAB9\",\n        peru: \"#CD853F\",\n        pink: \"#FFC0CB\",\n        plum: \"#DDA0DD\",\n        powderblue: \"#B0E0E6\",\n        purple: \"#800080\",\n        rebeccapurple: \"#663399\",\n        red: \"#FF0000\",\n        rosybrown: \"#BC8F8F\",\n        royalblue: \"#4169E1\",\n        saddlebrown: \"#8B4513\",\n        salmon: \"#FA8072\",\n        sandybrown: \"#F4A460\",\n        seagreen: \"#2E8B57\",\n        seashell: \"#FFF5EE\",\n        sienna: \"#A0522D\",\n        silver: \"#C0C0C0\",\n        skyblue: \"#87CEEB\",\n        slateblue: \"#6A5ACD\",\n        slategray: \"#708090\",\n        slategrey: \"#708090\",\n        snow: \"#FFFAFA\",\n        springgreen: \"#00FF7F\",\n        steelblue: \"#4682B4\",\n        tan: \"#D2B48C\",\n        teal: \"#008080\",\n        thistle: \"#D8BFD8\",\n        tomato: \"#FF6347\",\n        turquoise: \"#40E0D0\",\n        violet: \"#EE82EE\",\n        wheat: \"#F5DEB3\",\n        white: \"#FFFFFF\",\n        whitesmoke: \"#F5F5F5\",\n        yellow: \"#FFFF00\",\n        yellowgreen: \"#9ACD32\"\n    }\n                    \n                \n                    \n                        \n                                Defined in src/utils/ColorUtil.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        hexToRGBA\n                        \n                    \n                \n            \n            \n                \n                    \n                    hexToRGBA(hex: string)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/ColorUtil.ts:191\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    hex\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        isHex\n                        \n                    \n                \n            \n            \n                \n                    \n                    isHex(hex: string)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/ColorUtil.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    hex\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     template literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        randomHex\n                        \n                    \n                \n            \n            \n                \n                    \n                    randomHex()\n                \n            \n\n\n            \n                \n                    Defined in src/utils/ColorUtil.ts:219\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     template literal type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        resolveHex\n                        \n                    \n                \n            \n            \n                \n                    \n                    resolveHex(color:  | \"RANDOM\")\n                \n            \n\n\n            \n                \n                    Defined in src/utils/ColorUtil.ts:225\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                             | \"RANDOM\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class ColorUtil extends null {\n    private constructor() {\n        /* noop */\n    }\n\n    static Colors = {\n        DC_DEFAULT: \"#000000\",\n        DC_WHITE: \"#FFFFFF\",\n        DC_AQUA: \"#1ABC9C\",\n        DC_GREEN: \"#2ECC71\",\n        DC_BLUE: \"#3498DB\",\n        DC_YELLOW: \"#FFFF00\",\n        DC_PURPLE: \"#9B59B6\",\n        DC_LUMINOUS_VIVID_PINK: \"#E91E63\",\n        DC_GOLD: \"#F1C40F\",\n        DC_ORANGE: \"#E67E22\",\n        DC_RED: \"#E74C3C\",\n        DC_GREY: \"#95A5A6\",\n        DC_NAVY: \"#34495E\",\n        DC_DARK_AQUA: \"#11806A\",\n        DC_DARK_GREEN: \"#1F8B4C\",\n        DC_DARK_BLUE: \"#206694\",\n        DC_DARK_PURPLE: \"#71368A\",\n        DC_DARK_VIVID_PINK: \"#AD1457\",\n        DC_DARK_GOLD: \"#C27C0E\",\n        DC_DARK_ORANGE: \"#A84300\",\n        DC_DARK_RED: \"#992D22\",\n        DC_DARK_GREY: \"#979C9F\",\n        DC_DARKER_GREY: \"#7F8C8D\",\n        DC_LIGHT_GREY: \"#BCC0C0\",\n        DC_DARK_NAVY: \"#2C3E50\",\n        DC_BLURPLE: \"#7289DA\",\n        DC_DARK_BLURPLE: \"#4D5E94\",\n        DC_GREYPLE: \"#99AAB5\",\n        DC_DARK_BUT_NOT_BLACK: \"#2C2F33\",\n        DC_NOT_QUITE_BLACK: \"#23272A\",\n        aliceblue: \"#F0F8FF\",\n        antiquewhite: \"#FAEBD7\",\n        aqua: \"#00FFFF\",\n        aquamarine: \"#7FFFD4\",\n        azure: \"#F0FFFF\",\n        beige: \"#F5F5DC\",\n        bisque: \"#FFE4C4\",\n        black: \"#000000\",\n        blanchedalmond: \"#FFEBCD\",\n        blue: \"#0000FF\",\n        blueviolet: \"#8A2BE2\",\n        brown: \"#A52A2A\",\n        burlywood: \"#DEB887\",\n        cadetblue: \"#5F9EA0\",\n        chartreuse: \"#7FFF00\",\n        chocolate: \"#D2691E\",\n        coral: \"#FF7F50\",\n        cornflowerblue: \"#6495ED\",\n        cornsilk: \"#FFF8DC\",\n        crimson: \"#DC143C\",\n        cyan: \"#00FFFF\",\n        darkblue: \"#00008B\",\n        darkcyan: \"#008B8B\",\n        darkgoldenrod: \"#B8860B\",\n        darkgray: \"#A9A9A9\",\n        darkgreen: \"#006400\",\n        darkgrey: \"#A9A9A9\",\n        darkkhaki: \"#BDB76B\",\n        darkmagenta: \"#8B008B\",\n        darkolivegreen: \"#556B2F\",\n        darkorange: \"#FF8C00\",\n        darkorchid: \"#9932CC\",\n        darkred: \"#8B0000\",\n        darksalmon: \"#E9967A\",\n        darkseagreen: \"#8FBC8F\",\n        darkslateblue: \"#483D8B\",\n        darkslategray: \"#2F4F4F\",\n        darkslategrey: \"#2F4F4F\",\n        darkturquoise: \"#00CED1\",\n        darkviolet: \"#9400D3\",\n        deeppink: \"#FF1493\",\n        deepskyblue: \"#00BFFF\",\n        dimgray: \"#696969\",\n        dimgrey: \"#696969\",\n        dodgerblue: \"#1E90FF\",\n        firebrick: \"#B22222\",\n        floralwhite: \"#FFFAF0\",\n        forestgreen: \"#228B22\",\n        fuchsia: \"#FF00FF\",\n        gainsboro: \"#DCDCDC\",\n        ghostwhite: \"#F8F8FF\",\n        goldenrod: \"#DAA520\",\n        gold: \"#FFD700\",\n        gray: \"#808080\",\n        green: \"#008000\",\n        greenyellow: \"#ADFF2F\",\n        grey: \"#808080\",\n        honeydew: \"#F0FFF0\",\n        hotpink: \"#FF69B4\",\n        indianred: \"#CD5C5C\",\n        indigo: \"#4B0082\",\n        ivory: \"#FFFFF0\",\n        khaki: \"#F0E68C\",\n        lavenderblush: \"#FFF0F5\",\n        lavender: \"#E6E6FA\",\n        lawngreen: \"#7CFC00\",\n        lemonchiffon: \"#FFFACD\",\n        lightblue: \"#ADD8E6\",\n        lightcoral: \"#F08080\",\n        lightcyan: \"#E0FFFF\",\n        lightgoldenrodyellow: \"#FAFAD2\",\n        lightgray: \"#D3D3D3\",\n        lightgreen: \"#90EE90\",\n        lightgrey: \"#D3D3D3\",\n        lightpink: \"#FFB6C1\",\n        lightsalmon: \"#FFA07A\",\n        lightseagreen: \"#20B2AA\",\n        lightskyblue: \"#87CEFA\",\n        lightslategray: \"#778899\",\n        lightslategrey: \"#778899\",\n        lightsteelblue: \"#B0C4DE\",\n        lightyellow: \"#FFFFE0\",\n        lime: \"#00FF00\",\n        limegreen: \"#32CD32\",\n        linen: \"#FAF0E6\",\n        magenta: \"#FF00FF\",\n        maroon: \"#800000\",\n        mediumaquamarine: \"#66CDAA\",\n        mediumblue: \"#0000CD\",\n        mediumorchid: \"#BA55D3\",\n        mediumpurple: \"#9370DB\",\n        mediumseagreen: \"#3CB371\",\n        mediumslateblue: \"#7B68EE\",\n        mediumspringgreen: \"#00FA9A\",\n        mediumturquoise: \"#48D1CC\",\n        mediumvioletred: \"#C71585\",\n        midnightblue: \"#191970\",\n        mintcream: \"#F5FFFA\",\n        mistyrose: \"#FFE4E1\",\n        moccasin: \"#FFE4B5\",\n        navajowhite: \"#FFDEAD\",\n        navy: \"#000080\",\n        oldlace: \"#FDF5E6\",\n        olive: \"#808000\",\n        olivedrab: \"#6B8E23\",\n        orange: \"#FFA500\",\n        orangered: \"#FF4500\",\n        orchid: \"#DA70D6\",\n        palegoldenrod: \"#EEE8AA\",\n        palegreen: \"#98FB98\",\n        paleturquoise: \"#AFEEEE\",\n        palevioletred: \"#DB7093\",\n        papayawhip: \"#FFEFD5\",\n        peachpuff: \"#FFDAB9\",\n        peru: \"#CD853F\",\n        pink: \"#FFC0CB\",\n        plum: \"#DDA0DD\",\n        powderblue: \"#B0E0E6\",\n        purple: \"#800080\",\n        rebeccapurple: \"#663399\",\n        red: \"#FF0000\",\n        rosybrown: \"#BC8F8F\",\n        royalblue: \"#4169E1\",\n        saddlebrown: \"#8B4513\",\n        salmon: \"#FA8072\",\n        sandybrown: \"#F4A460\",\n        seagreen: \"#2E8B57\",\n        seashell: \"#FFF5EE\",\n        sienna: \"#A0522D\",\n        silver: \"#C0C0C0\",\n        skyblue: \"#87CEEB\",\n        slateblue: \"#6A5ACD\",\n        slategray: \"#708090\",\n        slategrey: \"#708090\",\n        snow: \"#FFFAFA\",\n        springgreen: \"#00FF7F\",\n        steelblue: \"#4682B4\",\n        tan: \"#D2B48C\",\n        teal: \"#008080\",\n        thistle: \"#D8BFD8\",\n        tomato: \"#FF6347\",\n        turquoise: \"#40E0D0\",\n        violet: \"#EE82EE\",\n        wheat: \"#F5DEB3\",\n        white: \"#FFFFFF\",\n        whitesmoke: \"#F5F5F5\",\n        yellow: \"#FFFF00\",\n        yellowgreen: \"#9ACD32\"\n    };\n\n    public static isHex(hex: string): hex is `#${string}` {\n        return /^#(([\\dA-Fa-f]{3}){1,2}|([\\dA-Fa-f]{4}){1,2})$/.test(hex);\n    }\n\n    public static hexToRGBA(hex: string) {\n        let c: string[] = hex.substring(1).split(\"\");\n\n        if (!ColorUtil.isHex(hex)) {\n            return new Array(4).fill(\"0\");\n        }\n\n        switch (c.length) {\n            case 3:\n                c = [c[0] + c[0], c[1] + c[1], c[2] + c[2], \"ff\"];\n                break;\n            case 4:\n                c = [c[0] + c[0], c[1] + c[1], c[2] + c[2], c[3] + c[3]];\n                break;\n            case 6:\n                c = [c[0] + c[1], c[2] + c[3], c[4] + c[5], \"ff\"];\n                break;\n            case 8:\n                c = [c[0] + c[1], c[2] + c[3], c[4] + c[5], c[6] + c[7]];\n                break;\n        }\n\n        c = c.map((char) => parseInt(char, 16).toString());\n        c[3] = (Math.round((parseInt(c[3], 10) / 255) * 100) / 100).toString();\n        if (c[3] === \"1\") c.pop();\n        return c;\n    }\n\n    public static randomHex(): `#${string}` {\n        return `#${Math.floor(Math.random() * 16777216)\n            .toString(16)\n            .padStart(6, \"0\")}`;\n    }\n\n    public static resolveHex(color: keyof typeof ColorUtil.Colors | \"RANDOM\") {\n        if (color === \"RANDOM\") return ColorUtil.randomHex();\n        return ColorUtil.Colors[color] ?? \"#000000\";\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Colors.html":{"url":"classes/Colors.html","title":"class - Colors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Colors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/colors/Colors.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                illustrator\n                            \n                            \n                                    Public\n                                swatches\n                            \n                            \n                                    Public\n                                utils\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(illustrator: Illustrator)\n                    \n                \n                        \n                            \n                                Defined in src/colors/Colors.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        illustrator\n                                                  \n                                                        \n                                                                        Illustrator\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        illustrator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Illustrator\n\n                    \n                \n                    \n                        \n                                Defined in src/colors/Colors.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        swatches\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ColorSwatches()\n                    \n                \n                    \n                        \n                                Defined in src/colors/Colors.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        utils\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ColorUtil\n                    \n                \n                    \n                        \n                                Defined in src/colors/Colors.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Illustrator } from \"../illustrator/Illustrator\";\nimport { ColorUtil } from \"../utils/ColorUtil\";\nimport { ColorSwatches } from \"./ColorSwatches\";\n\nexport class Colors {\n    public utils = ColorUtil;\n    public swatches = new ColorSwatches();\n    public constructor(public readonly illustrator: Illustrator) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConvolutionOptions.html":{"url":"interfaces/ConvolutionOptions.html","title":"interface - ConvolutionOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ConvolutionOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/filters/ConvolutionFilter.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            iterations\n                                        \n                                \n                                \n                                        \n                                            matrix\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            opaque\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sx\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sy\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        iterations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        iterations:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        matrix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        matrix:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        opaque\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        opaque:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sx\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sx:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sy:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { SKRSContext2D } from \"@napi-rs/canvas\";\nimport { ToolBox } from \"../base/ToolBox\";\n\nexport interface ConvolutionOptions {\n    sx?: number;\n    sy?: number;\n    opaque?: boolean;\n    matrix: Array;\n    iterations?: number;\n}\n\nexport class ConvolutionTool extends ToolBox {\n    public convolute(options: ConvolutionOptions) {\n        this.history.push(async (ctx) => {\n            options.iterations ??= 1;\n            if (options.iterations  & { ctx: SKRSContext2D }) {\n        const side = Math.round(Math.sqrt(options.matrix.length));\n        const halfSide = Math.floor(side / 2);\n        const pixels = options.ctx.getImageData(\n            options.sx,\n            options.sy,\n            options.ctx.canvas.width,\n            options.ctx.canvas.height\n        );\n        const src = pixels.data;\n        const sw = pixels.width;\n        const sh = pixels.height;\n        const w = sw;\n        const h = sh;\n        const output = options.ctx.getImageData(\n            options.sx,\n            options.sy,\n            options.ctx.canvas.width,\n            options.ctx.canvas.height\n        );\n        const dst = output.data;\n        const alphaFac = options.opaque ? 1 : 0;\n\n        for (let y = 0; y = 0 && scy = 0 && scx \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConvolutionTool.html":{"url":"classes/ConvolutionTool.html","title":"class - ConvolutionTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConvolutionTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/filters/ConvolutionFilter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ToolBox\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                convolute\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    matrices\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        convolute\n                        \n                    \n                \n            \n            \n                \n                    \n                    convolute(options: ConvolutionOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/ConvolutionFilter.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ConvolutionOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        matrices\n                    \n                \n\n                \n                    \n                        getmatrices()\n                    \n                \n                            \n                                \n                                    Defined in src/toolbox/filters/ConvolutionFilter.ts:90\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { SKRSContext2D } from \"@napi-rs/canvas\";\nimport { ToolBox } from \"../base/ToolBox\";\n\nexport interface ConvolutionOptions {\n    sx?: number;\n    sy?: number;\n    opaque?: boolean;\n    matrix: Array;\n    iterations?: number;\n}\n\nexport class ConvolutionTool extends ToolBox {\n    public convolute(options: ConvolutionOptions) {\n        this.history.push(async (ctx) => {\n            options.iterations ??= 1;\n            if (options.iterations  & { ctx: SKRSContext2D }) {\n        const side = Math.round(Math.sqrt(options.matrix.length));\n        const halfSide = Math.floor(side / 2);\n        const pixels = options.ctx.getImageData(\n            options.sx,\n            options.sy,\n            options.ctx.canvas.width,\n            options.ctx.canvas.height\n        );\n        const src = pixels.data;\n        const sw = pixels.width;\n        const sh = pixels.height;\n        const w = sw;\n        const h = sh;\n        const output = options.ctx.getImageData(\n            options.sx,\n            options.sy,\n            options.ctx.canvas.width,\n            options.ctx.canvas.height\n        );\n        const dst = output.data;\n        const alphaFac = options.opaque ? 1 : 0;\n\n        for (let y = 0; y = 0 && scy = 0 && scx \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreateLayerOptions.html":{"url":"interfaces/CreateLayerOptions.html","title":"interface - CreateLayerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreateLayerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/layer/LayerManager.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            config\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            position\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        config:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IllustratorCollection } from \"../utils/IllustratorCollection\";\nimport { generateRandomId } from \"../utils/randomId\";\nimport { Illustrator } from \"../illustrator/Illustrator\";\nimport { Layer, LayerToolHistory } from \"./Layer\";\n\nexport interface CreateLayerOptions {\n    name: string;\n    position?: number;\n    config?: {\n        height?: number;\n        width?: number;\n    };\n}\n\nexport interface LayerWrapper {\n    layer: Layer;\n    name: string;\n    id: number;\n    position: number;\n}\n\nexport type LayerResolvable = number | Layer | string;\n\nexport class LayerManager {\n    #layers = new IllustratorCollection();\n\n    public constructor(public readonly illustrator: Illustrator) {}\n\n    public count() {\n        return this.#layers.size;\n    }\n\n    public createLayer(options: CreateLayerOptions) {\n        if (!options.name || typeof options.name !== \"string\") throw new Error(\"Layer name is required\");\n        if (this.#layers.findKey((x) => x.name === options.name))\n            throw new Error(\"Layer with that name already exists\");\n        const id = generateRandomId();\n        const layerObj: LayerWrapper = {\n            id,\n            layer: new Layer(this, id, options.config),\n            name: options.name,\n            position: options.position ?? this.count() + 1\n        };\n\n        this.#layers.set(layerObj.id, layerObj);\n        // rearrange\n        layerObj.layer.setPosition(layerObj.position);\n\n        return layerObj.layer;\n    }\n\n    public duplicateLayer(layer: Layer, history: LayerToolHistory, options: CreateLayerOptions) {\n        if (!options.name || typeof options.name !== \"string\") throw new Error(\"Layer name is required\");\n        if (this.#layers.findKey((x) => x.name === options.name))\n            throw new Error(\"Layer with that name already exists\");\n        const id = generateRandomId();\n        const layerObj: LayerWrapper = {\n            id,\n            layer: new Layer(this, id, options.config),\n            name: options.name,\n            position: options.position ?? this.count() + 1\n        };\n\n        layerObj.layer.setHistory(history);\n\n        this.#layers.set(layerObj.id, layerObj);\n        layerObj.layer.setPosition(layer.position + 1);\n\n        return layerObj.layer;\n    }\n\n    public deleteLayer(layer: LayerResolvable) {\n        const id = this.resolveId(layer);\n        if (id == null) return false;\n        return this.#layers.delete(id);\n    }\n\n    public hasLayer(layer: LayerResolvable) {\n        const id = this.resolveId(layer);\n        return id != null;\n    }\n\n    public getLayer(layer: LayerResolvable) {\n        const l = this.resolveLayer(layer);\n        if (l == null) return null;\n        return l;\n    }\n\n    public getLayerPosition(layer: LayerResolvable) {\n        const l = this.resolve(layer);\n        if (!l) return -1;\n        return l.position;\n    }\n\n    public setLayerPosition(layer: LayerResolvable, position: number) {\n        if (position  l.position >= position);\n        layersToBeUpdated.forEach((l) => {\n            this.#layers.set(l.id, {\n                ...l,\n                position: l.position + 1\n            });\n        });\n        this.#layers.set(l.id, {\n            ...l,\n            position\n        });\n        return this.#layers.get(l.id)?.position ?? -1;\n    }\n\n    public resolveLayer(layer: LayerResolvable) {\n        return this.resolve(layer)?.layer;\n    }\n\n    public resolveId(layer: LayerResolvable) {\n        return this.resolve(layer)?.id;\n    }\n\n    public resolve(layer: LayerResolvable) {\n        if (layer instanceof Layer) return this.#layers.get(layer.id);\n        if (typeof layer === \"number\") return this.#layers.get(layer);\n        if (typeof layer === \"string\") return this.#layers.find((l) => l.name === layer);\n    }\n\n    public getAllLayers(ordered = true) {\n        return ordered ? this.#layers.array().sort((a, b) => b.position - a.position) : this.#layers.array();\n    }\n\n    public iterate() {\n        return this.#layers.values();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CubicBezierCurveOptions.html":{"url":"interfaces/CubicBezierCurveOptions.html","title":"interface - CubicBezierCurveOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CubicBezierCurveOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/shapes/Line.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            firstControlPointX\n                                        \n                                \n                                \n                                        \n                                            firstControlPointY\n                                        \n                                \n                                \n                                        \n                                            secondControlPointX\n                                        \n                                \n                                \n                                        \n                                            secondControlPointY\n                                        \n                                \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        firstControlPointX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstControlPointX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstControlPointY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstControlPointY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secondControlPointX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secondControlPointX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secondControlPointY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secondControlPointY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseShapeTool } from \"../base/BaseShapeTool\";\n\nexport interface DrawArcOptions {\n    x: number;\n    y: number;\n    radius: number;\n    startAngle: number;\n    endAngle: number;\n    counterclockwise?: boolean;\n}\n\nexport interface ArcToPoint {\n    x1: number;\n    y1: number;\n    x2: number;\n    y2: number;\n    radius: number;\n}\n\nexport interface QuadraticBezierCurveOptions {\n    controlPointX: number;\n    controlPointY: number;\n    x: number;\n    y: number;\n}\n\nexport interface CubicBezierCurveOptions {\n    firstControlPointX: number;\n    firstControlPointY: number;\n    secondControlPointX: number;\n    secondControlPointY: number;\n    x: number;\n    y: number;\n}\n\nexport class LineTool extends BaseShapeTool {\n    public draw(from: number, to: number) {\n        this.history.push((ctx) => {\n            ctx.lineTo(from, to);\n        });\n\n        return this;\n    }\n\n    public arc(options: DrawArcOptions) {\n        this.history.push((ctx) => {\n            ctx.arc(\n                options.x,\n                options.y,\n                options.radius,\n                options.startAngle,\n                options.endAngle,\n                !!options.counterclockwise\n            );\n        });\n\n        return this;\n    }\n\n    public arcTo(options: ArcToPoint) {\n        this.history.push((ctx) => {\n            ctx.arcTo(options.x1, options.y1, options.x2, options.y2, options.radius);\n        });\n\n        return this;\n    }\n\n    public quadraticBezierCurve(options: QuadraticBezierCurveOptions) {\n        this.history.push((ctx) => {\n            ctx.quadraticCurveTo(options.controlPointX, options.controlPointY, options.x, options.y);\n        });\n\n        return this;\n    }\n\n    public cubicBezierCurve(options: CubicBezierCurveOptions) {\n        this.history.push((ctx) => {\n            ctx.bezierCurveTo(\n                options.firstControlPointX,\n                options.firstControlPointY,\n                options.secondControlPointX,\n                options.secondControlPointY,\n                options.x,\n                options.y\n            );\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DataSource.html":{"url":"classes/DataSource.html","title":"class - DataSource","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DataSource\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/DataSource.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addData\n                            \n                            \n                                    Public\n                                clone\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                loadData\n                            \n                            \n                                    Public\n                                removeData\n                            \n                            \n                                    Public\n                                toArray\n                            \n                            \n                                    Public\n                                toJSON\n                            \n                            \n                                    Public\n                                toString\n                            \n                            \n                                    Public\n                                \n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/data/DataSource.ts:33\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addData\n                        \n                    \n                \n            \n            \n                \n                    \n                    addData(data: IllustratorDataSource)\n                \n            \n\n\n            \n                \n                    Defined in src/data/DataSource.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                IllustratorDataSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clone\n                        \n                    \n                \n            \n            \n                \n                    \n                    clone()\n                \n            \n\n\n            \n                \n                    Defined in src/data/DataSource.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         DataSource\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(nameOrFn: string | )\n                \n            \n\n\n            \n                \n                    Defined in src/data/DataSource.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nameOrFn\n                                    \n                                            string | \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        loadData\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadData(data: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/data/DataSource.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeData\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeData(nameOrFn: string | )\n                \n            \n\n\n            \n                \n                    Defined in src/data/DataSource.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nameOrFn\n                                    \n                                            string | \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toArray\n                        \n                    \n                \n            \n            \n                \n                    \n                    toArray()\n                \n            \n\n\n            \n                \n                    Defined in src/data/DataSource.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toJSON\n                        \n                    \n                \n            \n            \n                \n                    \n                    toJSON()\n                \n            \n\n\n            \n                \n                    Defined in src/data/DataSource.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toString\n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in src/data/DataSource.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     template literal type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ()\n                \n            \n\n\n            \n                \n                    Defined in src/data/DataSource.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         IterableIterator\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IllustratorImageSource } from \"../image/ImageLoader\";\n\nexport interface IllustratorDataSource {\n    name: string;\n    type: \"text\" | \"image\";\n    data: TextDataSource | ImageDataSource;\n}\n\nexport interface TextDataSource {\n    value: string;\n    config: {\n        x: number;\n        y: number;\n        maxWidth?: number;\n        font: string;\n        fontPath?: string;\n    };\n}\n\n// TODO: template api\nexport interface ImageDataSource {\n    value: IllustratorImageSource;\n    config: {\n        x: number;\n        y: number;\n        width: number;\n        height: number;\n        radius?: number;\n    };\n}\n\nexport class DataSource {\n    public data: Array = [];\n\n    public loadData(data: Array) {\n        if (!Array.isArray(data)) throw new TypeError(\"data source must be array\");\n        this.data = data;\n    }\n\n    public addData(data: IllustratorDataSource) {\n        this.data.push(data);\n    }\n\n    public removeData(nameOrFn: string | ((ctx: IllustratorDataSource) => boolean)) {\n        if (typeof nameOrFn === \"string\") this.data = this.data.filter((ds) => ds.name === nameOrFn);\n        if (typeof nameOrFn === \"function\") this.data = this.data.filter(nameOrFn);\n        throw new Error(\"invalid parameter\");\n    }\n\n    public get(nameOrFn: string | ((ctx: IllustratorDataSource) => boolean)) {\n        return this.data.find(typeof nameOrFn === \"function\" ? nameOrFn : (fn) => fn.name === nameOrFn);\n    }\n\n    public toJSON() {\n        return this.data;\n    }\n\n    public toArray() {\n        return this.data;\n    }\n\n    public toString(): `DataSource` {\n        return `DataSource`;\n    }\n\n    public clone() {\n        const ds = new DataSource();\n        ds.loadData(this.data.slice());\n        return ds;\n    }\n\n    public *[Symbol.iterator](): IterableIterator {\n        yield* this.data ?? [];\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DrawArcOptions.html":{"url":"interfaces/DrawArcOptions.html","title":"interface - DrawArcOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DrawArcOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/shapes/Line.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            counterclockwise\n                                        \n                                \n                                \n                                        \n                                            endAngle\n                                        \n                                \n                                \n                                        \n                                            radius\n                                        \n                                \n                                \n                                        \n                                            startAngle\n                                        \n                                \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        counterclockwise\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        counterclockwise:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endAngle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        endAngle:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        radius\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        radius:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startAngle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startAngle:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseShapeTool } from \"../base/BaseShapeTool\";\n\nexport interface DrawArcOptions {\n    x: number;\n    y: number;\n    radius: number;\n    startAngle: number;\n    endAngle: number;\n    counterclockwise?: boolean;\n}\n\nexport interface ArcToPoint {\n    x1: number;\n    y1: number;\n    x2: number;\n    y2: number;\n    radius: number;\n}\n\nexport interface QuadraticBezierCurveOptions {\n    controlPointX: number;\n    controlPointY: number;\n    x: number;\n    y: number;\n}\n\nexport interface CubicBezierCurveOptions {\n    firstControlPointX: number;\n    firstControlPointY: number;\n    secondControlPointX: number;\n    secondControlPointY: number;\n    x: number;\n    y: number;\n}\n\nexport class LineTool extends BaseShapeTool {\n    public draw(from: number, to: number) {\n        this.history.push((ctx) => {\n            ctx.lineTo(from, to);\n        });\n\n        return this;\n    }\n\n    public arc(options: DrawArcOptions) {\n        this.history.push((ctx) => {\n            ctx.arc(\n                options.x,\n                options.y,\n                options.radius,\n                options.startAngle,\n                options.endAngle,\n                !!options.counterclockwise\n            );\n        });\n\n        return this;\n    }\n\n    public arcTo(options: ArcToPoint) {\n        this.history.push((ctx) => {\n            ctx.arcTo(options.x1, options.y1, options.x2, options.y2, options.radius);\n        });\n\n        return this;\n    }\n\n    public quadraticBezierCurve(options: QuadraticBezierCurveOptions) {\n        this.history.push((ctx) => {\n            ctx.quadraticCurveTo(options.controlPointX, options.controlPointY, options.x, options.y);\n        });\n\n        return this;\n    }\n\n    public cubicBezierCurve(options: CubicBezierCurveOptions) {\n        this.history.push((ctx) => {\n            ctx.bezierCurveTo(\n                options.firstControlPointX,\n                options.firstControlPointY,\n                options.secondControlPointX,\n                options.secondControlPointY,\n                options.x,\n                options.y\n            );\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DrawEllipseOptions.html":{"url":"interfaces/DrawEllipseOptions.html","title":"interface - DrawEllipseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DrawEllipseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/shapes/Ellipse.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            counterclockwise\n                                        \n                                \n                                \n                                        \n                                            endAngle\n                                        \n                                \n                                \n                                        \n                                            radiusX\n                                        \n                                \n                                \n                                        \n                                            radiusY\n                                        \n                                \n                                \n                                        \n                                            rotation\n                                        \n                                \n                                \n                                        \n                                            startAngle\n                                        \n                                \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        counterclockwise\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        counterclockwise:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endAngle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        endAngle:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        radiusX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        radiusX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        radiusY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        radiusY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rotation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rotation:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startAngle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startAngle:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseShapeTool } from \"../base/BaseShapeTool\";\n\nexport interface DrawEllipseOptions {\n    x: number;\n    y: number;\n    radiusX: number;\n    radiusY: number;\n    rotation: number;\n    startAngle: number;\n    endAngle: number;\n    counterclockwise?: boolean;\n}\n\nexport type DrawCircleOptions = Omit & { radius: number };\n\nexport class EllipseTool extends BaseShapeTool {\n    public draw(options: DrawEllipseOptions) {\n        this.history.push((ctx) => {\n            options.counterclockwise ??= false;\n            ctx.ellipse(\n                options.x,\n                options.y,\n                options.radiusX,\n                options.radiusY,\n                options.rotation,\n                options.startAngle,\n                options.endAngle,\n                options.counterclockwise\n            );\n        });\n\n        return this;\n    }\n\n    public drawCircle(options: DrawCircleOptions) {\n        this.history.push((ctx) => {\n            options.counterclockwise ??= false;\n            ctx.arc(\n                options.x,\n                options.y,\n                options.radius,\n                options.startAngle,\n                options.endAngle,\n                options.counterclockwise\n            );\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EllipseTool.html":{"url":"classes/EllipseTool.html","title":"class - EllipseTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EllipseTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/shapes/Ellipse.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseShapeTool\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                drawCircle\n                            \n                            \n                                    Public\n                                addPoint\n                            \n                            \n                                    Public\n                                clip\n                            \n                            \n                                    Public\n                                fill\n                            \n                            \n                                    Public\n                                move\n                            \n                            \n                                    Public\n                                removePoint\n                            \n                            \n                                    Public\n                                setDashOffset\n                            \n                            \n                                    Public\n                                setFillColor\n                            \n                            \n                                    Public\n                                setLineCap\n                            \n                            \n                                    Public\n                                setLineDash\n                            \n                            \n                                    Public\n                                setLineJoinStyle\n                            \n                            \n                                    Public\n                                setLineWidth\n                            \n                            \n                                    Public\n                                setMiterLimit\n                            \n                            \n                                    Public\n                                setStrokeColor\n                            \n                            \n                                    Public\n                                stroke\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        draw\n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(options: DrawEllipseOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/shapes/Ellipse.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                DrawEllipseOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        drawCircle\n                        \n                    \n                \n            \n            \n                \n                    \n                    drawCircle(options: DrawCircleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/shapes/Ellipse.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                DrawCircleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addPoint\n                        \n                    \n                \n            \n            \n                \n                    \n                    addPoint()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:62\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clip\n                        \n                    \n                \n            \n            \n                \n                    \n                    clip(options?: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:116\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fill\n                        \n                    \n                \n            \n            \n                \n                    \n                    fill(options?: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:86\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        move\n                        \n                    \n                \n            \n            \n                \n                    \n                    move(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:78\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removePoint\n                        \n                    \n                \n            \n            \n                \n                    \n                    removePoint()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:70\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setDashOffset\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDashOffset(offset: number)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setFillColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setFillColor(color: string | CanvasGradient | CanvasPattern)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:6\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                            string | CanvasGradient | CanvasPattern\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineCap\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineCap(lineCapStyle: CanvasLineCap)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lineCapStyle\n                                    \n                                            CanvasLineCap\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineDash\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineDash(segments: number[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:108\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    segments\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineJoinStyle\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineJoinStyle(style: \"round\" | \"bevel\" | \"miter\")\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:46\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    style\n                                    \n                                            \"round\" | \"bevel\" | \"miter\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineWidth\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineWidth(width: number)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:22\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setMiterLimit\n                        \n                    \n                \n            \n            \n                \n                    \n                    setMiterLimit(limit: number)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:54\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setStrokeColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setStrokeColor(color: string | CanvasGradient | CanvasPattern)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:14\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                            string | CanvasGradient | CanvasPattern\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        stroke\n                        \n                    \n                \n            \n            \n                \n                    \n                    stroke(options?: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:100\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BaseShapeTool } from \"../base/BaseShapeTool\";\n\nexport interface DrawEllipseOptions {\n    x: number;\n    y: number;\n    radiusX: number;\n    radiusY: number;\n    rotation: number;\n    startAngle: number;\n    endAngle: number;\n    counterclockwise?: boolean;\n}\n\nexport type DrawCircleOptions = Omit & { radius: number };\n\nexport class EllipseTool extends BaseShapeTool {\n    public draw(options: DrawEllipseOptions) {\n        this.history.push((ctx) => {\n            options.counterclockwise ??= false;\n            ctx.ellipse(\n                options.x,\n                options.y,\n                options.radiusX,\n                options.radiusY,\n                options.rotation,\n                options.startAngle,\n                options.endAngle,\n                options.counterclockwise\n            );\n        });\n\n        return this;\n    }\n\n    public drawCircle(options: DrawCircleOptions) {\n        this.history.push((ctx) => {\n            options.counterclockwise ??= false;\n            ctx.arc(\n                options.x,\n                options.y,\n                options.radius,\n                options.startAngle,\n                options.endAngle,\n                options.counterclockwise\n            );\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EraserOptions.html":{"url":"interfaces/EraserOptions.html","title":"interface - EraserOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EraserOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/eraser/Eraser.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ToolBox } from \"../base/ToolBox\";\n\nexport interface EraserOptions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\nexport class EraserTool extends ToolBox {\n    public rectangular(options: EraserOptions) {\n        this.history.push((ctx) => {\n            ctx.clearRect(options.x, options.y, options.width, options.height);\n        });\n        return this;\n    }\n\n    public circular(options: Omit & { radius?: number }) {\n        this.history.push((ctx) => {\n            ctx.beginPath();\n            ctx.arc(options.x, options.y, options.radius ?? 50, 0, 2 * Math.PI);\n            ctx.clip();\n            ctx.clearRect(0, 0, this.layer.width, this.layer.height);\n            ctx.closePath();\n        });\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EraserTool.html":{"url":"classes/EraserTool.html","title":"class - EraserTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EraserTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/eraser/Eraser.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ToolBox\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                circular\n                            \n                            \n                                    Public\n                                rectangular\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        circular\n                        \n                    \n                \n            \n            \n                \n                    \n                    circular(options)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/eraser/Eraser.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        rectangular\n                        \n                    \n                \n            \n            \n                \n                    \n                    rectangular(options: EraserOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/eraser/Eraser.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                EraserOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ToolBox } from \"../base/ToolBox\";\n\nexport interface EraserOptions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\nexport class EraserTool extends ToolBox {\n    public rectangular(options: EraserOptions) {\n        this.history.push((ctx) => {\n            ctx.clearRect(options.x, options.y, options.width, options.height);\n        });\n        return this;\n    }\n\n    public circular(options: Omit & { radius?: number }) {\n        this.history.push((ctx) => {\n            ctx.beginPath();\n            ctx.arc(options.x, options.y, options.radius ?? 50, 0, 2 * Math.PI);\n            ctx.clip();\n            ctx.clearRect(0, 0, this.layer.width, this.layer.height);\n            ctx.closePath();\n        });\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterTool.html":{"url":"classes/FilterTool.html","title":"class - FilterTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/filters/Filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ToolBox\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                applyFilter\n                            \n                            \n                                    Public\n                                brightness\n                            \n                            \n                                    Public\n                                contrast\n                            \n                            \n                                    Public\n                                dropShadow\n                            \n                            \n                                    Public\n                                gaussianBlur\n                            \n                            \n                                    Public\n                                grayscale\n                            \n                            \n                                    Public\n                                hueRotate\n                            \n                            \n                                    Public\n                                invert\n                            \n                            \n                                    Public\n                                opacity\n                            \n                            \n                                    Public\n                                saturate\n                            \n                            \n                                    Public\n                                sepia\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        applyFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyFilter(filters: FilterArgs[])\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Filter.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filters\n                                    \n                                                FilterArgs[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        brightness\n                        \n                    \n                \n            \n            \n                \n                    \n                    brightness(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Filter.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        contrast\n                        \n                    \n                \n            \n            \n                \n                    \n                    contrast(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Filter.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        dropShadow\n                        \n                    \n                \n            \n            \n                \n                    \n                    dropShadow(x: string | number, y: string | number, radius: number, color: string)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Filter.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    radius\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        gaussianBlur\n                        \n                    \n                \n            \n            \n                \n                    \n                    gaussianBlur(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Filter.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        grayscale\n                        \n                    \n                \n            \n            \n                \n                    \n                    grayscale(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Filter.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        100\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        hueRotate\n                        \n                    \n                \n            \n            \n                \n                    \n                    hueRotate(angle: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Filter.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    angle\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        invert\n                        \n                    \n                \n            \n            \n                \n                    \n                    invert(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Filter.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        100\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        opacity\n                        \n                    \n                \n            \n            \n                \n                    \n                    opacity(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Filter.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        saturate\n                        \n                    \n                \n            \n            \n                \n                    \n                    saturate(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Filter.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        sepia\n                        \n                    \n                \n            \n            \n                \n                    \n                    sepia(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Filter.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        100\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ToolBox } from \"../base/ToolBox\";\n\nexport type FilterArgs = { name: string; value: string | number };\n\nexport class FilterTool extends ToolBox {\n    public applyFilter(filters: FilterArgs[]) {\n        if (!Array.isArray(filters) || !filters.length) return this;\n        this.history.push((ctx) => {\n            ctx.filter = filters.map((m) => `${m.name}(${m.value})`).join(\" \");\n        });\n        return this;\n    }\n\n    public gaussianBlur(amount = 1) {\n        if (typeof amount !== \"number\") throw new TypeError(\"gaussian blur amount must be a number\");\n        return this.applyFilter([\n            {\n                name: \"blur\",\n                value: amount\n            }\n        ]);\n    }\n\n    public brightness(amount: number) {\n        if (typeof amount !== \"number\") throw new TypeError(\"brightness amount must be a number\");\n        return this.applyFilter([\n            {\n                name: \"brightness\",\n                value: `${amount}%`\n            }\n        ]);\n    }\n\n    public contrast(amount: number) {\n        if (typeof amount !== \"number\") throw new TypeError(\"contrast amount must be a number\");\n        return this.applyFilter([\n            {\n                name: \"contrast\",\n                value: `${amount}%`\n            }\n        ]);\n    }\n\n    public dropShadow(x: string | number, y: string | number, radius: number, color: string) {\n        return this.applyFilter([\n            {\n                name: \"drop-shadow\",\n                value: `${x} ${y} ${radius} ${color}`\n            }\n        ]);\n    }\n\n    public grayscale(amount = 100) {\n        if (typeof amount !== \"number\") throw new TypeError(\"grayscale amount must be a number\");\n        return this.applyFilter([\n            {\n                name: \"grayscale\",\n                value: `${amount}%`\n            }\n        ]);\n    }\n\n    public hueRotate(angle: number) {\n        if (typeof angle !== \"number\") throw new TypeError(\"hue rotate angle must be a number\");\n        return this.applyFilter([\n            {\n                name: \"hue-rotate\",\n                value: `${angle}deg`\n            }\n        ]);\n    }\n\n    public invert(amount = 100) {\n        if (typeof amount !== \"number\") throw new TypeError(\"invert amount must be a number\");\n        return this.applyFilter([\n            {\n                name: \"invert\",\n                value: `${amount}%`\n            }\n        ]);\n    }\n\n    public opacity(amount: number) {\n        if (typeof amount !== \"number\") throw new TypeError(\"opacity amount must be a number\");\n        return this.applyFilter([\n            {\n                name: \"opacity\",\n                value: `${amount}%`\n            }\n        ]);\n    }\n\n    public saturate(amount: number) {\n        if (typeof amount !== \"number\") throw new TypeError(\"saturation amount must be a number\");\n        return this.applyFilter([\n            {\n                name: \"saturate\",\n                value: `${amount}%`\n            }\n        ]);\n    }\n\n    public sepia(amount = 100) {\n        if (typeof amount !== \"number\") throw new TypeError(\"sepia amount must be a number\");\n        return this.applyFilter([\n            {\n                name: \"sepia\",\n                value: `${amount}%`\n            }\n        ]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FrameLayer.html":{"url":"interfaces/FrameLayer.html","title":"interface - FrameLayer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FrameLayer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/animation/IllustratorAnimation.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            duration\n                                        \n                                \n                                \n                                        \n                                            frame\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        duration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        duration:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        frame\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        frame:         Layer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Layer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Illustrator } from \"../illustrator/Illustrator\";\nimport { Layer } from \"../layer/Layer\";\nimport { GifEncoder, EncoderOptions, DisposalCode } from \"@skyra/gifenc\";\n\nexport interface FrameLayer {\n    frame: Layer;\n    duration?: number;\n}\n\nexport class IllustratorAnimation {\n    #frames: Array> | null = null;\n    #encoderConfig: EncoderOptions = {};\n\n    public constructor(public readonly illustrator: Illustrator) {}\n\n    public clearFrames() {\n        this.#frames = null;\n    }\n\n    public addFrame(layer: FrameLayer): IllustratorAnimation;\n    public addFrame(layer: Layer, duration?: number): IllustratorAnimation;\n    public addFrame(layer: Layer | FrameLayer, duration?: number): IllustratorAnimation {\n        if (!arguments.length || layer == null) throw new Error(\"frame args required\");\n        let frame: Required | null = null;\n        if (layer instanceof Layer)\n            frame = {\n                frame: layer,\n                duration: duration ?? 1000\n            };\n\n        if (typeof layer === \"object\")\n            frame = {\n                duration: (layer as FrameLayer).duration ?? 1000,\n                frame: (layer as FrameLayer).frame\n            };\n\n        if (!frame) throw new Error(\"missing frame data\");\n\n        return this.addFrames([frame]);\n    }\n\n    public addFrames(layers: Array>) {\n        if (!layers.length) throw new Error(\"Frames required\");\n        if (!layers.every((l) => l.frame instanceof Layer)) throw new TypeError(\"frame must be a Layer instance\");\n        this.#addFrame(layers);\n        return this;\n    }\n\n    public setFrameRate(frameRate: number) {\n        if (typeof frameRate !== \"number\") throw new TypeError(\"frame rate value must be a number\");\n        this.#encoderConfig.framerate = frameRate;\n        return this;\n    }\n\n    public setTransparency(transparent: number) {\n        if (typeof transparent !== \"number\") throw new TypeError(\"transparency value must be a number\");\n        this.#encoderConfig.transparent = transparent;\n        return this;\n    }\n\n    public setFrameDelay(delay: number) {\n        if (typeof delay !== \"number\") throw new TypeError(\"delay value must be a number\");\n        this.#encoderConfig.delay = delay;\n        return this;\n    }\n\n    public setDisposalCode(code: DisposalCode) {\n        if (typeof code !== \"number\") throw new TypeError(\"disposal code value must be a number\");\n        this.#encoderConfig.dispose = code;\n        return this;\n    }\n\n    public setQuality(quality: number) {\n        if (typeof quality !== \"number\") throw new TypeError(\"quality value must be a number\");\n        this.#encoderConfig.quality = quality;\n        return this;\n    }\n\n    public setRepeat(repeats: number) {\n        if (typeof repeats !== \"number\") throw new TypeError(\"repeats value must be a number\");\n        this.#encoderConfig.repeat = repeats;\n        return this;\n    }\n\n    public async createAnimation() {\n        if (!this.#frames?.length) throw new Error(\"missing animation frames data\");\n        const encoder = new GifEncoder(this.illustrator.width, this.illustrator.height);\n        const frames = await this.#renderEachLayer();\n\n        const gifStream = encoder.createReadStream();\n\n        if (this.#encoderConfig.dispose != null) encoder.setDispose(this.#encoderConfig.dispose);\n        if (this.#encoderConfig.framerate != null) encoder.setFramerate(this.#encoderConfig.framerate);\n        if (this.#encoderConfig.quality != null) encoder.setQuality(this.#encoderConfig.quality);\n        if (this.#encoderConfig.repeat != null) encoder.setRepeat(this.#encoderConfig.repeat);\n        if (this.#encoderConfig.transparent != null) encoder.setTransparent(this.#encoderConfig.transparent);\n\n        encoder.start();\n        for (const frame of frames) {\n            encoder.setDelay(frame.duration ?? this.#encoderConfig.delay);\n            encoder.addFrame(frame.ctx.getImageData(0, 0, frame.ctx.canvas.width, frame.ctx.canvas.height).data);\n        }\n        encoder.finish();\n\n        return gifStream;\n    }\n\n    async #renderEachLayer() {\n        if (!this.#frames) return [];\n\n        const canvasArray = await Promise.all(\n            this.#frames\n                .filter((frame) => !frame.frame.hidden)\n                .map(async (m) => ({\n                    canvas: await m.frame.render(),\n                    duration: m.duration\n                }))\n        );\n\n        return canvasArray.map((m) => ({\n            duration: m.duration,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            ctx: m.canvas!.getContext(\"2d\")\n        }));\n    }\n\n    #addFrame(frames: Array>) {\n        if (!Array.isArray(this.#frames)) this.#frames = [];\n        this.#frames.push(...frames);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Illustrator.html":{"url":"classes/Illustrator.html","title":"class - Illustrator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Illustrator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/illustrator/Illustrator.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                animation\n                            \n                            \n                                    Public\n                                colors\n                            \n                            \n                                    Public\n                                    Readonly\n                                height\n                            \n                            \n                                    Public\n                                image\n                            \n                            \n                                    Public\n                                layers\n                            \n                            \n                                    Public\n                                    Readonly\n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                export\n                            \n                            \n                                    Public\n                                    Async\n                                render\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    backgroundLayer\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(width: number, height: number)\n                    \n                \n                        \n                            \n                                Defined in src/illustrator/Illustrator.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        width\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        height\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        animation\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new IllustratorAnimation(this)\n                    \n                \n                    \n                        \n                                Defined in src/illustrator/Illustrator.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        colors\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Colors(this)\n                    \n                \n                    \n                        \n                                Defined in src/illustrator/Illustrator.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/illustrator/Illustrator.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new IllustratorImageManager()\n                    \n                \n                    \n                        \n                                Defined in src/illustrator/Illustrator.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        layers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new LayerManager(this)\n                    \n                \n                    \n                        \n                                Defined in src/illustrator/Illustrator.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        width\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/illustrator/Illustrator.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        export\n                        \n                    \n                \n            \n            \n                \n                    \n                    export(config: IllustratorExportConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/illustrator/Illustrator.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                IllustratorExportConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Defined in src/illustrator/Illustrator.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        backgroundLayer\n                    \n                \n\n                \n                    \n                        getbackgroundLayer()\n                    \n                \n                            \n                                \n                                    Defined in src/illustrator/Illustrator.ts:28\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { AvifConfig, createCanvas } from \"@napi-rs/canvas\";\nimport { IllustratorAnimation } from \"../animation/IllustratorAnimation\";\nimport { Colors } from \"../colors/Colors\";\nimport { IllustratorImageManager } from \"../image/IllustratorImageManager\";\nimport { Layer } from \"../layer/Layer\";\nimport { LayerManager } from \"../layer/LayerManager\";\n\nexport interface IllustratorExportConfig {\n    encoding?: \"png\" | \"avif\" | \"jpeg\" | \"webp\";\n    avifConfig?: AvifConfig;\n    quality?: number;\n}\n\nexport class Illustrator {\n    public layers = new LayerManager(this);\n    public animation = new IllustratorAnimation(this);\n    public colors = new Colors(this);\n    public image = new IllustratorImageManager();\n\n    public constructor(public readonly width: number, public readonly height: number) {\n        this.layers\n            .createLayer({\n                name: \"background\"\n            })\n            .lock();\n    }\n\n    public get backgroundLayer() {\n        return this.layers.getLayer(\"background\") as Layer;\n    }\n\n    public async render() {\n        const canvas = createCanvas(this.width, this.height);\n        const ctx = canvas.getContext(\"2d\");\n\n        // render background layer first\n        // eslint-disable-next-line\n        const data = (await this.backgroundLayer.render())!;\n        // draw rendered layer on main canvas\n        if (data != null)\n            ctx.drawImage(\n                data,\n                this.backgroundLayer.coordinates.x,\n                this.backgroundLayer.coordinates.y,\n                this.backgroundLayer.width,\n                this.backgroundLayer.height\n            );\n\n        // render from top to bottom\n        const layers = this.layers.getAllLayers(true);\n\n        for (const layerConfig of layers) {\n            // skip background layer\n            if (layerConfig.name === \"background\") continue;\n            // don't render if the layer is hidden\n            if (layerConfig.layer.hidden) continue;\n            // eslint-disable-next-line\n            const data = (await layerConfig.layer.render())!;\n            if (data == null) continue;\n            // draw rendered layer on main canvas\n            ctx.drawImage(\n                data,\n                layerConfig.layer.coordinates.x,\n                layerConfig.layer.coordinates.y,\n                layerConfig.layer.width,\n                layerConfig.layer.height\n            );\n        }\n\n        return { canvas, ctx };\n    }\n\n    public async export(config: IllustratorExportConfig = {}) {\n        const output = await this.render();\n\n        if (config.encoding == null || config.encoding === \"png\") {\n            return output.canvas.encode(\"png\");\n        }\n\n        if (config.encoding === \"avif\") {\n            return output.canvas.encode(\"avif\", config.avifConfig);\n        }\n\n        if (config.encoding === \"jpeg\" || config.encoding === \"webp\") {\n            return output.canvas.encode(config.encoding, config.quality);\n        }\n\n        throw new Error(`unsupported export encoding \"${config.encoding}\"`);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IllustratorAnimation.html":{"url":"classes/IllustratorAnimation.html","title":"class - IllustratorAnimation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IllustratorAnimation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/animation/IllustratorAnimation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                illustrator\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addFrame\n                            \n                            \n                                    Public\n                                addFrame\n                            \n                            \n                                    Public\n                                addFrame\n                            \n                            \n                                    Public\n                                addFrames\n                            \n                            \n                                    Public\n                                clearFrames\n                            \n                            \n                                    Public\n                                    Async\n                                createAnimation\n                            \n                            \n                                    Public\n                                setDisposalCode\n                            \n                            \n                                    Public\n                                setFrameDelay\n                            \n                            \n                                    Public\n                                setFrameRate\n                            \n                            \n                                    Public\n                                setQuality\n                            \n                            \n                                    Public\n                                setRepeat\n                            \n                            \n                                    Public\n                                setTransparency\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(illustrator: Illustrator)\n                    \n                \n                        \n                            \n                                Defined in src/animation/IllustratorAnimation.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        illustrator\n                                                  \n                                                        \n                                                                        Illustrator\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        illustrator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Illustrator\n\n                    \n                \n                    \n                        \n                                Defined in src/animation/IllustratorAnimation.ts:14\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addFrame\n                        \n                    \n                \n            \n            \n                \n                    \n                    addFrame(layer: FrameLayer)\n                \n            \n\n\n            \n                \n                    Defined in src/animation/IllustratorAnimation.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                FrameLayer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IllustratorAnimation\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addFrame\n                        \n                    \n                \n            \n            \n                \n                    \n                    addFrame(layer: Layer, duration?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/animation/IllustratorAnimation.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                Layer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    duration\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IllustratorAnimation\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addFrame\n                        \n                    \n                \n            \n            \n                \n                    \n                    addFrame(layer: Layer | FrameLayer, duration?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/animation/IllustratorAnimation.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                Layer | FrameLayer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    duration\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IllustratorAnimation\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addFrames\n                        \n                    \n                \n            \n            \n                \n                    \n                    addFrames(layers: Array>)\n                \n            \n\n\n            \n                \n                    Defined in src/animation/IllustratorAnimation.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layers\n                                    \n                                                Array>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clearFrames\n                        \n                    \n                \n            \n            \n                \n                    \n                    clearFrames()\n                \n            \n\n\n            \n                \n                    Defined in src/animation/IllustratorAnimation.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createAnimation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAnimation()\n                \n            \n\n\n            \n                \n                    Defined in src/animation/IllustratorAnimation.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setDisposalCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDisposalCode(code: DisposalCode)\n                \n            \n\n\n            \n                \n                    Defined in src/animation/IllustratorAnimation.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                            DisposalCode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setFrameDelay\n                        \n                    \n                \n            \n            \n                \n                    \n                    setFrameDelay(delay: number)\n                \n            \n\n\n            \n                \n                    Defined in src/animation/IllustratorAnimation.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    delay\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setFrameRate\n                        \n                    \n                \n            \n            \n                \n                    \n                    setFrameRate(frameRate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/animation/IllustratorAnimation.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    frameRate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setQuality\n                        \n                    \n                \n            \n            \n                \n                    \n                    setQuality(quality: number)\n                \n            \n\n\n            \n                \n                    Defined in src/animation/IllustratorAnimation.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    quality\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setRepeat\n                        \n                    \n                \n            \n            \n                \n                    \n                    setRepeat(repeats: number)\n                \n            \n\n\n            \n                \n                    Defined in src/animation/IllustratorAnimation.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repeats\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setTransparency\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTransparency(transparent: number)\n                \n            \n\n\n            \n                \n                    Defined in src/animation/IllustratorAnimation.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transparent\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Illustrator } from \"../illustrator/Illustrator\";\nimport { Layer } from \"../layer/Layer\";\nimport { GifEncoder, EncoderOptions, DisposalCode } from \"@skyra/gifenc\";\n\nexport interface FrameLayer {\n    frame: Layer;\n    duration?: number;\n}\n\nexport class IllustratorAnimation {\n    #frames: Array> | null = null;\n    #encoderConfig: EncoderOptions = {};\n\n    public constructor(public readonly illustrator: Illustrator) {}\n\n    public clearFrames() {\n        this.#frames = null;\n    }\n\n    public addFrame(layer: FrameLayer): IllustratorAnimation;\n    public addFrame(layer: Layer, duration?: number): IllustratorAnimation;\n    public addFrame(layer: Layer | FrameLayer, duration?: number): IllustratorAnimation {\n        if (!arguments.length || layer == null) throw new Error(\"frame args required\");\n        let frame: Required | null = null;\n        if (layer instanceof Layer)\n            frame = {\n                frame: layer,\n                duration: duration ?? 1000\n            };\n\n        if (typeof layer === \"object\")\n            frame = {\n                duration: (layer as FrameLayer).duration ?? 1000,\n                frame: (layer as FrameLayer).frame\n            };\n\n        if (!frame) throw new Error(\"missing frame data\");\n\n        return this.addFrames([frame]);\n    }\n\n    public addFrames(layers: Array>) {\n        if (!layers.length) throw new Error(\"Frames required\");\n        if (!layers.every((l) => l.frame instanceof Layer)) throw new TypeError(\"frame must be a Layer instance\");\n        this.#addFrame(layers);\n        return this;\n    }\n\n    public setFrameRate(frameRate: number) {\n        if (typeof frameRate !== \"number\") throw new TypeError(\"frame rate value must be a number\");\n        this.#encoderConfig.framerate = frameRate;\n        return this;\n    }\n\n    public setTransparency(transparent: number) {\n        if (typeof transparent !== \"number\") throw new TypeError(\"transparency value must be a number\");\n        this.#encoderConfig.transparent = transparent;\n        return this;\n    }\n\n    public setFrameDelay(delay: number) {\n        if (typeof delay !== \"number\") throw new TypeError(\"delay value must be a number\");\n        this.#encoderConfig.delay = delay;\n        return this;\n    }\n\n    public setDisposalCode(code: DisposalCode) {\n        if (typeof code !== \"number\") throw new TypeError(\"disposal code value must be a number\");\n        this.#encoderConfig.dispose = code;\n        return this;\n    }\n\n    public setQuality(quality: number) {\n        if (typeof quality !== \"number\") throw new TypeError(\"quality value must be a number\");\n        this.#encoderConfig.quality = quality;\n        return this;\n    }\n\n    public setRepeat(repeats: number) {\n        if (typeof repeats !== \"number\") throw new TypeError(\"repeats value must be a number\");\n        this.#encoderConfig.repeat = repeats;\n        return this;\n    }\n\n    public async createAnimation() {\n        if (!this.#frames?.length) throw new Error(\"missing animation frames data\");\n        const encoder = new GifEncoder(this.illustrator.width, this.illustrator.height);\n        const frames = await this.#renderEachLayer();\n\n        const gifStream = encoder.createReadStream();\n\n        if (this.#encoderConfig.dispose != null) encoder.setDispose(this.#encoderConfig.dispose);\n        if (this.#encoderConfig.framerate != null) encoder.setFramerate(this.#encoderConfig.framerate);\n        if (this.#encoderConfig.quality != null) encoder.setQuality(this.#encoderConfig.quality);\n        if (this.#encoderConfig.repeat != null) encoder.setRepeat(this.#encoderConfig.repeat);\n        if (this.#encoderConfig.transparent != null) encoder.setTransparent(this.#encoderConfig.transparent);\n\n        encoder.start();\n        for (const frame of frames) {\n            encoder.setDelay(frame.duration ?? this.#encoderConfig.delay);\n            encoder.addFrame(frame.ctx.getImageData(0, 0, frame.ctx.canvas.width, frame.ctx.canvas.height).data);\n        }\n        encoder.finish();\n\n        return gifStream;\n    }\n\n    async #renderEachLayer() {\n        if (!this.#frames) return [];\n\n        const canvasArray = await Promise.all(\n            this.#frames\n                .filter((frame) => !frame.frame.hidden)\n                .map(async (m) => ({\n                    canvas: await m.frame.render(),\n                    duration: m.duration\n                }))\n        );\n\n        return canvasArray.map((m) => ({\n            duration: m.duration,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            ctx: m.canvas!.getContext(\"2d\")\n        }));\n    }\n\n    #addFrame(frames: Array>) {\n        if (!Array.isArray(this.#frames)) this.#frames = [];\n        this.#frames.push(...frames);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IllustratorColor.html":{"url":"classes/IllustratorColor.html","title":"class - IllustratorColor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IllustratorColor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/colors/IllustratorColor.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                    Readonly\n                                swatches\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hex\n                            \n                            \n                                    Public\n                                int\n                            \n                            \n                                    Public\n                                rgb\n                            \n                            \n                                    Public\n                                rgba\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(swatches: ColorSwatches, data: ColorConfig)\n                    \n                \n                        \n                            \n                                Defined in src/colors/IllustratorColor.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        swatches\n                                                  \n                                                        \n                                                                        ColorSwatches\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        ColorConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ColorConfig\n\n                    \n                \n                    \n                        \n                                Defined in src/colors/IllustratorColor.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        swatches\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ColorSwatches\n\n                    \n                \n                    \n                        \n                                Defined in src/colors/IllustratorColor.ts:13\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        hex\n                        \n                    \n                \n            \n            \n                \n                    \n                    hex()\n                \n            \n\n\n            \n                \n                    Defined in src/colors/IllustratorColor.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        int\n                        \n                    \n                \n            \n            \n                \n                    \n                    int()\n                \n            \n\n\n            \n                \n                    Defined in src/colors/IllustratorColor.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        rgb\n                        \n                    \n                \n            \n            \n                \n                    \n                    rgb()\n                \n            \n\n\n            \n                \n                    Defined in src/colors/IllustratorColor.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        rgba\n                        \n                    \n                \n            \n            \n                \n                    \n                    rgba()\n                \n            \n\n\n            \n                \n                    Defined in src/colors/IllustratorColor.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in src/colors/IllustratorColor.ts:65\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ColorConfig, ColorSwatches } from \"./ColorSwatches\";\n\nexport interface IllustratorColorData {\n    hex: `#${string}`;\n    int: number;\n    rgba: number[];\n    cmyk: number[];\n    hsla: number[];\n}\n\nexport class IllustratorColor {\n    #data!: IllustratorColorData;\n    public constructor(public readonly swatches: ColorSwatches, public readonly data: ColorConfig) {\n        this.#parse(data.color);\n    }\n\n    #parse(color: typeof this.data.color) {\n        void color;\n        throw new Error(\"Not implemented\");\n        // if (typeof color === \"string\") {\n        //     if ([\"rgb(\", \"rgba(\", \"cmyk(\", \"hsl(\", \"hsla(\"].some(pattern => color.indexOf(pattern) === 0)) {\n        //         if (color.startsWith(\"rgb(\") || color.startsWith(\"rgba(\")) {\n        //             const points = color.split(\",\").map(m => {\n        //                 let val = m.trim();\n        //                 if (val.includes(\"%\")) val = `0.${val.replace(\"%\", \"\")}`;\n        //                 return parseFloat(val);\n        //             }).slice(0, 4);\n\n        //             this.#data.rgba = points;\n        //             this.#data.hex = `#${(points[0] \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IllustratorColorData.html":{"url":"interfaces/IllustratorColorData.html","title":"interface - IllustratorColorData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IllustratorColorData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/colors/IllustratorColor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cmyk\n                                        \n                                \n                                \n                                        \n                                            hex\n                                        \n                                \n                                \n                                        \n                                            hsla\n                                        \n                                \n                                \n                                        \n                                            int\n                                        \n                                \n                                \n                                        \n                                            rgba\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cmyk\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cmyk:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hex:     template literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     template literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hsla\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hsla:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        int\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        int:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rgba\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rgba:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ColorConfig, ColorSwatches } from \"./ColorSwatches\";\n\nexport interface IllustratorColorData {\n    hex: `#${string}`;\n    int: number;\n    rgba: number[];\n    cmyk: number[];\n    hsla: number[];\n}\n\nexport class IllustratorColor {\n    #data!: IllustratorColorData;\n    public constructor(public readonly swatches: ColorSwatches, public readonly data: ColorConfig) {\n        this.#parse(data.color);\n    }\n\n    #parse(color: typeof this.data.color) {\n        void color;\n        throw new Error(\"Not implemented\");\n        // if (typeof color === \"string\") {\n        //     if ([\"rgb(\", \"rgba(\", \"cmyk(\", \"hsl(\", \"hsla(\"].some(pattern => color.indexOf(pattern) === 0)) {\n        //         if (color.startsWith(\"rgb(\") || color.startsWith(\"rgba(\")) {\n        //             const points = color.split(\",\").map(m => {\n        //                 let val = m.trim();\n        //                 if (val.includes(\"%\")) val = `0.${val.replace(\"%\", \"\")}`;\n        //                 return parseFloat(val);\n        //             }).slice(0, 4);\n\n        //             this.#data.rgba = points;\n        //             this.#data.hex = `#${(points[0] \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IllustratorDataSource.html":{"url":"interfaces/IllustratorDataSource.html","title":"interface - IllustratorDataSource","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IllustratorDataSource\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/DataSource.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         TextDataSource | ImageDataSource\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TextDataSource | ImageDataSource\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"text\" | \"image\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"text\" | \"image\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IllustratorImageSource } from \"../image/ImageLoader\";\n\nexport interface IllustratorDataSource {\n    name: string;\n    type: \"text\" | \"image\";\n    data: TextDataSource | ImageDataSource;\n}\n\nexport interface TextDataSource {\n    value: string;\n    config: {\n        x: number;\n        y: number;\n        maxWidth?: number;\n        font: string;\n        fontPath?: string;\n    };\n}\n\n// TODO: template api\nexport interface ImageDataSource {\n    value: IllustratorImageSource;\n    config: {\n        x: number;\n        y: number;\n        width: number;\n        height: number;\n        radius?: number;\n    };\n}\n\nexport class DataSource {\n    public data: Array = [];\n\n    public loadData(data: Array) {\n        if (!Array.isArray(data)) throw new TypeError(\"data source must be array\");\n        this.data = data;\n    }\n\n    public addData(data: IllustratorDataSource) {\n        this.data.push(data);\n    }\n\n    public removeData(nameOrFn: string | ((ctx: IllustratorDataSource) => boolean)) {\n        if (typeof nameOrFn === \"string\") this.data = this.data.filter((ds) => ds.name === nameOrFn);\n        if (typeof nameOrFn === \"function\") this.data = this.data.filter(nameOrFn);\n        throw new Error(\"invalid parameter\");\n    }\n\n    public get(nameOrFn: string | ((ctx: IllustratorDataSource) => boolean)) {\n        return this.data.find(typeof nameOrFn === \"function\" ? nameOrFn : (fn) => fn.name === nameOrFn);\n    }\n\n    public toJSON() {\n        return this.data;\n    }\n\n    public toArray() {\n        return this.data;\n    }\n\n    public toString(): `DataSource` {\n        return `DataSource`;\n    }\n\n    public clone() {\n        const ds = new DataSource();\n        ds.loadData(this.data.slice());\n        return ds;\n    }\n\n    public *[Symbol.iterator](): IterableIterator {\n        yield* this.data ?? [];\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IllustratorExportConfig.html":{"url":"interfaces/IllustratorExportConfig.html","title":"interface - IllustratorExportConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IllustratorExportConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/illustrator/Illustrator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            avifConfig\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            encoding\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            quality\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        avifConfig\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        avifConfig:     AvifConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AvifConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        encoding\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        encoding:     \"png\" | \"avif\" | \"jpeg\" | \"webp\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"png\" | \"avif\" | \"jpeg\" | \"webp\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        quality\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        quality:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AvifConfig, createCanvas } from \"@napi-rs/canvas\";\nimport { IllustratorAnimation } from \"../animation/IllustratorAnimation\";\nimport { Colors } from \"../colors/Colors\";\nimport { IllustratorImageManager } from \"../image/IllustratorImageManager\";\nimport { Layer } from \"../layer/Layer\";\nimport { LayerManager } from \"../layer/LayerManager\";\n\nexport interface IllustratorExportConfig {\n    encoding?: \"png\" | \"avif\" | \"jpeg\" | \"webp\";\n    avifConfig?: AvifConfig;\n    quality?: number;\n}\n\nexport class Illustrator {\n    public layers = new LayerManager(this);\n    public animation = new IllustratorAnimation(this);\n    public colors = new Colors(this);\n    public image = new IllustratorImageManager();\n\n    public constructor(public readonly width: number, public readonly height: number) {\n        this.layers\n            .createLayer({\n                name: \"background\"\n            })\n            .lock();\n    }\n\n    public get backgroundLayer() {\n        return this.layers.getLayer(\"background\") as Layer;\n    }\n\n    public async render() {\n        const canvas = createCanvas(this.width, this.height);\n        const ctx = canvas.getContext(\"2d\");\n\n        // render background layer first\n        // eslint-disable-next-line\n        const data = (await this.backgroundLayer.render())!;\n        // draw rendered layer on main canvas\n        if (data != null)\n            ctx.drawImage(\n                data,\n                this.backgroundLayer.coordinates.x,\n                this.backgroundLayer.coordinates.y,\n                this.backgroundLayer.width,\n                this.backgroundLayer.height\n            );\n\n        // render from top to bottom\n        const layers = this.layers.getAllLayers(true);\n\n        for (const layerConfig of layers) {\n            // skip background layer\n            if (layerConfig.name === \"background\") continue;\n            // don't render if the layer is hidden\n            if (layerConfig.layer.hidden) continue;\n            // eslint-disable-next-line\n            const data = (await layerConfig.layer.render())!;\n            if (data == null) continue;\n            // draw rendered layer on main canvas\n            ctx.drawImage(\n                data,\n                layerConfig.layer.coordinates.x,\n                layerConfig.layer.coordinates.y,\n                layerConfig.layer.width,\n                layerConfig.layer.height\n            );\n        }\n\n        return { canvas, ctx };\n    }\n\n    public async export(config: IllustratorExportConfig = {}) {\n        const output = await this.render();\n\n        if (config.encoding == null || config.encoding === \"png\") {\n            return output.canvas.encode(\"png\");\n        }\n\n        if (config.encoding === \"avif\") {\n            return output.canvas.encode(\"avif\", config.avifConfig);\n        }\n\n        if (config.encoding === \"jpeg\" || config.encoding === \"webp\") {\n            return output.canvas.encode(config.encoding, config.quality);\n        }\n\n        throw new Error(`unsupported export encoding \"${config.encoding}\"`);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IllustratorImage.html":{"url":"classes/IllustratorImage.html","title":"class - IllustratorImage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IllustratorImage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/image/IllustratorImage.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Transformer\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Async\n                                fromImageData\n                            \n                            \n                                    Static\n                                fromImageDataSync\n                            \n                            \n                                    Public\n                                    Async\n                                toImage\n                            \n                            \n                                    Public\n                                toImageSync\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    source\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(_data: Buffer)\n                    \n                \n                        \n                            \n                                Defined in src/image/IllustratorImage.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _data\n                                                  \n                                                        \n                                                                    Buffer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        fromImageData\n                        \n                    \n                \n            \n            \n                \n                    \n                    fromImageData(data: ImageData | RawImageData)\n                \n            \n\n\n            \n                \n                    Defined in src/image/IllustratorImage.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ImageData | RawImageData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        fromImageDataSync\n                        \n                    \n                \n            \n            \n                \n                    \n                    fromImageDataSync(data: ImageData | RawImageData)\n                \n            \n\n\n            \n                \n                    Defined in src/image/IllustratorImage.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ImageData | RawImageData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IllustratorImage\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        toImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    toImage()\n                \n            \n\n\n            \n                \n                    Defined in src/image/IllustratorImage.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toImageSync\n                        \n                    \n                \n            \n            \n                \n                    \n                    toImageSync()\n                \n            \n\n\n            \n                \n                    Defined in src/image/IllustratorImage.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        source\n                    \n                \n\n                \n                    \n                        getsource()\n                    \n                \n                            \n                                \n                                    Defined in src/image/IllustratorImage.ts:36\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n    Transformer,\n    Orientation,\n    AvifConfig,\n    ChromaSubsampling,\n    CompressionType,\n    JsColorType,\n    FilterType,\n    ResizeFilterType,\n    Metadata\n} from \"@napi-rs/image\";\nimport { ImageLoader } from \"./ImageLoader\";\nimport { ImageData } from \"@napi-rs/canvas\";\n\nexport { AvifConfig, Metadata };\n\nexport type IllustratorImageData = ImageData & { colorSpace: PredefinedColorSpace };\n\n// prettier-ignore\nexport const IllustratorImageEnums = {\n    // @ts-expect-error\n    Orientation, ChromaSubsampling, CompressionType, JsColorType, FilterType, ResizeFilterType\n};\n\nexport interface RawImageData {\n    data: Uint8ClampedArray | Buffer;\n    width: number;\n    height: number;\n}\n\nexport class IllustratorImage extends Transformer {\n    public constructor(private readonly _data: Buffer) {\n        super(_data);\n    }\n\n    public get source() {\n        return this._data;\n    }\n\n    public async toImage() {\n        const png = await super.png();\n        return ImageLoader.createImage(png);\n    }\n\n    public toImageSync() {\n        const png = super.pngSync();\n        return ImageLoader.createImage(png);\n    }\n\n    public static async fromImageData(data: ImageData | RawImageData) {\n        const transformer = super.fromRgbaPixels(data.data, data.width, data.height);\n        const iImage = new IllustratorImage(await transformer.rawPixels());\n        return iImage;\n    }\n\n    public static fromImageDataSync(data: ImageData | RawImageData) {\n        const transformer = super.fromRgbaPixels(data.data, data.width, data.height);\n        const iImage = new IllustratorImage(transformer.rawPixelsSync());\n        return iImage;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IllustratorImageManager.html":{"url":"classes/IllustratorImageManager.html","title":"class - IllustratorImageManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IllustratorImageManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/image/IllustratorImageManager.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                compressJPEG\n                            \n                            \n                                    Public\n                                compressJPEGSync\n                            \n                            \n                                    Public\n                                    Async\n                                compressPNGLossless\n                            \n                            \n                                    Public\n                                compressPNGLosslessSync\n                            \n                            \n                                    Public\n                                    Async\n                                load\n                            \n                            \n                                    Public\n                                    Async\n                                loadImage\n                            \n                            \n                                    Public\n                                    Async\n                                PNGQuantize\n                            \n                            \n                                    Public\n                                PNGQuantizeSync\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        compressJPEG\n                        \n                    \n                \n            \n            \n                \n                    \n                    compressJPEG(src: Buffer, options?: JpegCompressOptions | null)\n                \n            \n\n\n            \n                \n                    Defined in src/image/IllustratorImageManager.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    src\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            JpegCompressOptions | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        compressJPEGSync\n                        \n                    \n                \n            \n            \n                \n                    \n                    compressJPEGSync(src: Buffer, options?: JpegCompressOptions | null)\n                \n            \n\n\n            \n                \n                    Defined in src/image/IllustratorImageManager.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    src\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            JpegCompressOptions | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        compressPNGLossless\n                        \n                    \n                \n            \n            \n                \n                    \n                    compressPNGLossless(src: Buffer, options?: PNGLosslessOptions | null)\n                \n            \n\n\n            \n                \n                    Defined in src/image/IllustratorImageManager.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    src\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            PNGLosslessOptions | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        compressPNGLosslessSync\n                        \n                    \n                \n            \n            \n                \n                    \n                    compressPNGLosslessSync(src: Buffer, options?: PNGLosslessOptions | null)\n                \n            \n\n\n            \n                \n                    Defined in src/image/IllustratorImageManager.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    src\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            PNGLosslessOptions | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        load\n                        \n                    \n                \n            \n            \n                \n                    \n                    load(src: IllustratorImageSource)\n                \n            \n\n\n            \n                \n                    Defined in src/image/IllustratorImageManager.ts:20\n                \n            \n\n\n            \n                \n                    Loads image source data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    src\n                                    \n                                                IllustratorImageSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The image source\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        loadImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadImage(src: IllustratorImageSource)\n                \n            \n\n\n            \n                \n                    Defined in src/image/IllustratorImageManager.ts:28\n                \n            \n\n\n            \n                \n                    Loads IllustratorImage from the given source\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    src\n                                    \n                                                IllustratorImageSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The source to load\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        PNGQuantize\n                        \n                    \n                \n            \n            \n                \n                    \n                    PNGQuantize(src: Buffer, options?: PngQuantOptions | null)\n                \n            \n\n\n            \n                \n                    Defined in src/image/IllustratorImageManager.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    src\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            PngQuantOptions | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        PNGQuantizeSync\n                        \n                    \n                \n            \n            \n                \n                    \n                    PNGQuantizeSync(src: Buffer, options?: PngQuantOptions | null)\n                \n            \n\n\n            \n                \n                    Defined in src/image/IllustratorImageManager.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    src\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            PngQuantOptions | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IllustratorImageSource, ImageLoader } from \"./ImageLoader\";\nimport { IllustratorImage } from \"./IllustratorImage\";\nimport {\n    compressJpeg,\n    compressJpegSync,\n    JpegCompressOptions,\n    losslessCompressPng,\n    losslessCompressPngSync,\n    PNGLosslessOptions,\n    pngQuantize,\n    pngQuantizeSync,\n    PngQuantOptions\n} from \"@napi-rs/image\";\n\nexport class IllustratorImageManager {\n    /**\n     * Loads image source data\n     * @param src The image source\n     */\n    public async load(src: IllustratorImageSource) {\n        return await ImageLoader.loadImage(src, true);\n    }\n\n    /**\n     * Loads {@link IllustratorImage} from the given source\n     * @param src The source to load\n     */\n    public async loadImage(src: IllustratorImageSource) {\n        const img = await this.load(src);\n        return new IllustratorImage(img);\n    }\n\n    public async compressJPEG(src: Buffer, options?: JpegCompressOptions | null) {\n        return await compressJpeg(src, options);\n    }\n\n    public compressJPEGSync(src: Buffer, options?: JpegCompressOptions | null) {\n        return compressJpegSync(src, options);\n    }\n\n    public async compressPNGLossless(src: Buffer, options?: PNGLosslessOptions | null) {\n        return await losslessCompressPng(src, options);\n    }\n\n    public compressPNGLosslessSync(src: Buffer, options?: PNGLosslessOptions | null) {\n        return losslessCompressPngSync(src, options);\n    }\n\n    public async PNGQuantize(src: Buffer, options?: PngQuantOptions | null) {\n        return await pngQuantize(src, options);\n    }\n\n    public PNGQuantizeSync(src: Buffer, options?: PngQuantOptions | null) {\n        return pngQuantizeSync(src, options);\n    }\n}\n\nexport { JpegCompressOptions, PNGLosslessOptions, PngQuantOptions };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ImageDataSource.html":{"url":"interfaces/ImageDataSource.html","title":"interface - ImageDataSource","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ImageDataSource\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/DataSource.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            config\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        config:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         IllustratorImageSource\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IllustratorImageSource\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IllustratorImageSource } from \"../image/ImageLoader\";\n\nexport interface IllustratorDataSource {\n    name: string;\n    type: \"text\" | \"image\";\n    data: TextDataSource | ImageDataSource;\n}\n\nexport interface TextDataSource {\n    value: string;\n    config: {\n        x: number;\n        y: number;\n        maxWidth?: number;\n        font: string;\n        fontPath?: string;\n    };\n}\n\n// TODO: template api\nexport interface ImageDataSource {\n    value: IllustratorImageSource;\n    config: {\n        x: number;\n        y: number;\n        width: number;\n        height: number;\n        radius?: number;\n    };\n}\n\nexport class DataSource {\n    public data: Array = [];\n\n    public loadData(data: Array) {\n        if (!Array.isArray(data)) throw new TypeError(\"data source must be array\");\n        this.data = data;\n    }\n\n    public addData(data: IllustratorDataSource) {\n        this.data.push(data);\n    }\n\n    public removeData(nameOrFn: string | ((ctx: IllustratorDataSource) => boolean)) {\n        if (typeof nameOrFn === \"string\") this.data = this.data.filter((ds) => ds.name === nameOrFn);\n        if (typeof nameOrFn === \"function\") this.data = this.data.filter(nameOrFn);\n        throw new Error(\"invalid parameter\");\n    }\n\n    public get(nameOrFn: string | ((ctx: IllustratorDataSource) => boolean)) {\n        return this.data.find(typeof nameOrFn === \"function\" ? nameOrFn : (fn) => fn.name === nameOrFn);\n    }\n\n    public toJSON() {\n        return this.data;\n    }\n\n    public toArray() {\n        return this.data;\n    }\n\n    public toString(): `DataSource` {\n        return `DataSource`;\n    }\n\n    public clone() {\n        const ds = new DataSource();\n        ds.loadData(this.data.slice());\n        return ds;\n    }\n\n    public *[Symbol.iterator](): IterableIterator {\n        yield* this.data ?? [];\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImageLoader.html":{"url":"classes/ImageLoader.html","title":"class - ImageLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImageLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/image/ImageLoader.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                createImage\n                            \n                            \n                                    Static\n                                    Async\n                                loadImage\n                            \n                            \n                                    Static\n                                    Async\n                                loadImage\n                            \n                            \n                                    Static\n                                    Async\n                                loadImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        createImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    createImage(data: Buffer)\n                \n            \n\n\n            \n                \n                    Defined in src/image/ImageLoader.ts:131\n                \n            \n\n\n            \n                \n                    Creates Image instance\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The image source data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Image\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        loadImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadImage(source: IllustratorImageSource, bufferOnly?)\n                \n            \n\n\n            \n                \n                    Defined in src/image/ImageLoader.ts:85\n                \n            \n\n\n            \n                \n                    Loads the given source into Image instance.\nconst image = await loadImage(\"https://example.com/image.png\");\nconsole.log(image.width, image.height);\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    source\n                                    \n                                                IllustratorImageSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The image source to load\n\n                                    \n                                \n                                \n                                    bufferOnly\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            import { loadImage } from &quot;illustrator.js&quot;;\nconst image = await loadImage(&quot;https://example.com/image.png&quot;);\nconsole.log(image.width, image.height);\n                        \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        loadImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadImage(source: IllustratorImageSource, bufferOnly?)\n                \n            \n\n\n            \n                \n                    Defined in src/image/ImageLoader.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    source\n                                    \n                                                IllustratorImageSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bufferOnly\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        loadImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadImage(source: IllustratorImageSource, bufferOnly?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/image/ImageLoader.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    source\n                                    \n                                                IllustratorImageSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bufferOnly\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Canvas, Image, ImageData } from \"@napi-rs/canvas\";\nimport * as fs from \"fs\";\nimport * as http from \"http\";\nimport * as https from \"https\";\nimport { Readable } from \"stream\";\nimport { Illustrator } from \"../illustrator/Illustrator\";\nimport { IllustratorImage } from \"./IllustratorImage\";\nimport { Layer } from \"../layer/Layer\";\nimport * as isBufferLike from \"is-buffer-like\";\n\nconst REDIRECT_STATUSES = new Set([301, 302]);\n\nexport type IllustratorImageSource =\n    | string\n    | URL\n    | Buffer\n    | Image\n    | Canvas\n    | ArrayBuffer\n    | SharedArrayBuffer\n    | Uint8Array\n    | Layer\n    | Illustrator\n    | IllustratorImage\n    | ImageData;\n\nfunction createImage(source: Buffer, bufferOnly = false) {\n    if (bufferOnly) return source;\n    const image = new Image();\n    image.src = source;\n    return image;\n}\n\n// TODO: use stream/consumers for this?\nfunction consumeStream(stream: Readable) {\n    return new Promise((resolve, reject) => {\n        const body: Buffer[] = [];\n\n        stream.on(\"data\", (chunk: Buffer) => body.push(chunk));\n        stream.on(\"end\", () => resolve(Buffer.concat(body)));\n        stream.on(\"error\", (err) => reject(err));\n    });\n}\n\nfunction makeRequest(\n    link: string | URL,\n    redirectCount: number,\n    resolve: (v: Buffer) => void,\n    reject: (e: Error) => void\n) {\n    const url = typeof link === \"string\" ? new URL(link) : link;\n    const reqBy = url.protocol === \"http:\" ? http : https;\n    reqBy.get(url, (res) => {\n        const shouldRedirect =\n            REDIRECT_STATUSES.has(res.statusCode as number) && typeof res.headers.location === \"string\";\n        if (shouldRedirect && redirectCount > 0)\n            return makeRequest(res.headers.location as string, redirectCount - 1, resolve, reject);\n        if (typeof res.statusCode === \"number\" && (res.statusCode = 300)) {\n            return reject(\n                new Error(`request for the given image source rejected with status code \"${res.statusCode}\"`)\n            );\n        }\n\n        consumeStream(res).then(resolve, reject);\n    });\n}\n\nfunction httpReq(link: string | URL): Promise {\n    return new Promise((resolve, reject) => makeRequest(link, 20, resolve, reject));\n}\n\nexport class ImageLoader extends null {\n    private constructor() {\n        /* no-op */\n    }\n\n    /**\n     * Loads the given source into `Image` instance.\n     * @param source The image source to load\n     * @example import { loadImage } from \"illustrator.js\";\n     *\n     * const image = await loadImage(\"https://example.com/image.png\");\n     * console.log(image.width, image.height);\n     */\n    public static async loadImage(source: IllustratorImageSource, bufferOnly?: false): Promise;\n    public static async loadImage(source: IllustratorImageSource, bufferOnly?: true): Promise;\n    public static async loadImage(source: IllustratorImageSource, bufferOnly?: boolean): Promise {\n        if (source instanceof Readable) return createImage(await consumeStream(source), bufferOnly);\n        if (Buffer.isBuffer(source)) return createImage(source, bufferOnly);\n        // @ts-expect-error\n        if (isBufferLike(source)) return createImage(Buffer.from(source as Buffer), bufferOnly);\n        if (source instanceof Image) return createImage(source.src, bufferOnly);\n        if (source instanceof Canvas) return createImage(await source.encode(\"png\"), bufferOnly);\n        if (source instanceof Layer)\n            return createImage(await ((await source.render()) as Canvas).encode(\"png\"), bufferOnly);\n        if (source instanceof Illustrator) return createImage(await source.export(), bufferOnly);\n        if (source instanceof IllustratorImage) return createImage(await source.png(), bufferOnly);\n        if (source instanceof ImageData) {\n            const img = await IllustratorImage.fromImageData(source);\n            return createImage(await img.png(), bufferOnly);\n        }\n        if ((typeof source === \"string\" || source instanceof URL) && fs.existsSync(source)) {\n            const data = await fs.promises.readFile(source);\n            return createImage(data, bufferOnly);\n        }\n\n        if (typeof source === \"string\" || source instanceof URL) {\n            if (typeof fetch === \"function\") {\n                const ab = await fetch(source as unknown as RequestInfo, {\n                    method: \"GET\",\n                    redirect: \"follow\"\n                }).then((res) => {\n                    if (!res.ok) throw new Error(`request for image source rejected with status code \"${res.status}\"`);\n                    return res.arrayBuffer();\n                });\n\n                return createImage(Buffer.from(ab), bufferOnly);\n            } else {\n                const res = await httpReq(source);\n                return createImage(res, bufferOnly);\n            }\n        }\n\n        throw new TypeError(\"Unsupported source type\");\n    }\n\n    /**\n     * Creates `Image` instance\n     * @param data The image source data\n     */\n    public static createImage(data: Buffer) {\n        return createImage(data, false) as Image;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImageTool.html":{"url":"classes/ImageTool.html","title":"class - ImageTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImageTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/image/Image.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ToolBox\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                drawRounded\n                            \n                            \n                                    Public\n                                load\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        draw\n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(image: Image, dx: number, dy: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/image/Image.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                            Image\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dx\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dy\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        draw\n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(image: Image, dx: number, dy: number, dw: number, dh: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/image/Image.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                            Image\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dx\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dy\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dw\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dh\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        draw\n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(image: Image, dx: number, dy: number, dw: number, dh: number, circle)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/image/Image.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                            Image\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dx\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dy\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dw\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dh\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    circle\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        draw\n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(image: Image, dx: number, dy: number, dw?: number, dh?: number, circle?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/image/Image.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                            Image\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dx\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dy\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dw\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    dh\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    circle\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        drawRounded\n                        \n                    \n                \n            \n            \n                \n                    \n                    drawRounded(image: Image, dx: number, dy: number, dw: number, dh: number, radius: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/image/Image.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                            Image\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dx\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dy\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dw\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dh\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    radius\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        load\n                        \n                    \n                \n            \n            \n                \n                    \n                    load(source: IllustratorImageSource)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/image/Image.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    source\n                                    \n                                                IllustratorImageSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Image } from \"@napi-rs/canvas\";\nimport { ImageLoader, IllustratorImageSource } from \"../../image/ImageLoader\";\nimport { ToolBox } from \"../base/ToolBox\";\n\nexport class ImageTool extends ToolBox {\n    public load(source: IllustratorImageSource) {\n        return ImageLoader.loadImage(source);\n    }\n\n    public draw(image: Image, dx: number, dy: number): this;\n    public draw(image: Image, dx: number, dy: number, dw: number, dh: number): this;\n    public draw(image: Image, dx: number, dy: number, dw: number, dh: number, circle: true): this;\n    public draw(image: Image, dx: number, dy: number, dw?: number, dh?: number, circle?: boolean): this {\n        // eslint-disable-next-line prefer-rest-params\n        const args = arguments;\n        this.history.push((ctx) => {\n            ctx.save();\n\n            if (args.length === 4 && typeof dw === \"boolean\") {\n                this.drawRounded(image, dx, dy, image.width, image.height, image.width / 2);\n                return ctx.restore();\n            }\n\n            if ([dw, dh].every((x) => typeof x === \"number\") && circle) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                this.drawRounded(image, dx, dy, dw!, dh!, dw! / 2);\n                return ctx.restore();\n            }\n\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            if ([dw, dh].every((x) => typeof x === \"number\")) return ctx.drawImage(image, dx, dy, dw!, dh!);\n\n            return ctx.drawImage(image, dx, dy);\n        });\n\n        return this;\n    }\n\n    public drawRounded(image: Image, dx: number, dy: number, dw: number, dh: number, radius: number) {\n        this.history.push((ctx) => {\n            if (dw \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Layer.html":{"url":"classes/Layer.html","title":"class - Layer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Layer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/layer/Layer.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                coordinates\n                            \n                            \n                                    Public\n                                height\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                manager\n                            \n                            \n                                    Public\n                                tools\n                            \n                            \n                                    Public\n                                utils\n                            \n                            \n                                    Public\n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                applyTool\n                            \n                            \n                                    Public\n                                createTransformation\n                            \n                            \n                                    Public\n                                duplicate\n                            \n                            \n                                    Public\n                                hide\n                            \n                            \n                                    Public\n                                isHidden\n                            \n                            \n                                    Public\n                                isLocked\n                            \n                            \n                                    Public\n                                lock\n                            \n                            \n                                    Public\n                                    Async\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                            \n                                    Public\n                                setHistory\n                            \n                            \n                                    Public\n                                setPosition\n                            \n                            \n                                    Public\n                                show\n                            \n                            \n                                    Public\n                                unlock\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                                \n                                    illustrator\n                                \n                                \n                                    context\n                                \n                                \n                                    position\n                                \n                                \n                                    locked\n                                \n                                \n                                    hidden\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(manager: LayerManager, id: number, options?: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/layer/Layer.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        manager\n                                                  \n                                                        \n                                                                        LayerManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        coordinates\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n        x: 0,\n        y: 0\n    }\n                    \n                \n                    \n                        \n                                Defined in src/layer/Layer.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/layer/Layer.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/layer/Layer.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        manager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LayerManager\n\n                    \n                \n                    \n                        \n                                Defined in src/layer/Layer.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tools\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new LayerTools(this)\n                    \n                \n                    \n                        \n                                Defined in src/layer/Layer.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        utils\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LayerUtils\n\n                    \n                \n                    \n                        \n                                Defined in src/layer/Layer.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        width\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/layer/Layer.ts:30\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        applyTool\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyTool(tool: ToolBox)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tool\n                                    \n                                                ToolBox\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        createTransformation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTransformation(data: LayerTransformationData)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                LayerTransformationData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        duplicate\n                        \n                    \n                \n            \n            \n                \n                    \n                    duplicate(name)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        `${this.name} Copy`\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        hide\n                        \n                    \n                \n            \n            \n                \n                    \n                    hide()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isHidden\n                        \n                    \n                \n            \n            \n                \n                    \n                    isHidden()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isLocked\n                        \n                    \n                \n            \n            \n                \n                    \n                    isLocked()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        lock\n                        \n                    \n                \n            \n            \n                \n                    \n                    lock()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setHistory\n                        \n                    \n                \n            \n            \n                \n                    \n                    setHistory(history: LayerToolHistory)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    history\n                                    \n                                                LayerToolHistory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setPosition\n                        \n                    \n                \n            \n            \n                \n                    \n                    setPosition(position: number)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    position\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        show\n                        \n                    \n                \n            \n            \n                \n                    \n                    show()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        unlock\n                        \n                    \n                \n            \n            \n                \n                    \n                    unlock()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in src/layer/Layer.ts:48\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        illustrator\n                    \n                \n\n                \n                    \n                        getillustrator()\n                    \n                \n                            \n                                \n                                    Defined in src/layer/Layer.ts:52\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        context\n                    \n                \n\n                \n                    \n                        getcontext()\n                    \n                \n                            \n                                \n                                    Defined in src/layer/Layer.ts:56\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        position\n                    \n                \n\n                \n                    \n                        getposition()\n                    \n                \n                            \n                                \n                                    Defined in src/layer/Layer.ts:60\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        locked\n                    \n                \n\n                \n                    \n                        getlocked()\n                    \n                \n                            \n                                \n                                    Defined in src/layer/Layer.ts:74\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        hidden\n                    \n                \n\n                \n                    \n                        gethidden()\n                    \n                \n                            \n                                \n                                    Defined in src/layer/Layer.ts:96\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Canvas, createCanvas, SKRSContext2D } from \"@napi-rs/canvas\";\nimport { ToolBox } from \"../toolbox/base/ToolBox\";\nimport { LayerManager } from \"./LayerManager\";\nimport { LayerTools } from \"./LayerTools\";\nimport { LayerUtils } from \"./LayerUtils\";\n\nexport type LayerToolHistory = Array Promise | void>[];\n\nexport interface LayerTransformationData {\n    coordinates?: {\n        x: number;\n        y: number;\n    };\n    height?: number;\n    width?: number;\n}\n\nexport class Layer {\n    #canvas: Canvas;\n    #ctx: SKRSContext2D;\n    #locked = false;\n    #hidden = false;\n    #toolHistory: LayerToolHistory = [];\n    public utils: LayerUtils;\n    public tools = new LayerTools(this);\n    public coordinates = {\n        x: 0,\n        y: 0\n    };\n    public width: number;\n    public height: number;\n\n    public constructor(\n        public readonly manager: LayerManager,\n        public readonly id: number,\n        options?: {\n            width?: number;\n            height?: number;\n        }\n    ) {\n        this.height = options?.height ?? this.manager.illustrator.height;\n        this.width = options?.width ?? this.manager.illustrator.width;\n        this.#canvas = createCanvas(this.width, this.height);\n        this.#ctx = this.#canvas.getContext(\"2d\");\n        this.utils = new LayerUtils(this.#ctx);\n    }\n\n    public get name() {\n        return this.manager.resolve(this)?.name as string;\n    }\n\n    public get illustrator() {\n        return this.manager.illustrator;\n    }\n\n    public get context() {\n        return this.#ctx;\n    }\n\n    public get position() {\n        return this.manager.getLayerPosition(this);\n    }\n\n    public setPosition(position: number) {\n        return this.manager.setLayerPosition(this, position);\n    }\n\n    public createTransformation(data: LayerTransformationData) {\n        if (data.coordinates) this.coordinates = data.coordinates;\n        if (data.width) this.width = data.width;\n        if (data.height) this.height = data.height;\n    }\n\n    public get locked() {\n        return this.#locked;\n    }\n\n    public isLocked() {\n        return this.locked;\n    }\n\n    public lock() {\n        this.#locked = true;\n        return this;\n    }\n\n    public unlock() {\n        this.#locked = false;\n        return this;\n    }\n\n    public isHidden() {\n        return this.hidden;\n    }\n\n    public get hidden() {\n        return this.#hidden;\n    }\n\n    public hide() {\n        this.#hidden = true;\n        return this;\n    }\n\n    public show() {\n        this.#hidden = false;\n        return this;\n    }\n\n    public save() {\n        this.#ctx.save();\n    }\n\n    public restore() {\n        this.#ctx.restore();\n    }\n\n    public duplicate(name = `${this.name} Copy`) {\n        return this.manager.duplicateLayer(this, this.#toolHistory, {\n            name,\n            config: {\n                height: this.height,\n                width: this.width\n            },\n            position: this.position + 1\n        });\n    }\n\n    public applyTool(tool: ToolBox) {\n        this.#throwIfLocked();\n        if (!(tool instanceof ToolBox)) throw new Error(\"tool must be a ToolBox instance\");\n        this.#toolHistory.push(tool.history);\n    }\n\n    public setHistory(history: LayerToolHistory) {\n        this.#toolHistory = history;\n    }\n\n    #throwIfLocked() {\n        if (this.#locked) throw new Error(\"Cannot perform operations on locked layer\");\n    }\n\n    public async render() {\n        if (this.#hidden) return null;\n        await Promise.all(this.#toolHistory.flat(2).map((m) => m(this.#ctx)));\n        return this.#canvas;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LayerManager.html":{"url":"classes/LayerManager.html","title":"class - LayerManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LayerManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/layer/LayerManager.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                illustrator\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                count\n                            \n                            \n                                    Public\n                                createLayer\n                            \n                            \n                                    Public\n                                deleteLayer\n                            \n                            \n                                    Public\n                                duplicateLayer\n                            \n                            \n                                    Public\n                                getAllLayers\n                            \n                            \n                                    Public\n                                getLayer\n                            \n                            \n                                    Public\n                                getLayerPosition\n                            \n                            \n                                    Public\n                                hasLayer\n                            \n                            \n                                    Public\n                                iterate\n                            \n                            \n                                    Public\n                                resolve\n                            \n                            \n                                    Public\n                                resolveId\n                            \n                            \n                                    Public\n                                resolveLayer\n                            \n                            \n                                    Public\n                                setLayerPosition\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(illustrator: Illustrator)\n                    \n                \n                        \n                            \n                                Defined in src/layer/LayerManager.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        illustrator\n                                                  \n                                                        \n                                                                        Illustrator\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        illustrator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Illustrator\n\n                    \n                \n                    \n                        \n                                Defined in src/layer/LayerManager.ts:27\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        count\n                        \n                    \n                \n            \n            \n                \n                    \n                    count()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        createLayer\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLayer(options: CreateLayerOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                CreateLayerOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Layer\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        deleteLayer\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteLayer(layer: LayerResolvable)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                LayerResolvable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        duplicateLayer\n                        \n                    \n                \n            \n            \n                \n                    \n                    duplicateLayer(layer: Layer, history: LayerToolHistory, options: CreateLayerOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                Layer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    history\n                                    \n                                                LayerToolHistory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                CreateLayerOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Layer\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getAllLayers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllLayers(ordered)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    ordered\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getLayer\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLayer(layer: LayerResolvable)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                LayerResolvable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getLayerPosition\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLayerPosition(layer: LayerResolvable)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                LayerResolvable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        hasLayer\n                        \n                    \n                \n            \n            \n                \n                    \n                    hasLayer(layer: LayerResolvable)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                LayerResolvable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        iterate\n                        \n                    \n                \n            \n            \n                \n                    \n                    iterate()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        resolve\n                        \n                    \n                \n            \n            \n                \n                    \n                    resolve(layer: LayerResolvable)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                LayerResolvable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        resolveId\n                        \n                    \n                \n            \n            \n                \n                    \n                    resolveId(layer: LayerResolvable)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                LayerResolvable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        resolveLayer\n                        \n                    \n                \n            \n            \n                \n                    \n                    resolveLayer(layer: LayerResolvable)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                LayerResolvable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLayerPosition\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLayerPosition(layer: LayerResolvable, position: number)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                LayerResolvable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    position\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IllustratorCollection } from \"../utils/IllustratorCollection\";\nimport { generateRandomId } from \"../utils/randomId\";\nimport { Illustrator } from \"../illustrator/Illustrator\";\nimport { Layer, LayerToolHistory } from \"./Layer\";\n\nexport interface CreateLayerOptions {\n    name: string;\n    position?: number;\n    config?: {\n        height?: number;\n        width?: number;\n    };\n}\n\nexport interface LayerWrapper {\n    layer: Layer;\n    name: string;\n    id: number;\n    position: number;\n}\n\nexport type LayerResolvable = number | Layer | string;\n\nexport class LayerManager {\n    #layers = new IllustratorCollection();\n\n    public constructor(public readonly illustrator: Illustrator) {}\n\n    public count() {\n        return this.#layers.size;\n    }\n\n    public createLayer(options: CreateLayerOptions) {\n        if (!options.name || typeof options.name !== \"string\") throw new Error(\"Layer name is required\");\n        if (this.#layers.findKey((x) => x.name === options.name))\n            throw new Error(\"Layer with that name already exists\");\n        const id = generateRandomId();\n        const layerObj: LayerWrapper = {\n            id,\n            layer: new Layer(this, id, options.config),\n            name: options.name,\n            position: options.position ?? this.count() + 1\n        };\n\n        this.#layers.set(layerObj.id, layerObj);\n        // rearrange\n        layerObj.layer.setPosition(layerObj.position);\n\n        return layerObj.layer;\n    }\n\n    public duplicateLayer(layer: Layer, history: LayerToolHistory, options: CreateLayerOptions) {\n        if (!options.name || typeof options.name !== \"string\") throw new Error(\"Layer name is required\");\n        if (this.#layers.findKey((x) => x.name === options.name))\n            throw new Error(\"Layer with that name already exists\");\n        const id = generateRandomId();\n        const layerObj: LayerWrapper = {\n            id,\n            layer: new Layer(this, id, options.config),\n            name: options.name,\n            position: options.position ?? this.count() + 1\n        };\n\n        layerObj.layer.setHistory(history);\n\n        this.#layers.set(layerObj.id, layerObj);\n        layerObj.layer.setPosition(layer.position + 1);\n\n        return layerObj.layer;\n    }\n\n    public deleteLayer(layer: LayerResolvable) {\n        const id = this.resolveId(layer);\n        if (id == null) return false;\n        return this.#layers.delete(id);\n    }\n\n    public hasLayer(layer: LayerResolvable) {\n        const id = this.resolveId(layer);\n        return id != null;\n    }\n\n    public getLayer(layer: LayerResolvable) {\n        const l = this.resolveLayer(layer);\n        if (l == null) return null;\n        return l;\n    }\n\n    public getLayerPosition(layer: LayerResolvable) {\n        const l = this.resolve(layer);\n        if (!l) return -1;\n        return l.position;\n    }\n\n    public setLayerPosition(layer: LayerResolvable, position: number) {\n        if (position  l.position >= position);\n        layersToBeUpdated.forEach((l) => {\n            this.#layers.set(l.id, {\n                ...l,\n                position: l.position + 1\n            });\n        });\n        this.#layers.set(l.id, {\n            ...l,\n            position\n        });\n        return this.#layers.get(l.id)?.position ?? -1;\n    }\n\n    public resolveLayer(layer: LayerResolvable) {\n        return this.resolve(layer)?.layer;\n    }\n\n    public resolveId(layer: LayerResolvable) {\n        return this.resolve(layer)?.id;\n    }\n\n    public resolve(layer: LayerResolvable) {\n        if (layer instanceof Layer) return this.#layers.get(layer.id);\n        if (typeof layer === \"number\") return this.#layers.get(layer);\n        if (typeof layer === \"string\") return this.#layers.find((l) => l.name === layer);\n    }\n\n    public getAllLayers(ordered = true) {\n        return ordered ? this.#layers.array().sort((a, b) => b.position - a.position) : this.#layers.array();\n    }\n\n    public iterate() {\n        return this.#layers.values();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LayerToolConfig.html":{"url":"interfaces/LayerToolConfig.html","title":"interface - LayerToolConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LayerToolConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/layer/LayerTools.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cache\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cache\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cache:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:     Name\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Name\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Layer } from \"./Layer\";\nimport * as Tools from \"../toolbox/exports\";\nimport { IllustratorCollection } from \"../utils/IllustratorCollection\";\n\nexport interface LayerToolConfig {\n    name: Name;\n    cache?: boolean;\n}\n\nexport class LayerTools {\n    #toolsCache = new IllustratorCollection();\n    public constructor(public readonly layer: Layer) {}\n\n    public clearCache() {\n        this.#toolsCache.clear();\n    }\n\n    public delete(name: K) {\n        return this.#toolsCache.delete(name);\n    }\n\n    public isCached(name: K) {\n        return this.#toolsCache.has(name);\n    }\n\n    public get(name: K, cache?: boolean): InstanceType;\n    public get(config: LayerToolConfig): InstanceType;\n    public get(\n        nameOrConfig: LayerToolConfig | K,\n        cache?: boolean\n    ): InstanceType {\n        const name = typeof nameOrConfig === \"string\" ? nameOrConfig : nameOrConfig.name;\n        const shouldCache = !!(typeof nameOrConfig === \"object\" ? nameOrConfig.cache : cache);\n        if (typeof name !== \"string\" || !name)\n            throw new TypeError(`tool name must be a string, received ${typeof name}`);\n        if (!shouldCache && this.#toolsCache.has(name))\n            return this.#toolsCache.get(name) as unknown as InstanceType;\n        if (!Tools[name]) throw new Error(`Unknown tool ${name}`);\n        const toolConstructor = Tools[name];\n        const tool = new toolConstructor(this.layer);\n        if (shouldCache) this.#toolsCache.set(name, tool);\n        return tool as unknown as InstanceType;\n    }\n\n    public isValidTool(name: K) {\n        return name in Tools;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LayerTools.html":{"url":"classes/LayerTools.html","title":"class - LayerTools","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LayerTools\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/layer/LayerTools.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clearCache\n                            \n                            \n                                    Public\n                                delete\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                isCached\n                            \n                            \n                                    Public\n                                isValidTool\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(layer: Layer)\n                    \n                \n                        \n                            \n                                Defined in src/layer/LayerTools.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        layer\n                                                  \n                                                        \n                                                                        Layer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                    \n                        \n                                Defined in src/layer/LayerTools.ts:12\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clearCache\n                        \n                    \n                \n            \n            \n                \n                    \n                    clearCache()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerTools.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(name: K)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerTools.ts:18\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                            K\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(name: K, cache?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerTools.ts:26\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                            K\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cache\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     InstanceType<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(config: LayerToolConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerTools.ts:27\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                LayerToolConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     InstanceType<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(nameOrConfig: LayerToolConfig | K, cache?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerTools.ts:28\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nameOrConfig\n                                    \n                                                LayerToolConfig | K\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cache\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     InstanceType<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isCached\n                        \n                    \n                \n            \n            \n                \n                    \n                    isCached(name: K)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerTools.ts:22\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                            K\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isValidTool\n                        \n                    \n                \n            \n            \n                \n                    \n                    isValidTool(name: K)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerTools.ts:45\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                            K\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Layer } from \"./Layer\";\nimport * as Tools from \"../toolbox/exports\";\nimport { IllustratorCollection } from \"../utils/IllustratorCollection\";\n\nexport interface LayerToolConfig {\n    name: Name;\n    cache?: boolean;\n}\n\nexport class LayerTools {\n    #toolsCache = new IllustratorCollection();\n    public constructor(public readonly layer: Layer) {}\n\n    public clearCache() {\n        this.#toolsCache.clear();\n    }\n\n    public delete(name: K) {\n        return this.#toolsCache.delete(name);\n    }\n\n    public isCached(name: K) {\n        return this.#toolsCache.has(name);\n    }\n\n    public get(name: K, cache?: boolean): InstanceType;\n    public get(config: LayerToolConfig): InstanceType;\n    public get(\n        nameOrConfig: LayerToolConfig | K,\n        cache?: boolean\n    ): InstanceType {\n        const name = typeof nameOrConfig === \"string\" ? nameOrConfig : nameOrConfig.name;\n        const shouldCache = !!(typeof nameOrConfig === \"object\" ? nameOrConfig.cache : cache);\n        if (typeof name !== \"string\" || !name)\n            throw new TypeError(`tool name must be a string, received ${typeof name}`);\n        if (!shouldCache && this.#toolsCache.has(name))\n            return this.#toolsCache.get(name) as unknown as InstanceType;\n        if (!Tools[name]) throw new Error(`Unknown tool ${name}`);\n        const toolConstructor = Tools[name];\n        const tool = new toolConstructor(this.layer);\n        if (shouldCache) this.#toolsCache.set(name, tool);\n        return tool as unknown as InstanceType;\n    }\n\n    public isValidTool(name: K) {\n        return name in Tools;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LayerTransformationData.html":{"url":"interfaces/LayerTransformationData.html","title":"interface - LayerTransformationData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LayerTransformationData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/layer/Layer.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            coordinates\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            height\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        coordinates\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        coordinates:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Canvas, createCanvas, SKRSContext2D } from \"@napi-rs/canvas\";\nimport { ToolBox } from \"../toolbox/base/ToolBox\";\nimport { LayerManager } from \"./LayerManager\";\nimport { LayerTools } from \"./LayerTools\";\nimport { LayerUtils } from \"./LayerUtils\";\n\nexport type LayerToolHistory = Array Promise | void>[];\n\nexport interface LayerTransformationData {\n    coordinates?: {\n        x: number;\n        y: number;\n    };\n    height?: number;\n    width?: number;\n}\n\nexport class Layer {\n    #canvas: Canvas;\n    #ctx: SKRSContext2D;\n    #locked = false;\n    #hidden = false;\n    #toolHistory: LayerToolHistory = [];\n    public utils: LayerUtils;\n    public tools = new LayerTools(this);\n    public coordinates = {\n        x: 0,\n        y: 0\n    };\n    public width: number;\n    public height: number;\n\n    public constructor(\n        public readonly manager: LayerManager,\n        public readonly id: number,\n        options?: {\n            width?: number;\n            height?: number;\n        }\n    ) {\n        this.height = options?.height ?? this.manager.illustrator.height;\n        this.width = options?.width ?? this.manager.illustrator.width;\n        this.#canvas = createCanvas(this.width, this.height);\n        this.#ctx = this.#canvas.getContext(\"2d\");\n        this.utils = new LayerUtils(this.#ctx);\n    }\n\n    public get name() {\n        return this.manager.resolve(this)?.name as string;\n    }\n\n    public get illustrator() {\n        return this.manager.illustrator;\n    }\n\n    public get context() {\n        return this.#ctx;\n    }\n\n    public get position() {\n        return this.manager.getLayerPosition(this);\n    }\n\n    public setPosition(position: number) {\n        return this.manager.setLayerPosition(this, position);\n    }\n\n    public createTransformation(data: LayerTransformationData) {\n        if (data.coordinates) this.coordinates = data.coordinates;\n        if (data.width) this.width = data.width;\n        if (data.height) this.height = data.height;\n    }\n\n    public get locked() {\n        return this.#locked;\n    }\n\n    public isLocked() {\n        return this.locked;\n    }\n\n    public lock() {\n        this.#locked = true;\n        return this;\n    }\n\n    public unlock() {\n        this.#locked = false;\n        return this;\n    }\n\n    public isHidden() {\n        return this.hidden;\n    }\n\n    public get hidden() {\n        return this.#hidden;\n    }\n\n    public hide() {\n        this.#hidden = true;\n        return this;\n    }\n\n    public show() {\n        this.#hidden = false;\n        return this;\n    }\n\n    public save() {\n        this.#ctx.save();\n    }\n\n    public restore() {\n        this.#ctx.restore();\n    }\n\n    public duplicate(name = `${this.name} Copy`) {\n        return this.manager.duplicateLayer(this, this.#toolHistory, {\n            name,\n            config: {\n                height: this.height,\n                width: this.width\n            },\n            position: this.position + 1\n        });\n    }\n\n    public applyTool(tool: ToolBox) {\n        this.#throwIfLocked();\n        if (!(tool instanceof ToolBox)) throw new Error(\"tool must be a ToolBox instance\");\n        this.#toolHistory.push(tool.history);\n    }\n\n    public setHistory(history: LayerToolHistory) {\n        this.#toolHistory = history;\n    }\n\n    #throwIfLocked() {\n        if (this.#locked) throw new Error(\"Cannot perform operations on locked layer\");\n    }\n\n    public async render() {\n        if (this.#hidden) return null;\n        await Promise.all(this.#toolHistory.flat(2).map((m) => m(this.#ctx)));\n        return this.#canvas;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LayerUtils.html":{"url":"classes/LayerUtils.html","title":"class - LayerUtils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LayerUtils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/layer/LayerUtils.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createConicGradient\n                            \n                            \n                                    Public\n                                createLinearGradient\n                            \n                            \n                                    Public\n                                createPattern\n                            \n                            \n                                    Public\n                                createRadialGradient\n                            \n                            \n                                    Public\n                                getCenterPoint\n                            \n                            \n                                    Public\n                                getImageData\n                            \n                            \n                                    Public\n                                getLayerTransformation\n                            \n                            \n                                    Public\n                                measureText\n                            \n                            \n                                    Public\n                                putImageData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(ctx: SKRSContext2D)\n                    \n                \n                        \n                            \n                                Defined in src/layer/LayerUtils.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ctx\n                                                  \n                                                        \n                                                                    SKRSContext2D\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        createConicGradient\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConicGradient(startAngle: number, x: number, y: number)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerUtils.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    startAngle\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        createLinearGradient\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLinearGradient(x0: number, x1: number, y0: number, y1: number)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerUtils.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x0\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    x1\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y0\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y1\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        createPattern\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPattern(image: Image | ImageData, repeat: \"repeat\" | \"repeat-x\" | \"repeat-y\" | \"no-repeat\" | null)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerUtils.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                            Image | ImageData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repeat\n                                    \n                                            \"repeat\" | \"repeat-x\" | \"repeat-y\" | \"no-repeat\" | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        createRadialGradient\n                        \n                    \n                \n            \n            \n                \n                    \n                    createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerUtils.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x0\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y0\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    r0\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    x1\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y1\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    r1\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCenterPoint\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCenterPoint(divider: number)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerUtils.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    divider\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        2\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { x: number; y: number; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getImageData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getImageData(sx: number, sy: number, sw, sh)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerUtils.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    sx\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    sy\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    sw\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.#ctx.canvas.width\n                                    \n\n                                \n                                \n                                    sh\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.#ctx.canvas.height\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getLayerTransformation\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLayerTransformation()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerUtils.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        measureText\n                        \n                    \n                \n            \n            \n                \n                    \n                    measureText(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerUtils.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        putImageData\n                        \n                    \n                \n            \n            \n                \n                    \n                    putImageData(data, dx: number, dy: number)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerUtils.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dx\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dy\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ColorSpace, Image, ImageData, SKRSContext2D } from \"@napi-rs/canvas\";\n\nexport class LayerUtils {\n    #ctx: SKRSContext2D;\n\n    public constructor(ctx: SKRSContext2D) {\n        this.#ctx = ctx;\n    }\n\n    public measureText(text: string) {\n        return this.#ctx.measureText(text);\n    }\n\n    public getLayerTransformation() {\n        return this.#ctx.getTransform();\n    }\n\n    public createLinearGradient(x0: number, x1: number, y0: number, y1: number) {\n        return this.#ctx.createLinearGradient(x0, x1, y0, y1);\n    }\n\n    public createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number) {\n        return this.#ctx.createRadialGradient(x0, y0, r0, x1, y1, r1);\n    }\n\n    public createConicGradient(startAngle: number, x: number, y: number) {\n        return this.#ctx.createConicGradient(startAngle, x, y);\n    }\n\n    public createPattern(image: Image | ImageData, repeat: \"repeat\" | \"repeat-x\" | \"repeat-y\" | \"no-repeat\" | null) {\n        return this.#ctx.createPattern(image, repeat);\n    }\n\n    public getImageData(sx = 0, sy = 0, sw = this.#ctx.canvas.width, sh = this.#ctx.canvas.height) {\n        return this.#ctx.getImageData(sx, sy, sw, sh);\n    }\n\n    public putImageData(data: ImageData & { colorSpace: ColorSpace }, dx: number, dy: number) {\n        return this.#ctx.putImageData(data, dx, dy);\n    }\n\n    public getCenterPoint(divider = 2) {\n        if (typeof divider !== \"number\") throw new TypeError(\"divider must be a number\");\n\n        return {\n            x: this.#ctx.canvas.width / divider,\n            y: this.#ctx.canvas.height / divider\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LayerWrapper.html":{"url":"interfaces/LayerWrapper.html","title":"interface - LayerWrapper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LayerWrapper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/layer/LayerManager.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            layer\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            position\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        layer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        layer:         Layer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Layer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IllustratorCollection } from \"../utils/IllustratorCollection\";\nimport { generateRandomId } from \"../utils/randomId\";\nimport { Illustrator } from \"../illustrator/Illustrator\";\nimport { Layer, LayerToolHistory } from \"./Layer\";\n\nexport interface CreateLayerOptions {\n    name: string;\n    position?: number;\n    config?: {\n        height?: number;\n        width?: number;\n    };\n}\n\nexport interface LayerWrapper {\n    layer: Layer;\n    name: string;\n    id: number;\n    position: number;\n}\n\nexport type LayerResolvable = number | Layer | string;\n\nexport class LayerManager {\n    #layers = new IllustratorCollection();\n\n    public constructor(public readonly illustrator: Illustrator) {}\n\n    public count() {\n        return this.#layers.size;\n    }\n\n    public createLayer(options: CreateLayerOptions) {\n        if (!options.name || typeof options.name !== \"string\") throw new Error(\"Layer name is required\");\n        if (this.#layers.findKey((x) => x.name === options.name))\n            throw new Error(\"Layer with that name already exists\");\n        const id = generateRandomId();\n        const layerObj: LayerWrapper = {\n            id,\n            layer: new Layer(this, id, options.config),\n            name: options.name,\n            position: options.position ?? this.count() + 1\n        };\n\n        this.#layers.set(layerObj.id, layerObj);\n        // rearrange\n        layerObj.layer.setPosition(layerObj.position);\n\n        return layerObj.layer;\n    }\n\n    public duplicateLayer(layer: Layer, history: LayerToolHistory, options: CreateLayerOptions) {\n        if (!options.name || typeof options.name !== \"string\") throw new Error(\"Layer name is required\");\n        if (this.#layers.findKey((x) => x.name === options.name))\n            throw new Error(\"Layer with that name already exists\");\n        const id = generateRandomId();\n        const layerObj: LayerWrapper = {\n            id,\n            layer: new Layer(this, id, options.config),\n            name: options.name,\n            position: options.position ?? this.count() + 1\n        };\n\n        layerObj.layer.setHistory(history);\n\n        this.#layers.set(layerObj.id, layerObj);\n        layerObj.layer.setPosition(layer.position + 1);\n\n        return layerObj.layer;\n    }\n\n    public deleteLayer(layer: LayerResolvable) {\n        const id = this.resolveId(layer);\n        if (id == null) return false;\n        return this.#layers.delete(id);\n    }\n\n    public hasLayer(layer: LayerResolvable) {\n        const id = this.resolveId(layer);\n        return id != null;\n    }\n\n    public getLayer(layer: LayerResolvable) {\n        const l = this.resolveLayer(layer);\n        if (l == null) return null;\n        return l;\n    }\n\n    public getLayerPosition(layer: LayerResolvable) {\n        const l = this.resolve(layer);\n        if (!l) return -1;\n        return l.position;\n    }\n\n    public setLayerPosition(layer: LayerResolvable, position: number) {\n        if (position  l.position >= position);\n        layersToBeUpdated.forEach((l) => {\n            this.#layers.set(l.id, {\n                ...l,\n                position: l.position + 1\n            });\n        });\n        this.#layers.set(l.id, {\n            ...l,\n            position\n        });\n        return this.#layers.get(l.id)?.position ?? -1;\n    }\n\n    public resolveLayer(layer: LayerResolvable) {\n        return this.resolve(layer)?.layer;\n    }\n\n    public resolveId(layer: LayerResolvable) {\n        return this.resolve(layer)?.id;\n    }\n\n    public resolve(layer: LayerResolvable) {\n        if (layer instanceof Layer) return this.#layers.get(layer.id);\n        if (typeof layer === \"number\") return this.#layers.get(layer);\n        if (typeof layer === \"string\") return this.#layers.find((l) => l.name === layer);\n    }\n\n    public getAllLayers(ordered = true) {\n        return ordered ? this.#layers.array().sort((a, b) => b.position - a.position) : this.#layers.array();\n    }\n\n    public iterate() {\n        return this.#layers.values();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LineTool.html":{"url":"classes/LineTool.html","title":"class - LineTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LineTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/shapes/Line.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseShapeTool\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arc\n                            \n                            \n                                    Public\n                                arcTo\n                            \n                            \n                                    Public\n                                cubicBezierCurve\n                            \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                quadraticBezierCurve\n                            \n                            \n                                    Public\n                                addPoint\n                            \n                            \n                                    Public\n                                clip\n                            \n                            \n                                    Public\n                                fill\n                            \n                            \n                                    Public\n                                move\n                            \n                            \n                                    Public\n                                removePoint\n                            \n                            \n                                    Public\n                                setDashOffset\n                            \n                            \n                                    Public\n                                setFillColor\n                            \n                            \n                                    Public\n                                setLineCap\n                            \n                            \n                                    Public\n                                setLineDash\n                            \n                            \n                                    Public\n                                setLineJoinStyle\n                            \n                            \n                                    Public\n                                setLineWidth\n                            \n                            \n                                    Public\n                                setMiterLimit\n                            \n                            \n                                    Public\n                                setStrokeColor\n                            \n                            \n                                    Public\n                                stroke\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        arc\n                        \n                    \n                \n            \n            \n                \n                    \n                    arc(options: DrawArcOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/shapes/Line.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                DrawArcOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        arcTo\n                        \n                    \n                \n            \n            \n                \n                    \n                    arcTo(options: ArcToPoint)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/shapes/Line.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ArcToPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        cubicBezierCurve\n                        \n                    \n                \n            \n            \n                \n                    \n                    cubicBezierCurve(options: CubicBezierCurveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/shapes/Line.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                CubicBezierCurveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        draw\n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(from: number, to: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/shapes/Line.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    from\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        quadraticBezierCurve\n                        \n                    \n                \n            \n            \n                \n                    \n                    quadraticBezierCurve(options: QuadraticBezierCurveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/shapes/Line.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                QuadraticBezierCurveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addPoint\n                        \n                    \n                \n            \n            \n                \n                    \n                    addPoint()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:62\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clip\n                        \n                    \n                \n            \n            \n                \n                    \n                    clip(options?: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:116\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fill\n                        \n                    \n                \n            \n            \n                \n                    \n                    fill(options?: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:86\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        move\n                        \n                    \n                \n            \n            \n                \n                    \n                    move(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:78\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removePoint\n                        \n                    \n                \n            \n            \n                \n                    \n                    removePoint()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:70\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setDashOffset\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDashOffset(offset: number)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setFillColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setFillColor(color: string | CanvasGradient | CanvasPattern)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:6\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                            string | CanvasGradient | CanvasPattern\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineCap\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineCap(lineCapStyle: CanvasLineCap)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lineCapStyle\n                                    \n                                            CanvasLineCap\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineDash\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineDash(segments: number[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:108\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    segments\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineJoinStyle\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineJoinStyle(style: \"round\" | \"bevel\" | \"miter\")\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:46\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    style\n                                    \n                                            \"round\" | \"bevel\" | \"miter\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineWidth\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineWidth(width: number)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:22\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setMiterLimit\n                        \n                    \n                \n            \n            \n                \n                    \n                    setMiterLimit(limit: number)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:54\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setStrokeColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setStrokeColor(color: string | CanvasGradient | CanvasPattern)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:14\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                            string | CanvasGradient | CanvasPattern\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        stroke\n                        \n                    \n                \n            \n            \n                \n                    \n                    stroke(options?: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:100\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BaseShapeTool } from \"../base/BaseShapeTool\";\n\nexport interface DrawArcOptions {\n    x: number;\n    y: number;\n    radius: number;\n    startAngle: number;\n    endAngle: number;\n    counterclockwise?: boolean;\n}\n\nexport interface ArcToPoint {\n    x1: number;\n    y1: number;\n    x2: number;\n    y2: number;\n    radius: number;\n}\n\nexport interface QuadraticBezierCurveOptions {\n    controlPointX: number;\n    controlPointY: number;\n    x: number;\n    y: number;\n}\n\nexport interface CubicBezierCurveOptions {\n    firstControlPointX: number;\n    firstControlPointY: number;\n    secondControlPointX: number;\n    secondControlPointY: number;\n    x: number;\n    y: number;\n}\n\nexport class LineTool extends BaseShapeTool {\n    public draw(from: number, to: number) {\n        this.history.push((ctx) => {\n            ctx.lineTo(from, to);\n        });\n\n        return this;\n    }\n\n    public arc(options: DrawArcOptions) {\n        this.history.push((ctx) => {\n            ctx.arc(\n                options.x,\n                options.y,\n                options.radius,\n                options.startAngle,\n                options.endAngle,\n                !!options.counterclockwise\n            );\n        });\n\n        return this;\n    }\n\n    public arcTo(options: ArcToPoint) {\n        this.history.push((ctx) => {\n            ctx.arcTo(options.x1, options.y1, options.x2, options.y2, options.radius);\n        });\n\n        return this;\n    }\n\n    public quadraticBezierCurve(options: QuadraticBezierCurveOptions) {\n        this.history.push((ctx) => {\n            ctx.quadraticCurveTo(options.controlPointX, options.controlPointY, options.x, options.y);\n        });\n\n        return this;\n    }\n\n    public cubicBezierCurve(options: CubicBezierCurveOptions) {\n        this.history.push((ctx) => {\n            ctx.bezierCurveTo(\n                options.firstControlPointX,\n                options.firstControlPointY,\n                options.secondControlPointX,\n                options.secondControlPointY,\n                options.x,\n                options.y\n            );\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PixelTransformerContext.html":{"url":"interfaces/PixelTransformerContext.html","title":"interface - PixelTransformerContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PixelTransformerContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/pixels/Pixels.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            from\n                                        \n                                \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            to\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        from:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        to\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        to:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ToolBox } from \"../exports\";\nimport { IllustratorImageSource } from \"../../image/ImageLoader\";\nimport { IllustratorImage, IllustratorImageEnums } from \"../../image/IllustratorImage\";\n\nexport interface PixelTransformerContext {\n    from: number;\n    to: number;\n    width: number;\n    height: number;\n}\n\nexport interface PixelTransformerRenderContext {\n    from: number;\n    to: number;\n    width?: number;\n    height?: number;\n}\n\nexport class PixelsTool extends ToolBox {\n    #transformer!: IllustratorImage | null;\n\n    public async createRawTransformer(src: IllustratorImageSource) {\n        const transformer = await this.layer.illustrator.image.loadImage(src);\n        this.#transformer = transformer;\n    }\n\n    public async createTransformer(context: PixelTransformerContext) {\n        const data = this.layer.context.getImageData(context.from, context.to, context.width, context.height);\n        const transformer = await IllustratorImage.fromImageData(data);\n        this.#transformer = transformer;\n    }\n\n    public rotate(orientation: K) {\n        this.#ensureTransformer();\n        // @ts-expect-error\n        this.#transformer?.rotate(IllustratorImageEnums.Orientation[orientation]);\n\n        return this;\n    }\n\n    public crop(context: PixelTransformerContext) {\n        this.#ensureTransformer();\n        this.#transformer?.crop(context.from, context.to, context.width, context.height);\n        return this;\n    }\n\n    public invert() {\n        this.#ensureTransformer();\n        this.#transformer?.invert();\n        return this;\n    }\n\n    public setBrightness(brightness: number) {\n        this.#ensureTransformer();\n        this.#transformer?.brighten(brightness);\n        return this;\n    }\n\n    public setContrast(contrast: number) {\n        this.#ensureTransformer();\n        this.#transformer?.adjustContrast(contrast);\n        return this;\n    }\n\n    public hueRotate(hue: number) {\n        this.#ensureTransformer();\n        this.#transformer?.huerotate(hue);\n        return this;\n    }\n\n    public gaussianBlur(sigma: number) {\n        this.#ensureTransformer();\n        this.#transformer?.blur(sigma);\n        return this;\n    }\n\n    public unsharpMasking(sigma: number, threshold: number) {\n        this.#ensureTransformer();\n        this.#transformer?.unsharpen(sigma, threshold);\n        return this;\n    }\n\n    public resize(\n        width: number,\n        height?: number | null,\n        algorithm?: K | null\n    ) {\n        this.#ensureTransformer();\n        // @ts-expect-error\n        this.#transformer?.resize(width, height, IllustratorImageEnums.ResizeFilterType[algorithm]);\n        return this;\n    }\n\n    public get transformer() {\n        return this.#transformer;\n    }\n\n    public async getImage() {\n        this.#ensureTransformer();\n        // eslint-disable-next-line\n        return await this.#transformer!.toImage();\n    }\n\n    public getImageSync() {\n        this.#ensureTransformer();\n        // eslint-disable-next-line\n        return this.#transformer!.toImageSync();\n    }\n\n    public async renderTransformer(context: PixelTransformerRenderContext) {\n        const data = await this.getImage();\n        this.history.push((ctx) => {\n            if (\"width\" in context && \"height\" in context) {\n                // eslint-disable-next-line\n                ctx.drawImage(data, context.from, context.to, context.width!, context.height!);\n            } else {\n                ctx.drawImage(data, context.from, context.to);\n            }\n        });\n    }\n\n    public renderTransformerSync(context: PixelTransformerRenderContext) {\n        const data = this.getImageSync();\n        this.history.push((ctx) => {\n            if (\"width\" in context && \"height\" in context) {\n                // eslint-disable-next-line\n                ctx.drawImage(data, context.from, context.to, context.width!, context.height!);\n            } else {\n                ctx.drawImage(data, context.from, context.to);\n            }\n        });\n    }\n\n    public clearTransformer() {\n        this.#transformer = null;\n    }\n\n    #ensureTransformer() {\n        if (!this.#transformer) throw new Error(\"transformer is not created\");\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PixelTransformerRenderContext.html":{"url":"interfaces/PixelTransformerRenderContext.html","title":"interface - PixelTransformerRenderContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PixelTransformerRenderContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/pixels/Pixels.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            from\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            to\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        from:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        to\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        to:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ToolBox } from \"../exports\";\nimport { IllustratorImageSource } from \"../../image/ImageLoader\";\nimport { IllustratorImage, IllustratorImageEnums } from \"../../image/IllustratorImage\";\n\nexport interface PixelTransformerContext {\n    from: number;\n    to: number;\n    width: number;\n    height: number;\n}\n\nexport interface PixelTransformerRenderContext {\n    from: number;\n    to: number;\n    width?: number;\n    height?: number;\n}\n\nexport class PixelsTool extends ToolBox {\n    #transformer!: IllustratorImage | null;\n\n    public async createRawTransformer(src: IllustratorImageSource) {\n        const transformer = await this.layer.illustrator.image.loadImage(src);\n        this.#transformer = transformer;\n    }\n\n    public async createTransformer(context: PixelTransformerContext) {\n        const data = this.layer.context.getImageData(context.from, context.to, context.width, context.height);\n        const transformer = await IllustratorImage.fromImageData(data);\n        this.#transformer = transformer;\n    }\n\n    public rotate(orientation: K) {\n        this.#ensureTransformer();\n        // @ts-expect-error\n        this.#transformer?.rotate(IllustratorImageEnums.Orientation[orientation]);\n\n        return this;\n    }\n\n    public crop(context: PixelTransformerContext) {\n        this.#ensureTransformer();\n        this.#transformer?.crop(context.from, context.to, context.width, context.height);\n        return this;\n    }\n\n    public invert() {\n        this.#ensureTransformer();\n        this.#transformer?.invert();\n        return this;\n    }\n\n    public setBrightness(brightness: number) {\n        this.#ensureTransformer();\n        this.#transformer?.brighten(brightness);\n        return this;\n    }\n\n    public setContrast(contrast: number) {\n        this.#ensureTransformer();\n        this.#transformer?.adjustContrast(contrast);\n        return this;\n    }\n\n    public hueRotate(hue: number) {\n        this.#ensureTransformer();\n        this.#transformer?.huerotate(hue);\n        return this;\n    }\n\n    public gaussianBlur(sigma: number) {\n        this.#ensureTransformer();\n        this.#transformer?.blur(sigma);\n        return this;\n    }\n\n    public unsharpMasking(sigma: number, threshold: number) {\n        this.#ensureTransformer();\n        this.#transformer?.unsharpen(sigma, threshold);\n        return this;\n    }\n\n    public resize(\n        width: number,\n        height?: number | null,\n        algorithm?: K | null\n    ) {\n        this.#ensureTransformer();\n        // @ts-expect-error\n        this.#transformer?.resize(width, height, IllustratorImageEnums.ResizeFilterType[algorithm]);\n        return this;\n    }\n\n    public get transformer() {\n        return this.#transformer;\n    }\n\n    public async getImage() {\n        this.#ensureTransformer();\n        // eslint-disable-next-line\n        return await this.#transformer!.toImage();\n    }\n\n    public getImageSync() {\n        this.#ensureTransformer();\n        // eslint-disable-next-line\n        return this.#transformer!.toImageSync();\n    }\n\n    public async renderTransformer(context: PixelTransformerRenderContext) {\n        const data = await this.getImage();\n        this.history.push((ctx) => {\n            if (\"width\" in context && \"height\" in context) {\n                // eslint-disable-next-line\n                ctx.drawImage(data, context.from, context.to, context.width!, context.height!);\n            } else {\n                ctx.drawImage(data, context.from, context.to);\n            }\n        });\n    }\n\n    public renderTransformerSync(context: PixelTransformerRenderContext) {\n        const data = this.getImageSync();\n        this.history.push((ctx) => {\n            if (\"width\" in context && \"height\" in context) {\n                // eslint-disable-next-line\n                ctx.drawImage(data, context.from, context.to, context.width!, context.height!);\n            } else {\n                ctx.drawImage(data, context.from, context.to);\n            }\n        });\n    }\n\n    public clearTransformer() {\n        this.#transformer = null;\n    }\n\n    #ensureTransformer() {\n        if (!this.#transformer) throw new Error(\"transformer is not created\");\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PixelsTool.html":{"url":"classes/PixelsTool.html","title":"class - PixelsTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PixelsTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/pixels/Pixels.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ToolBox\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clearTransformer\n                            \n                            \n                                    Public\n                                    Async\n                                createRawTransformer\n                            \n                            \n                                    Public\n                                    Async\n                                createTransformer\n                            \n                            \n                                    Public\n                                crop\n                            \n                            \n                                    Public\n                                gaussianBlur\n                            \n                            \n                                    Public\n                                    Async\n                                getImage\n                            \n                            \n                                    Public\n                                getImageSync\n                            \n                            \n                                    Public\n                                hueRotate\n                            \n                            \n                                    Public\n                                invert\n                            \n                            \n                                    Public\n                                    Async\n                                renderTransformer\n                            \n                            \n                                    Public\n                                renderTransformerSync\n                            \n                            \n                                    Public\n                                resize\n                            \n                            \n                                    Public\n                                rotate\n                            \n                            \n                                    Public\n                                setBrightness\n                            \n                            \n                                    Public\n                                setContrast\n                            \n                            \n                                    Public\n                                unsharpMasking\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    transformer\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clearTransformer\n                        \n                    \n                \n            \n            \n                \n                    \n                    clearTransformer()\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createRawTransformer\n                        \n                    \n                \n            \n            \n                \n                    \n                    createRawTransformer(src: IllustratorImageSource)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    src\n                                    \n                                                IllustratorImageSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createTransformer\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTransformer(context: PixelTransformerContext)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                PixelTransformerContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        crop\n                        \n                    \n                \n            \n            \n                \n                    \n                    crop(context: PixelTransformerContext)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                PixelTransformerContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        gaussianBlur\n                        \n                    \n                \n            \n            \n                \n                    \n                    gaussianBlur(sigma: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sigma\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getImage()\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getImageSync\n                        \n                    \n                \n            \n            \n                \n                    \n                    getImageSync()\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        hueRotate\n                        \n                    \n                \n            \n            \n                \n                    \n                    hueRotate(hue: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    hue\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        invert\n                        \n                    \n                \n            \n            \n                \n                    \n                    invert()\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        renderTransformer\n                        \n                    \n                \n            \n            \n                \n                    \n                    renderTransformer(context: PixelTransformerRenderContext)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                PixelTransformerRenderContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        renderTransformerSync\n                        \n                    \n                \n            \n            \n                \n                    \n                    renderTransformerSync(context: PixelTransformerRenderContext)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                PixelTransformerRenderContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        resize\n                        \n                    \n                \n            \n            \n                \n                    \n                    resize(width: number, height?: number | null, algorithm?: K | null)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:83\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    height\n                                    \n                                            number | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    algorithm\n                                    \n                                            K | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        rotate\n                        \n                    \n                \n            \n            \n                \n                    \n                    rotate(orientation: K)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:33\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    orientation\n                                    \n                                            K\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setBrightness\n                        \n                    \n                \n            \n            \n                \n                    \n                    setBrightness(brightness: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    brightness\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setContrast\n                        \n                    \n                \n            \n            \n                \n                    \n                    setContrast(contrast: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    contrast\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        unsharpMasking\n                        \n                    \n                \n            \n            \n                \n                    \n                    unsharpMasking(sigma: number, threshold: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sigma\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    threshold\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        transformer\n                    \n                \n\n                \n                    \n                        gettransformer()\n                    \n                \n                            \n                                \n                                    Defined in src/toolbox/pixels/Pixels.ts:94\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ToolBox } from \"../exports\";\nimport { IllustratorImageSource } from \"../../image/ImageLoader\";\nimport { IllustratorImage, IllustratorImageEnums } from \"../../image/IllustratorImage\";\n\nexport interface PixelTransformerContext {\n    from: number;\n    to: number;\n    width: number;\n    height: number;\n}\n\nexport interface PixelTransformerRenderContext {\n    from: number;\n    to: number;\n    width?: number;\n    height?: number;\n}\n\nexport class PixelsTool extends ToolBox {\n    #transformer!: IllustratorImage | null;\n\n    public async createRawTransformer(src: IllustratorImageSource) {\n        const transformer = await this.layer.illustrator.image.loadImage(src);\n        this.#transformer = transformer;\n    }\n\n    public async createTransformer(context: PixelTransformerContext) {\n        const data = this.layer.context.getImageData(context.from, context.to, context.width, context.height);\n        const transformer = await IllustratorImage.fromImageData(data);\n        this.#transformer = transformer;\n    }\n\n    public rotate(orientation: K) {\n        this.#ensureTransformer();\n        // @ts-expect-error\n        this.#transformer?.rotate(IllustratorImageEnums.Orientation[orientation]);\n\n        return this;\n    }\n\n    public crop(context: PixelTransformerContext) {\n        this.#ensureTransformer();\n        this.#transformer?.crop(context.from, context.to, context.width, context.height);\n        return this;\n    }\n\n    public invert() {\n        this.#ensureTransformer();\n        this.#transformer?.invert();\n        return this;\n    }\n\n    public setBrightness(brightness: number) {\n        this.#ensureTransformer();\n        this.#transformer?.brighten(brightness);\n        return this;\n    }\n\n    public setContrast(contrast: number) {\n        this.#ensureTransformer();\n        this.#transformer?.adjustContrast(contrast);\n        return this;\n    }\n\n    public hueRotate(hue: number) {\n        this.#ensureTransformer();\n        this.#transformer?.huerotate(hue);\n        return this;\n    }\n\n    public gaussianBlur(sigma: number) {\n        this.#ensureTransformer();\n        this.#transformer?.blur(sigma);\n        return this;\n    }\n\n    public unsharpMasking(sigma: number, threshold: number) {\n        this.#ensureTransformer();\n        this.#transformer?.unsharpen(sigma, threshold);\n        return this;\n    }\n\n    public resize(\n        width: number,\n        height?: number | null,\n        algorithm?: K | null\n    ) {\n        this.#ensureTransformer();\n        // @ts-expect-error\n        this.#transformer?.resize(width, height, IllustratorImageEnums.ResizeFilterType[algorithm]);\n        return this;\n    }\n\n    public get transformer() {\n        return this.#transformer;\n    }\n\n    public async getImage() {\n        this.#ensureTransformer();\n        // eslint-disable-next-line\n        return await this.#transformer!.toImage();\n    }\n\n    public getImageSync() {\n        this.#ensureTransformer();\n        // eslint-disable-next-line\n        return this.#transformer!.toImageSync();\n    }\n\n    public async renderTransformer(context: PixelTransformerRenderContext) {\n        const data = await this.getImage();\n        this.history.push((ctx) => {\n            if (\"width\" in context && \"height\" in context) {\n                // eslint-disable-next-line\n                ctx.drawImage(data, context.from, context.to, context.width!, context.height!);\n            } else {\n                ctx.drawImage(data, context.from, context.to);\n            }\n        });\n    }\n\n    public renderTransformerSync(context: PixelTransformerRenderContext) {\n        const data = this.getImageSync();\n        this.history.push((ctx) => {\n            if (\"width\" in context && \"height\" in context) {\n                // eslint-disable-next-line\n                ctx.drawImage(data, context.from, context.to, context.width!, context.height!);\n            } else {\n                ctx.drawImage(data, context.from, context.to);\n            }\n        });\n    }\n\n    public clearTransformer() {\n        this.#transformer = null;\n    }\n\n    #ensureTransformer() {\n        if (!this.#transformer) throw new Error(\"transformer is not created\");\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuadraticBezierCurveOptions.html":{"url":"interfaces/QuadraticBezierCurveOptions.html","title":"interface - QuadraticBezierCurveOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QuadraticBezierCurveOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/shapes/Line.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            controlPointX\n                                        \n                                \n                                \n                                        \n                                            controlPointY\n                                        \n                                \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        controlPointX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        controlPointX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        controlPointY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        controlPointY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseShapeTool } from \"../base/BaseShapeTool\";\n\nexport interface DrawArcOptions {\n    x: number;\n    y: number;\n    radius: number;\n    startAngle: number;\n    endAngle: number;\n    counterclockwise?: boolean;\n}\n\nexport interface ArcToPoint {\n    x1: number;\n    y1: number;\n    x2: number;\n    y2: number;\n    radius: number;\n}\n\nexport interface QuadraticBezierCurveOptions {\n    controlPointX: number;\n    controlPointY: number;\n    x: number;\n    y: number;\n}\n\nexport interface CubicBezierCurveOptions {\n    firstControlPointX: number;\n    firstControlPointY: number;\n    secondControlPointX: number;\n    secondControlPointY: number;\n    x: number;\n    y: number;\n}\n\nexport class LineTool extends BaseShapeTool {\n    public draw(from: number, to: number) {\n        this.history.push((ctx) => {\n            ctx.lineTo(from, to);\n        });\n\n        return this;\n    }\n\n    public arc(options: DrawArcOptions) {\n        this.history.push((ctx) => {\n            ctx.arc(\n                options.x,\n                options.y,\n                options.radius,\n                options.startAngle,\n                options.endAngle,\n                !!options.counterclockwise\n            );\n        });\n\n        return this;\n    }\n\n    public arcTo(options: ArcToPoint) {\n        this.history.push((ctx) => {\n            ctx.arcTo(options.x1, options.y1, options.x2, options.y2, options.radius);\n        });\n\n        return this;\n    }\n\n    public quadraticBezierCurve(options: QuadraticBezierCurveOptions) {\n        this.history.push((ctx) => {\n            ctx.quadraticCurveTo(options.controlPointX, options.controlPointY, options.x, options.y);\n        });\n\n        return this;\n    }\n\n    public cubicBezierCurve(options: CubicBezierCurveOptions) {\n        this.history.push((ctx) => {\n            ctx.bezierCurveTo(\n                options.firstControlPointX,\n                options.firstControlPointY,\n                options.secondControlPointX,\n                options.secondControlPointY,\n                options.x,\n                options.y\n            );\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RawImageData.html":{"url":"interfaces/RawImageData.html","title":"interface - RawImageData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RawImageData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/image/IllustratorImage.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     Uint8ClampedArray | Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Uint8ClampedArray | Buffer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    Transformer,\n    Orientation,\n    AvifConfig,\n    ChromaSubsampling,\n    CompressionType,\n    JsColorType,\n    FilterType,\n    ResizeFilterType,\n    Metadata\n} from \"@napi-rs/image\";\nimport { ImageLoader } from \"./ImageLoader\";\nimport { ImageData } from \"@napi-rs/canvas\";\n\nexport { AvifConfig, Metadata };\n\nexport type IllustratorImageData = ImageData & { colorSpace: PredefinedColorSpace };\n\n// prettier-ignore\nexport const IllustratorImageEnums = {\n    // @ts-expect-error\n    Orientation, ChromaSubsampling, CompressionType, JsColorType, FilterType, ResizeFilterType\n};\n\nexport interface RawImageData {\n    data: Uint8ClampedArray | Buffer;\n    width: number;\n    height: number;\n}\n\nexport class IllustratorImage extends Transformer {\n    public constructor(private readonly _data: Buffer) {\n        super(_data);\n    }\n\n    public get source() {\n        return this._data;\n    }\n\n    public async toImage() {\n        const png = await super.png();\n        return ImageLoader.createImage(png);\n    }\n\n    public toImageSync() {\n        const png = super.pngSync();\n        return ImageLoader.createImage(png);\n    }\n\n    public static async fromImageData(data: ImageData | RawImageData) {\n        const transformer = super.fromRgbaPixels(data.data, data.width, data.height);\n        const iImage = new IllustratorImage(await transformer.rawPixels());\n        return iImage;\n    }\n\n    public static fromImageDataSync(data: ImageData | RawImageData) {\n        const transformer = super.fromRgbaPixels(data.data, data.width, data.height);\n        const iImage = new IllustratorImage(transformer.rawPixelsSync());\n        return iImage;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RectangleOptions.html":{"url":"interfaces/RectangleOptions.html","title":"interface - RectangleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RectangleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/shapes/Rectangle.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseShapeTool } from \"../base/BaseShapeTool\";\n\nexport interface RectangleOptions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\nexport interface RoundedRectangleOptions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    radius: number;\n}\n\nexport class RectangleTool extends BaseShapeTool {\n    public draw(options: RectangleOptions) {\n        this.history.push((ctx) => {\n            ctx.rect(options.x, options.y, options.width, options.height);\n        });\n\n        return this;\n    }\n\n    public drawRounded(options: RoundedRectangleOptions) {\n        if (options.width  {\n            ctx.beginPath();\n            ctx.moveTo(options.x + options.radius, options.y);\n            ctx.arcTo(\n                options.x + options.width,\n                options.y,\n                options.x + options.width,\n                options.y + options.height,\n                options.radius\n            );\n            ctx.arcTo(\n                options.x + options.width,\n                options.y + options.height,\n                options.x,\n                options.y + options.height,\n                options.radius\n            );\n            ctx.arcTo(options.x, options.y + options.height, options.x, options.y, options.radius);\n            ctx.arcTo(options.x, options.y, options.x + options.width, options.y, options.radius);\n            ctx.closePath();\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RectangleTool.html":{"url":"classes/RectangleTool.html","title":"class - RectangleTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RectangleTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/shapes/Rectangle.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseShapeTool\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                drawRounded\n                            \n                            \n                                    Public\n                                addPoint\n                            \n                            \n                                    Public\n                                clip\n                            \n                            \n                                    Public\n                                fill\n                            \n                            \n                                    Public\n                                move\n                            \n                            \n                                    Public\n                                removePoint\n                            \n                            \n                                    Public\n                                setDashOffset\n                            \n                            \n                                    Public\n                                setFillColor\n                            \n                            \n                                    Public\n                                setLineCap\n                            \n                            \n                                    Public\n                                setLineDash\n                            \n                            \n                                    Public\n                                setLineJoinStyle\n                            \n                            \n                                    Public\n                                setLineWidth\n                            \n                            \n                                    Public\n                                setMiterLimit\n                            \n                            \n                                    Public\n                                setStrokeColor\n                            \n                            \n                                    Public\n                                stroke\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        draw\n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(options: RectangleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/shapes/Rectangle.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                RectangleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        drawRounded\n                        \n                    \n                \n            \n            \n                \n                    \n                    drawRounded(options: RoundedRectangleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/shapes/Rectangle.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                RoundedRectangleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addPoint\n                        \n                    \n                \n            \n            \n                \n                    \n                    addPoint()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:62\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clip\n                        \n                    \n                \n            \n            \n                \n                    \n                    clip(options?: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:116\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fill\n                        \n                    \n                \n            \n            \n                \n                    \n                    fill(options?: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:86\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        move\n                        \n                    \n                \n            \n            \n                \n                    \n                    move(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:78\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removePoint\n                        \n                    \n                \n            \n            \n                \n                    \n                    removePoint()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:70\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setDashOffset\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDashOffset(offset: number)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setFillColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setFillColor(color: string | CanvasGradient | CanvasPattern)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:6\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                            string | CanvasGradient | CanvasPattern\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineCap\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineCap(lineCapStyle: CanvasLineCap)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lineCapStyle\n                                    \n                                            CanvasLineCap\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineDash\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineDash(segments: number[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:108\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    segments\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineJoinStyle\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineJoinStyle(style: \"round\" | \"bevel\" | \"miter\")\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:46\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    style\n                                    \n                                            \"round\" | \"bevel\" | \"miter\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineWidth\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineWidth(width: number)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:22\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setMiterLimit\n                        \n                    \n                \n            \n            \n                \n                    \n                    setMiterLimit(limit: number)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:54\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setStrokeColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setStrokeColor(color: string | CanvasGradient | CanvasPattern)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:14\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                            string | CanvasGradient | CanvasPattern\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        stroke\n                        \n                    \n                \n            \n            \n                \n                    \n                    stroke(options?: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:100\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BaseShapeTool } from \"../base/BaseShapeTool\";\n\nexport interface RectangleOptions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\nexport interface RoundedRectangleOptions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    radius: number;\n}\n\nexport class RectangleTool extends BaseShapeTool {\n    public draw(options: RectangleOptions) {\n        this.history.push((ctx) => {\n            ctx.rect(options.x, options.y, options.width, options.height);\n        });\n\n        return this;\n    }\n\n    public drawRounded(options: RoundedRectangleOptions) {\n        if (options.width  {\n            ctx.beginPath();\n            ctx.moveTo(options.x + options.radius, options.y);\n            ctx.arcTo(\n                options.x + options.width,\n                options.y,\n                options.x + options.width,\n                options.y + options.height,\n                options.radius\n            );\n            ctx.arcTo(\n                options.x + options.width,\n                options.y + options.height,\n                options.x,\n                options.y + options.height,\n                options.radius\n            );\n            ctx.arcTo(options.x, options.y + options.height, options.x, options.y, options.radius);\n            ctx.arcTo(options.x, options.y, options.x + options.width, options.y, options.radius);\n            ctx.closePath();\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RoundedRectangleOptions.html":{"url":"interfaces/RoundedRectangleOptions.html","title":"interface - RoundedRectangleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RoundedRectangleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/shapes/Rectangle.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            radius\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        radius\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        radius:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseShapeTool } from \"../base/BaseShapeTool\";\n\nexport interface RectangleOptions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\nexport interface RoundedRectangleOptions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    radius: number;\n}\n\nexport class RectangleTool extends BaseShapeTool {\n    public draw(options: RectangleOptions) {\n        this.history.push((ctx) => {\n            ctx.rect(options.x, options.y, options.width, options.height);\n        });\n\n        return this;\n    }\n\n    public drawRounded(options: RoundedRectangleOptions) {\n        if (options.width  {\n            ctx.beginPath();\n            ctx.moveTo(options.x + options.radius, options.y);\n            ctx.arcTo(\n                options.x + options.width,\n                options.y,\n                options.x + options.width,\n                options.y + options.height,\n                options.radius\n            );\n            ctx.arcTo(\n                options.x + options.width,\n                options.y + options.height,\n                options.x,\n                options.y + options.height,\n                options.radius\n            );\n            ctx.arcTo(options.x, options.y + options.height, options.x, options.y, options.radius);\n            ctx.arcTo(options.x, options.y, options.x + options.width, options.y, options.radius);\n            ctx.closePath();\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShadowTool.html":{"url":"classes/ShadowTool.html","title":"class - ShadowTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShadowTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/filters/Shadow.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ToolBox\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                setBlur\n                            \n                            \n                                    Public\n                                setColor\n                            \n                            \n                                    Public\n                                setOffsetX\n                            \n                            \n                                    Public\n                                setOffsetY\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setBlur\n                        \n                    \n                \n            \n            \n                \n                    \n                    setBlur(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Shadow.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setColor(color: string)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Shadow.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setOffsetX\n                        \n                    \n                \n            \n            \n                \n                    \n                    setOffsetX(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Shadow.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setOffsetY\n                        \n                    \n                \n            \n            \n                \n                    \n                    setOffsetY(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Shadow.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ToolBox } from \"../base/ToolBox\";\n\nexport class ShadowTool extends ToolBox {\n    public setColor(color: string) {\n        this.history.push((ctx) => {\n            ctx.shadowColor = color;\n        });\n\n        return this;\n    }\n\n    public setBlur(amount: number) {\n        this.history.push((ctx) => {\n            ctx.shadowBlur = amount;\n        });\n\n        return this;\n    }\n\n    public setOffsetX(amount: number) {\n        this.history.push((ctx) => {\n            ctx.shadowOffsetX = amount;\n        });\n\n        return this;\n    }\n\n    public setOffsetY(amount: number) {\n        this.history.push((ctx) => {\n            ctx.shadowOffsetY = amount;\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SharpenTool.html":{"url":"classes/SharpenTool.html","title":"class - SharpenTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SharpenTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/filters/Sharpen.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ConvolutionTool\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                applySharpness\n                            \n                            \n                                    Public\n                                convolute\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        applySharpness\n                        \n                    \n                \n            \n            \n                \n                    \n                    applySharpness(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Sharpen.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        convolute\n                        \n                    \n                \n            \n            \n                \n                    \n                    convolute(options: ConvolutionOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ConvolutionTool\n\n                \n            \n            \n                \n                        Defined in         ConvolutionTool:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ConvolutionOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConvolutionTool } from \"./ConvolutionFilter\";\n\nexport class SharpenTool extends ConvolutionTool {\n    public applySharpness(amount = 1) {\n        amount = amount \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TextDataSource.html":{"url":"interfaces/TextDataSource.html","title":"interface - TextDataSource","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TextDataSource\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/DataSource.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            config\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        config:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IllustratorImageSource } from \"../image/ImageLoader\";\n\nexport interface IllustratorDataSource {\n    name: string;\n    type: \"text\" | \"image\";\n    data: TextDataSource | ImageDataSource;\n}\n\nexport interface TextDataSource {\n    value: string;\n    config: {\n        x: number;\n        y: number;\n        maxWidth?: number;\n        font: string;\n        fontPath?: string;\n    };\n}\n\n// TODO: template api\nexport interface ImageDataSource {\n    value: IllustratorImageSource;\n    config: {\n        x: number;\n        y: number;\n        width: number;\n        height: number;\n        radius?: number;\n    };\n}\n\nexport class DataSource {\n    public data: Array = [];\n\n    public loadData(data: Array) {\n        if (!Array.isArray(data)) throw new TypeError(\"data source must be array\");\n        this.data = data;\n    }\n\n    public addData(data: IllustratorDataSource) {\n        this.data.push(data);\n    }\n\n    public removeData(nameOrFn: string | ((ctx: IllustratorDataSource) => boolean)) {\n        if (typeof nameOrFn === \"string\") this.data = this.data.filter((ds) => ds.name === nameOrFn);\n        if (typeof nameOrFn === \"function\") this.data = this.data.filter(nameOrFn);\n        throw new Error(\"invalid parameter\");\n    }\n\n    public get(nameOrFn: string | ((ctx: IllustratorDataSource) => boolean)) {\n        return this.data.find(typeof nameOrFn === \"function\" ? nameOrFn : (fn) => fn.name === nameOrFn);\n    }\n\n    public toJSON() {\n        return this.data;\n    }\n\n    public toArray() {\n        return this.data;\n    }\n\n    public toString(): `DataSource` {\n        return `DataSource`;\n    }\n\n    public clone() {\n        const ds = new DataSource();\n        ds.loadData(this.data.slice());\n        return ds;\n    }\n\n    public *[Symbol.iterator](): IterableIterator {\n        yield* this.data ?? [];\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TextTool.html":{"url":"classes/TextTool.html","title":"class - TextTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TextTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/text/Text.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ToolBox\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getFonts\n                            \n                            \n                                    Public\n                                hasFont\n                            \n                            \n                                    Public\n                                measure\n                            \n                            \n                                    Public\n                                registerFont\n                            \n                            \n                                    Public\n                                registerFontPath\n                            \n                            \n                                    Public\n                                registerFontsDir\n                            \n                            \n                                    Public\n                                setColor\n                            \n                            \n                                    Public\n                                setDirection\n                            \n                            \n                                    Public\n                                setFont\n                            \n                            \n                                    Public\n                                setStrokeColor\n                            \n                            \n                                    Public\n                                setTextAlignment\n                            \n                            \n                                    Public\n                                setTextBaseline\n                            \n                            \n                                    Public\n                                strokeText\n                            \n                            \n                                    Public\n                                writeText\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getFonts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFonts()\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        hasFont\n                        \n                    \n                \n            \n            \n                \n                    \n                    hasFont(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        measure\n                        \n                    \n                \n            \n            \n                \n                    \n                    measure(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        registerFont\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerFont(font: Buffer, nameAlias?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    font\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    nameAlias\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        registerFontPath\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerFontPath(fontPath: string, nameAlias?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fontPath\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    nameAlias\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        registerFontsDir\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerFontsDir(fontDir: string)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fontDir\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setColor(color: string | CanvasGradient | CanvasPattern)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                            string | CanvasGradient | CanvasPattern\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setDirection\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDirection(direction: \"inherit\" | \"ltr\" | \"rtl\")\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    direction\n                                    \n                                            \"inherit\" | \"ltr\" | \"rtl\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setFont\n                        \n                    \n                \n            \n            \n                \n                    \n                    setFont(name: string, size: string, style?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    size\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    style\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setStrokeColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setStrokeColor(color: string | CanvasGradient | CanvasPattern)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                            string | CanvasGradient | CanvasPattern\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setTextAlignment\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTextAlignment(alignment: \"center\" | \"end\" | \"left\" | \"right\" | \"start\")\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    alignment\n                                    \n                                            \"center\" | \"end\" | \"left\" | \"right\" | \"start\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setTextBaseline\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTextBaseline(alignment: \"alphabetic\" | \"bottom\" | \"hanging\" | \"ideographic\" | \"middle\" | \"top\")\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    alignment\n                                    \n                                            \"alphabetic\" | \"bottom\" | \"hanging\" | \"ideographic\" | \"middle\" | \"top\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        strokeText\n                        \n                    \n                \n            \n            \n                \n                    \n                    strokeText(text: string, x: number, y: number, maxWidth?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxWidth\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        writeText\n                        \n                    \n                \n            \n            \n                \n                    \n                    writeText(text: string, x: number, y: number, maxWidth?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxWidth\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ToolBox } from \"../base/ToolBox\";\nimport { GlobalFonts } from \"@napi-rs/canvas\";\nimport { makeArgs } from \"../../utils/makeArgs\";\n\nexport class TextTool extends ToolBox {\n    public registerFont(font: Buffer, nameAlias?: string) {\n        return GlobalFonts.register(font, nameAlias);\n    }\n\n    public registerFontPath(fontPath: string, nameAlias?: string) {\n        return GlobalFonts.registerFromPath(fontPath, nameAlias);\n    }\n\n    public registerFontsDir(fontDir: string) {\n        return GlobalFonts.loadFontsFromDir(fontDir);\n    }\n\n    public getFonts() {\n        return GlobalFonts.families;\n    }\n\n    public hasFont(name: string) {\n        return GlobalFonts.has(name);\n    }\n\n    public setDirection(direction: \"inherit\" | \"ltr\" | \"rtl\") {\n        this.history.push((ctx) => {\n            ctx.direction = direction;\n        });\n\n        return this;\n    }\n\n    public setTextAlignment(alignment: \"center\" | \"end\" | \"left\" | \"right\" | \"start\") {\n        this.history.push((ctx) => {\n            ctx.textAlign = alignment;\n        });\n\n        return this;\n    }\n\n    public setTextBaseline(alignment: \"alphabetic\" | \"bottom\" | \"hanging\" | \"ideographic\" | \"middle\" | \"top\") {\n        this.history.push((ctx) => {\n            ctx.textBaseline = alignment;\n        });\n\n        return this;\n    }\n\n    public setFont(name: string, size: string, style?: string) {\n        this.history.push((ctx) => {\n            ctx.font = `${style ? style + \" \" : \"\"}${name}${size ? \" \" + size : \"\"}`;\n        });\n\n        return this;\n    }\n\n    public setColor(color: string | CanvasGradient | CanvasPattern) {\n        this.history.push((ctx) => {\n            ctx.fillStyle = color;\n        });\n\n        return this;\n    }\n\n    public setStrokeColor(color: string | CanvasGradient | CanvasPattern) {\n        this.history.push((ctx) => {\n            ctx.strokeStyle = color;\n        });\n\n        return this;\n    }\n\n    public writeText(text: string, x: number, y: number, maxWidth?: number) {\n        this.history.push((ctx) => {\n            // @ts-expect-error\n            ctx.fillText(...makeArgs((el) => el != null, [text, x, y, maxWidth]));\n        });\n\n        return this;\n    }\n\n    public strokeText(text: string, x: number, y: number, maxWidth?: number) {\n        this.history.push((ctx) => {\n            // @ts-expect-error\n            ctx.strokeText(...makeArgs((el) => el != null, [text, x, y, maxWidth]));\n        });\n\n        return this;\n    }\n\n    public measure(text: string) {\n        return this.layer.utils.measureText(text);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ToolBox.html":{"url":"classes/ToolBox.html","title":"class - ToolBox","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ToolBox\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/base/ToolBox.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(layer: Layer, autoClear)\n                    \n                \n                        \n                            \n                                Defined in src/toolbox/base/ToolBox.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        layer\n                                                  \n                                                        \n                                                                        Layer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        autoClear\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/toolbox/base/ToolBox.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/toolbox/base/ToolBox.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                    \n                        \n                                Defined in src/toolbox/base/ToolBox.ts:9\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/ToolBox.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/ToolBox.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/ToolBox.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SKRSContext2D } from \"@napi-rs/canvas\";\nimport { Layer } from \"../../layer/Layer\";\n\nexport type Awaitable = Promise | T;\nexport type HistoryCallback = (ctx: SKRSContext2D) => Awaitable;\n\nexport class ToolBox {\n    public history: HistoryCallback[] = [];\n    public constructor(public readonly layer: Layer, public autoClear = false) {}\n\n    public save() {\n        this.history.push((ctx) => {\n            ctx.save();\n        });\n\n        return this;\n    }\n\n    public restore() {\n        this.history.push((ctx) => {\n            ctx.restore();\n        });\n\n        return this;\n    }\n\n    public render() {\n        this.layer.applyTool(this);\n        if (this.autoClear) this.history = [];\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TransformOptions.html":{"url":"interfaces/TransformOptions.html","title":"interface - TransformOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TransformOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/transform/Transform.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            horizontalScaling\n                                        \n                                \n                                \n                                        \n                                            horizontalSkewing\n                                        \n                                \n                                \n                                        \n                                            horizontalTranslation\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            verticalScaling\n                                        \n                                \n                                \n                                        \n                                            verticalSkewing\n                                        \n                                \n                                \n                                        \n                                            verticalTranslation\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        horizontalScaling\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        horizontalScaling:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        horizontalSkewing\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        horizontalSkewing:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        horizontalTranslation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        horizontalTranslation:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        verticalScaling\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        verticalScaling:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        verticalSkewing\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        verticalSkewing:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        verticalTranslation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        verticalTranslation:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ToolBox } from \"../base/ToolBox\";\n\nexport interface TransformOptions {\n    horizontalScaling?: number;\n    verticalSkewing: number;\n    horizontalSkewing: number;\n    verticalScaling?: number;\n    horizontalTranslation: number;\n    verticalTranslation: number;\n}\n\nexport class TransformTool extends ToolBox {\n    public translate(x: number, y: number) {\n        this.history.push((ctx) => {\n            ctx.translate(x, y);\n        });\n\n        return this;\n    }\n\n    public transform(options: TransformOptions) {\n        this.history.push((ctx) => {\n            options.horizontalScaling ??= 1;\n            options.verticalScaling ??= 1;\n\n            ctx.transform(\n                options.horizontalScaling,\n                options.verticalSkewing,\n                options.horizontalSkewing,\n                options.verticalScaling,\n                options.horizontalTranslation,\n                options.verticalTranslation\n            );\n        });\n\n        return this;\n    }\n\n    public setTransform(options: TransformOptions) {\n        this.history.push((ctx) => {\n            options.horizontalScaling ??= 1;\n            options.verticalScaling ??= 1;\n\n            ctx.setTransform(\n                options.horizontalScaling,\n                options.verticalSkewing,\n                options.horizontalSkewing,\n                options.verticalScaling,\n                options.horizontalTranslation,\n                options.verticalTranslation\n            );\n        });\n\n        return this;\n    }\n\n    public resetTransform() {\n        this.history.push((ctx) => {\n            ctx.resetTransform();\n        });\n\n        return this;\n    }\n\n    public getTransform() {\n        const transformation = this.layer.utils.getLayerTransformation();\n\n        return {\n            horizontalScaling: transformation.a,\n            verticalSkewing: transformation.b,\n            horizontalSkewing: transformation.c,\n            verticalScaling: transformation.d,\n            horizontalTranslation: transformation.e,\n            verticalTranslation: transformation.f\n        } as TransformOptions;\n    }\n\n    public rotate(angle: number) {\n        this.history.push((ctx) => {\n            ctx.rotate(angle);\n        });\n\n        return this;\n    }\n\n    public scale(x: number, y: number) {\n        this.history.push((ctx) => {\n            ctx.scale(x, y);\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TransformTool.html":{"url":"classes/TransformTool.html","title":"class - TransformTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TransformTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/transform/Transform.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ToolBox\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getTransform\n                            \n                            \n                                    Public\n                                resetTransform\n                            \n                            \n                                    Public\n                                rotate\n                            \n                            \n                                    Public\n                                scale\n                            \n                            \n                                    Public\n                                setTransform\n                            \n                            \n                                    Public\n                                transform\n                            \n                            \n                                    Public\n                                translate\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getTransform\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransform()\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/transform/Transform.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         TransformOptions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        resetTransform\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetTransform()\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/transform/Transform.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        rotate\n                        \n                    \n                \n            \n            \n                \n                    \n                    rotate(angle: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/transform/Transform.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    angle\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        scale\n                        \n                    \n                \n            \n            \n                \n                    \n                    scale(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/transform/Transform.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setTransform\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTransform(options: TransformOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/transform/Transform.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                TransformOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(options: TransformOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/transform/Transform.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                TransformOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        translate\n                        \n                    \n                \n            \n            \n                \n                    \n                    translate(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/transform/Transform.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ToolBox } from \"../base/ToolBox\";\n\nexport interface TransformOptions {\n    horizontalScaling?: number;\n    verticalSkewing: number;\n    horizontalSkewing: number;\n    verticalScaling?: number;\n    horizontalTranslation: number;\n    verticalTranslation: number;\n}\n\nexport class TransformTool extends ToolBox {\n    public translate(x: number, y: number) {\n        this.history.push((ctx) => {\n            ctx.translate(x, y);\n        });\n\n        return this;\n    }\n\n    public transform(options: TransformOptions) {\n        this.history.push((ctx) => {\n            options.horizontalScaling ??= 1;\n            options.verticalScaling ??= 1;\n\n            ctx.transform(\n                options.horizontalScaling,\n                options.verticalSkewing,\n                options.horizontalSkewing,\n                options.verticalScaling,\n                options.horizontalTranslation,\n                options.verticalTranslation\n            );\n        });\n\n        return this;\n    }\n\n    public setTransform(options: TransformOptions) {\n        this.history.push((ctx) => {\n            options.horizontalScaling ??= 1;\n            options.verticalScaling ??= 1;\n\n            ctx.setTransform(\n                options.horizontalScaling,\n                options.verticalSkewing,\n                options.horizontalSkewing,\n                options.verticalScaling,\n                options.horizontalTranslation,\n                options.verticalTranslation\n            );\n        });\n\n        return this;\n    }\n\n    public resetTransform() {\n        this.history.push((ctx) => {\n            ctx.resetTransform();\n        });\n\n        return this;\n    }\n\n    public getTransform() {\n        const transformation = this.layer.utils.getLayerTransformation();\n\n        return {\n            horizontalScaling: transformation.a,\n            verticalSkewing: transformation.b,\n            horizontalSkewing: transformation.c,\n            verticalScaling: transformation.d,\n            horizontalTranslation: transformation.e,\n            verticalTranslation: transformation.f\n        } as TransformOptions;\n    }\n\n    public rotate(angle: number) {\n        this.history.push((ctx) => {\n            ctx.rotate(angle);\n        });\n\n        return this;\n    }\n\n    public scale(x: number, y: number) {\n        this.history.push((ctx) => {\n            ctx.scale(x, y);\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n0.3.4 (2022-06-29)\n0.3.3 (2022-06-18)\nFeatures\n\nadd Layer and ToolBox utilities (efbcb18)\nLayerUtils: add getCenterPoint method (1fec6bb)\n\n0.3.2 (2022-06-18)\nBug Fixes\n\nutils: fix makeArgs filter (819a50c)\n\n0.3.1 (2022-06-18)\nBug Fixes\n\nTextTool: flatten args (8b4f10b)\n\n0.3.0 (2022-06-18)\nBug Fixes\n\nEraser: close path (7825830)\n\nFeatures\n\nLayerTools: add clearCache method (2000cb7)\nLayerTools: add layer tools utility (0f8f753)\nPixelsTool: add pixels utility base (e42a539)\nPixelTool: add manipulation methods (5156a89)\n\n0.1.0 (2022-06-14)\nBug Fixes\n\nConvolutionFilter: remove worker impl (a1c559a)\nexport canvas and image (9b18a82)\nIllustrator: skip background layer (488fc9f)\nLayer: add tool instance check (eefa81d)\nLayer: expose context by default (788adbd)\nmove commitlint to pre-commit (5a8065f)\nText: text tool not rendering (93a3269)\n\nFeatures\n\nadd base api methods (9b3316b)\nadd layer manager and color utilities (783dd58)\nadd loadImage utility (c24ef1d)\ncolors: add color api base (7cd61f7)\nConvolutionFilter: export matrices (de626b5)\nConvolution: implement convolution filter (a7584e9)\nDataSource: add base (cfcdd83)\nEllipse: add circle method (5af4c28)\nIllustrator: add animation api (0074071)\nIllustrator: add image utilities api (a209619)\nIllustratorImage: add ImageData exports (ab07a24)\nImageLoader: add ImageData support (d96aa88)\nImageLoader: add Uint8Array source type (2a11331)\nImageTool: add rounded image support (#26) (a7a69c3)\ninitialize project base (71e80d0)\nLayerUtils: add image data methods (c8be6f1)\nRectangle: add drawRounded method (#21) (896a98b)\nshapes: ellipse tool (afd8532)\ntoolbox: add more tools (c1a2b88)\ntoolbox: add sharpen tool (4132053)\ntoolbox: add transform tool (e0dc795)\nToolBox: shape utilities (65526ea)\nTools: add more tools (d4c5685)\nutils: add ColorUtil (10398f8)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\nContribution Guide\nThanks for your interest in contributing to this project. We don't have strict rules in general, but here are the things\nto be followed while contributing to this project.\nCode Style\nFormatting\n\nMake sure to format the code before the deployment (run yarn format to do the magic)\n\nFile names\n\nMake sure to use PascalCase for the files containing a class (Eg: Illustrator, LayerManager etc.)\nUse lowercase/camelCase for other files.\n\nRules\n\nAlways use camelCase for function names\nUse PascalCase for class names\nUse English\nProperly document the APIs\nAlways test the code properly before making a pull requests\nMake sure to generate changelogs, and explain what the update does.\nFollow conventional commits\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            consumeStream   (src/.../ImageLoader.ts)\n                        \n                        \n                            createImage   (src/.../ImageLoader.ts)\n                        \n                        \n                            generateRandomId   (src/.../randomId.ts)\n                        \n                        \n                            httpReq   (src/.../ImageLoader.ts)\n                        \n                        \n                            makeArgs   (src/.../makeArgs.ts)\n                        \n                        \n                            makeRequest   (src/.../ImageLoader.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/image/ImageLoader.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        consumeStream\n                        \n                    \n                \n            \n            \n                \nconsumeStream(stream: Readable)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stream\n                                    \n                                            Readable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createImage\n                        \n                    \n                \n            \n            \n                \ncreateImage(source: Buffer, bufferOnly)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    source\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    bufferOnly\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        httpReq\n                        \n                    \n                \n            \n            \n                \nhttpReq(link)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    link\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        makeRequest\n                        \n                    \n                \n            \n            \n                \nmakeRequest(link, redirectCount: number, resolve, reject)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    link\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    redirectCount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resolve\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reject\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/utils/randomId.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateRandomId\n                        \n                    \n                \n            \n            \n                \ngenerateRandomId()\n                \n            \n\n\n\n\n        \n    \n    src/utils/makeArgs.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        makeArgs\n                        \n                    \n                \n            \n            \n                \nmakeArgs(filter?, ...args: undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    args\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n    \n    Illustrator.js\n    JavaScript image processing library\n\n\n\nInstallation\n# install with npm\n$ npm install illustrator.js\n# install with yarn\n$ yarn add illustrator.js🎉 No build tools required!\nFeatures\n\nIllustrator is fast, powered by @napi-rs/canvas 🚀\nIllustrator provides beginner friendly API 🤓\nTypeScript supported 💪\nLayers API 🎚️\nColor utilities API 🎨\nFilters 📸\nTools such as eraser, shapes, text, etc. ⚒️\nImage manipulation (crop, brightness, blur, sharpness, format conversion, compression and much more..)\nAnimation API (GIF) 😎\n\nand more...\nDocumentation\nhttps://illustrator.js.org\nnpm\nhttps://www.npmjs.com/package/illustrator.js\nQuick Example\nCreating GIF\n// import\nimport { Illustrator } from \"illustrator.js\";\nimport fs from \"fs\";\n\n// create illustrator instance\nconst illustrator = new Illustrator(512, 512);\n\n// colors array\nconst colors = [\"#FFFFFF\", \"#FF0000\", \"#FFFF00\", \"#FF00FF\", \"#00FF00\", \"#0000FF\"];\n\n// for a color in colors array, create new layer and fill the layer with that color\nfor (const color of colors) {\n    // create new layer\n    const layer = illustrator.layers.createLayer({\n        name: color\n    });\n    // create background color tool\n    const bgTool = layer.tools.get(\"BackgroundColorTool\");\n    // set fill color\n    bgTool.setFillColor(color);\n    // fill background\n    bgTool.fill(0, 0, illustrator.width, illustrator.height);\n    // render this tool to the layer\n    bgTool.render();\n}\n\n// get animation api\nconst animation = illustrator.animation;\n// get all layers and transform to animation frame\nconst layers = illustrator.layers.getAllLayers().map(m => ({\n    duration: 500,\n    frame: m.layer\n}));\n// animation config, set repeat to infinite (or 0) and add our layers to frames\nanimation.setRepeat(0).addFrames(layers);\n\n// render the frames\nconst output = await animation.createAnimation();\n// write the output file\noutput.pipe(fs.createWriteStream(\"./animation.gif\"));Output Preview\n\n\nOther Examples\nCheck out ~/examples for more.\nCanvacord\nIt may be hard to get simple things done via this library.\nCheck out Canvacord for beginner-friendly utility APIs, built with Illustrator.js.\nSpecial thanks to 💖\nBrooooooklyn and the people behind napi-rs. Illustrator.js is here only because of their hard work behind the projects under napi-rs.\nDiscord\nJoin my official Discord server: https://discord.gg/CR8JxrxSwr\nHelp me keep this project alive\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 DevAndromeda\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    30 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    24 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.3.4\n        \n            Description : JavaScript image processing library\n        \n            Keywords : illustrator, canvas, image, javascript, api, processing, ijs\n        \n            Homepage : https://illustrator.js.org\n        \n            Bugs : https://github.com/DevAndromeda/illustrator.js/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/DevAndromeda/illustrator.js.git\n        \n            Author : DevAndromeda \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Awaitable   (src/.../ToolBox.ts)\n                        \n                        \n                            DrawCircleOptions   (src/.../Ellipse.ts)\n                        \n                        \n                            FilterArgs   (src/.../Filter.ts)\n                        \n                        \n                            HistoryCallback   (src/.../ToolBox.ts)\n                        \n                        \n                            IllustratorImageData   (src/.../IllustratorImage.ts)\n                        \n                        \n                            IllustratorImageSource   (src/.../ImageLoader.ts)\n                        \n                        \n                            LayerResolvable   (src/.../LayerManager.ts)\n                        \n                        \n                            LayerToolHistory   (src/.../Layer.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/toolbox/base/ToolBox.ts\n    \n    \n        \n            \n                \n                    \n                    Awaitable\n                \n            \n            \n                \n                        Promise | T\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HistoryCallback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/toolbox/shapes/Ellipse.ts\n    \n    \n        \n            \n                \n                    \n                    DrawCircleOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/toolbox/filters/Filter.ts\n    \n    \n        \n            \n                \n                    \n                    FilterArgs\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/image/IllustratorImage.ts\n    \n    \n        \n            \n                \n                    \n                    IllustratorImageData\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/image/ImageLoader.ts\n    \n    \n        \n            \n                \n                    \n                    IllustratorImageSource\n                \n            \n            \n                \n                        string | URL | Buffer | Image | Canvas | ArrayBuffer | SharedArrayBuffer | Uint8Array | Layer | Illustrator | IllustratorImage | ImageData\n\n                \n            \n        \n    \n    src/layer/LayerManager.ts\n    \n    \n        \n            \n                \n                    \n                    LayerResolvable\n                \n            \n            \n                \n                            number | Layer | string\n\n                \n            \n        \n    \n    src/layer/Layer.ts\n    \n    \n        \n            \n                \n                    \n                    LayerToolHistory\n                \n            \n            \n                \n                        Array | void>[]\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IllustratorImageEnums   (src/.../IllustratorImage.ts)\n                        \n                        \n                            REDIRECT_STATUSES   (src/.../ImageLoader.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/image/IllustratorImage.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IllustratorImageEnums\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    // @ts-expect-error\n    Orientation, ChromaSubsampling, CompressionType, JsColorType, FilterType, ResizeFilterType\n}\n                    \n                \n\n\n        \n    \n\n    src/image/ImageLoader.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REDIRECT_STATUSES\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Set([301, 302])\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
