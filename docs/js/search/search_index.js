var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ArcToPoint.html",[0,0.008,1,2.344]],["body/interfaces/ArcToPoint.html",[0,0.014,1,3.885,2,1.074,3,0.209,4,0.166,5,0.166,6,2.863,7,0.125,8,0.361,9,2.32,10,4.119,11,4.42,12,4.119,13,4.42,14,0.55,15,0.2,16,0.017,17,0.209,18,2.49,19,2.109,20,0.3,21,3.487,22,1.563,23,1.435,24,2.355,25,2.501,26,2.501,27,1.273,28,3.487,29,2.863,30,2.863,31,3.487,32,2.863,33,2.863,34,2.863,35,2.863,36,0.245,37,2.668,38,0.865,39,0.335,40,2.863,41,1.795,42,2.863,43,0.48,44,2.863,45,2.501,46,3.07,47,2.774,48,2.49,49,2.501,50,2.501,51,2.501,52,2.863,53,2.863,54,2.863,55,2.863,56,2.863,57,2.863,58,2.863,59,2.863,60,2.863,61,2.863,62,2.863,63,2.863,64,2.863,65,2.863,66,0.012,67,0.012]],["title/classes/BackgroundColorTool.html",[36,0.215,68,3.324]],["body/classes/BackgroundColorTool.html",[3,0.176,4,0.14,5,0.14,7,0.105,8,0.322,14,0.54,15,0.2,16,0.017,17,0.176,20,0.158,22,1.25,23,1.609,36,0.206,38,1.007,39,0.378,41,1.693,43,0.453,66,0.011,67,0.011,68,4.406,69,0.728,70,3.689,71,1.857,72,1.927,73,1.547,74,0.963,75,1.104,76,1.052,77,3.107,78,1.912,79,3.334,80,3.107,81,5.1,82,3.334,83,2.019,84,2.019,85,1.25,86,1.052,87,0.904,88,2.708,89,1.531,90,2.017,91,1.332,92,1.459,93,5.1,94,5.689,95,5.536,96,3.689,97,1.307,98,0.807,99,0.764,100,1.475,101,3.689,102,0.904,103,3.334,104,1.54,105,4.171,106,4.171,107,3.689,108,2.382,109,3.107,110,3.689,111,5.1,112,3.689,113,5.1,114,3.689,115,1.459,116,1.459,117,1.687,118,2.856,119,3.689,120,3.689,121,2.856,122,3.187,123,3.187]],["title/classes/BaseShapeTool.html",[18,1.674,36,0.215]],["body/classes/BaseShapeTool.html",[3,0.125,4,0.099,5,0.099,7,0.074,8,0.25,14,0.505,15,0.213,16,0.017,17,0.229,18,1.725,20,0.112,22,0.64,23,1.206,36,0.146,38,0.783,39,0.379,41,1.83,43,0.498,66,0.008,67,0.008,69,0.515,71,1.736,72,1.498,73,1.203,74,0.749,75,0.906,76,0.818,77,2.416,78,1.455,79,2.592,80,2.416,82,2.592,83,1.657,84,1.657,85,1.176,86,0.99,87,1.176,88,2.4,89,1.537,90,1.568,91,0.942,92,1.032,97,1.381,98,0.853,99,0.807,100,1.511,102,0.64,103,2.592,104,1.462,105,3.697,106,3.697,108,2.024,109,2.416,115,1.032,116,1.032,118,2.02,121,2.02,122,2.254,124,2.609,125,3.789,126,2.804,127,2.592,128,3.789,129,2.804,130,2.804,131,2.804,132,2.804,133,2.804,134,2.804,135,2.609,136,2.804,137,2.4,138,2.609,139,2.279,140,1.897,141,2.804,142,2.609,143,2.804,144,2.609,145,2.609,146,2.804,147,2.609,148,2.804,149,2.609,150,2.804,151,3.392,152,2.609,153,2.804,154,2.804,155,2.609,156,1.845,157,2.804,158,3.392,159,3.392,160,3.392,161,2.609,162,2.416,163,2.804,164,2.609,165,1.014,166,2.804,167,2.609,168,2.804,169,2.609,170,2.804,171,2.609,172,1.082,173,6.068,174,0.942,175,0.986,176,3.392,177,2.254,178,2.609,179,2.609,180,2.609,181,2.609,182,1.59,183,1.59,184,2.609,185,3.965,186,3.965,187,3.965,188,4.143,189,3.965,190,6.068,191,6.068,192,1.498,193,2.015,194,1.568,195,1.152,196,3.965,197,3.965,198,2.609,199,2.609,200,2.609,201,2.609,202,3.07]],["title/interfaces/ColorConfig.html",[0,0.008,203,2.516]],["body/interfaces/ColorConfig.html",[0,0.008,2,0.962,3,0.187,4,0.149,5,0.149,7,0.112,8,0.336,14,0.536,15,0.219,16,0.017,17,0.254,20,0.228,27,1.754,36,0.219,39,0.361,43,0.509,66,0.011,67,0.011,87,1.48,98,0.825,99,0.614,104,1.655,108,2.779,137,2.991,195,1.546,203,3.946,204,3.39,205,5.59,206,4.319,207,3.039,208,2.241,209,4.663,210,3.39,211,3.39,212,3.39,213,3.39,214,3.39,215,2.391,216,1.802,217,1.222,218,3.39,219,4.596,220,1.304,221,3.39,222,2.861,223,4.596,224,3.39,225,4.596,226,3.39,227,1.192,228,3.39,229,3.39,230,3.39,231,3.39,232,2.775,233,3.39,234,3.39,235,3.39,236,3.39,237,3.39,238,2.566,239,3.39,240,3.038,241,4.596,242,3.39,243,3.038,244,3.39,245,3.39,246,2.391,247,3.39,248,2.391,249,3.39,250,3.39,251,3.39]],["title/classes/ColorSwatches.html",[36,0.215,215,2.344]],["body/classes/ColorSwatches.html",[0,0.007,3,0.167,4,0.133,5,0.133,7,0.1,14,0.529,15,0.192,16,0.017,17,0.235,20,0.211,27,1.018,36,0.196,39,0.38,43,0.498,66,0.01,67,0.01,69,0.691,76,1.015,87,1.394,89,1.531,97,1.33,98,0.896,99,0.777,100,1.531,102,0.859,104,1.683,108,2.544,140,1.385,195,1.429,203,4.031,204,3.025,205,3.025,207,2.809,208,2,209,4.806,210,3.025,211,3.025,212,3.025,213,3.025,214,3.025,215,2.997,216,1.809,217,1.164,218,4.249,219,4.249,220,1.206,221,3.025,222,2.645,223,4.249,224,3.025,225,4.249,226,3.025,227,1.122,228,3.025,229,3.025,230,4.249,231,3.025,232,3.479,233,3.025,234,4.249,235,3.025,236,5.326,237,3.025,238,4.031,239,3.025,240,5.466,241,5.326,242,3.025,243,4.773,244,3.025,245,3.025,246,3.756,247,3.025,248,3.756,249,4.249,250,3.025,251,3.025,252,3.808,253,4.249,254,3.502,255,3.502,256,3.502,257,3.502,258,3.502,259,3.502,260,3.502,261,3.502,262,3.479,263,3.502,264,3.502,265,3.502,266,3.502]],["title/classes/ColorUtil.html",[36,0.215,267,2.721]],["body/classes/ColorUtil.html",[3,0.095,4,0.075,5,0.075,7,0.057,8,0.202,15,0.154,16,0.016,20,0.085,36,0.111,38,0.391,39,0.22,43,0.37,66,0.007,67,0.007,69,0.391,76,0.66,85,0.486,86,0.409,89,1.043,97,0.793,98,0.49,99,0.464,100,0.951,104,1.412,108,1.208,137,1.265,192,0.749,194,0.784,195,0.576,206,1.826,217,0.374,240,3.569,267,2.262,268,1.983,269,4.823,270,2.295,271,3.197,272,3.197,273,4.61,274,3.197,275,1.132,276,3.197,277,5.057,278,3.197,279,3.983,280,3.197,281,3.197,282,3.197,283,3.197,284,3.197,285,3.197,286,3.197,287,3.983,288,3.197,289,3.197,290,3.197,291,3.197,292,3.197,293,3.197,294,3.197,295,3.197,296,3.197,297,3.197,298,3.197,299,3.197,300,3.197,301,3.197,302,3.197,303,3.197,304,3.197,305,3.197,306,3.197,307,3.197,308,3.197,309,3.197,310,3.197,311,3.197,312,3.197,313,3.197,314,3.197,315,3.197,316,3.197,317,3.197,318,3.197,319,3.197,320,3.197,321,3.197,322,3.197,323,3.197,324,3.197,325,3.197,326,3.197,327,3.197,328,3.197,329,3.197,330,3.197,331,3.197,332,3.197,333,3.197,334,3.197,335,3.197,336,3.197,337,3.197,338,3.197,339,3.197,340,3.197,341,4.61,342,3.197,343,3.197,344,3.197,345,3.197,346,3.197,347,3.197,348,3.197,349,3.197,350,3.197,351,3.197,352,3.197,353,3.197,354,2.762,355,3.197,356,3.197,357,3.197,358,3.197,359,3.197,360,3.197,361,3.197,362,3.197,363,3.197,364,3.197,365,3.197,366,3.197,367,3.197,368,3.197,369,3.197,370,3.197,371,3.197,372,3.197,373,3.197,374,3.197,375,3.197,376,3.197,377,3.197,378,3.197,379,3.197,380,3.197,381,3.197,382,3.197,383,4.61,384,3.197,385,3.197,386,3.197,387,3.197,388,3.197,389,3.197,390,3.197,391,3.197,392,3.197,393,3.197,394,3.197,395,3.197,396,3.197,397,3.197,398,3.197,399,3.197,400,3.197,401,3.197,402,3.197,403,3.197,404,3.197,405,3.197,406,4.61,407,3.197,408,3.197,409,3.197,410,3.197,411,3.197,412,3.197,413,3.197,414,3.197,415,3.197,416,3.197,417,4.61,418,3.197,419,3.197,420,3.197,421,3.197,422,3.197,423,3.197,424,3.197,425,3.197,426,3.197,427,3.197,428,3.983,429,3.197,430,3.197,431,3.197,432,3.197,433,3.197,434,3.197,435,3.197,436,3.197,437,3.197,438,4.61,439,3.197,440,3.197,441,3.197,442,3.197,443,3.197,444,3.197,445,3.197,446,3.197,447,3.197,448,3.197,449,3.197,450,3.197,451,3.197,452,3.197,453,3.197,454,3.197,455,3.197,456,3.197,457,3.197,458,3.197,459,3.197,460,3.197,461,3.197,462,3.197,463,3.197,464,3.197,465,3.197,466,3.197,467,3.197,468,3.197,469,3.197,470,3.197,471,3.197,472,3.197,473,4.61,474,3.197,475,3.197,476,3.197,477,3.197,478,3.197,479,3.197,480,3.197,481,3.197,482,3.197,483,3.197,484,3.197,485,3.197,486,4.61,487,3.197,488,3.197,489,3.197,490,3.197,491,3.197,492,3.197,493,2.762,494,3.197,495,3.197,496,3.197,497,3.197,498,3.197,499,3.197,500,3.197,501,3.197,502,3.197,503,3.197,504,3.197,505,3.197,506,3.197,507,3.197,508,3.197,509,3.197,510,3.197,511,3.197,512,3.197,513,3.197,514,3.197,515,3.197,516,3.197,517,3.197,518,3.197,519,3.197,520,3.197,521,3.197,522,3.197,523,3.197,524,3.197,525,3.197,526,3.197,527,3.197,528,3.197,529,3.197,530,3.197,531,3.197,532,3.197,533,3.197,534,3.197,535,3.197,536,3.197,537,3.197,538,3.197,539,3.197,540,3.197,541,3.197,542,3.197,543,3.197,544,3.197,545,3.197,546,3.197,547,3.197,548,3.197,549,3.197,550,3.197,551,3.197,552,3.197,553,3.197,554,3.197,555,3.197,556,3.197,557,3.197,558,3.197,559,3.197,560,3.197,561,3.197,562,3.197,563,3.197,564,3.197,565,3.197,566,3.197,567,3.197,568,2.762,569,3.197,570,3.197,571,3.197,572,3.197,573,3.197,574,3.197,575,3.197,576,3.197,577,3.197,578,3.197,579,3.197,580,3.197,581,3.197,582,3.197,583,3.197,584,3.197,585,3.197,586,3.197,587,3.197,588,3.197,589,3.197,590,3.197,591,3.197,592,4.61,593,3.197,594,3.197,595,3.197,596,3.197,597,3.197,598,3.197,599,3.197,600,3.197,601,3.197,602,3.197,603,3.197,604,3.197,605,3.197,606,3.197,607,3.197,608,3.197,609,3.197,610,3.197,611,3.197,612,3.197,613,3.197,614,3.197,615,3.197,616,3.197,617,3.197,618,3.197,619,3.197,620,1.983,621,3.197,622,1.983,623,3.111,624,3.197,625,1.983,626,1.983,627,3.197,628,1.983,629,0.656,630,1.713,631,0.822,632,1.983,633,1.983,634,3.197,635,1.983,636,1.983,637,4.913,638,1.983,639,1.983,640,1.983,641,1.983,642,1.983,643,4.61,644,1.983,645,5.406,646,5.406,647,5.406,648,3.197,649,4.61,650,1.402,651,5.406,652,1.983,653,3.197,654,3.197,655,1.983,656,1.983,657,1.983,658,1.983,659,1.983,660,1.983,661,1.983,662,1.983,663,1.983,664,1.713,665,1.983,666,1.983,667,1.983,668,1.983,669,1.983,670,1.983,671,1.983,672,1.983,673,1.983,674,1.983]],["title/classes/Colors.html",[36,0.215,270,2.198]],["body/classes/Colors.html",[3,0.25,4,0.199,5,0.199,7,0.149,8,0.405,15,0.183,16,0.017,17,0.331,20,0.224,36,0.293,39,0.373,66,0.013,67,0.013,69,1.034,74,1.308,85,1.571,86,1.322,89,1.489,97,1.034,98,0.638,99,0.604,215,4.397,217,1.21,267,4.899,270,3.661,631,2.171,675,5.237,676,2.681,677,5.362,678,4.899,679,4.054,680,6.409,681,5.237,682,5.237,683,2.991,684,5.237,685,2.171]],["title/interfaces/ConvolutionOptions.html",[0,0.008,686,2.721]],["body/interfaces/ConvolutionOptions.html",[0,0.009,2,1.11,3,0.216,4,0.172,5,0.172,7,0.129,8,0.369,14,0.518,15,0.202,16,0.017,17,0.279,20,0.25,23,1.316,27,1.882,36,0.253,38,0.894,39,0.216,66,0.012,67,0.012,71,1.496,94,3.504,95,3.504,99,0.864,117,2.07,174,1.634,175,1.71,192,2.586,194,2.313,227,1.517,686,4.581,687,3.91,688,5.914,689,5.914,690,5.914,691,5.301,692,5.301,693,2.818,694,3.563,695,3.201,696,3.504,697,3.91,698,2.313,699,5.051,700,3.91,701,3.91,702,3.91,703,3.91,704,2.758,705,3.504,706,5.051,707,5.051,708,5.051,709,5.051,710,5.051,711,3.201,712,3.91,713,4.527,714,3.91,715,4.527,716,3.91,717,2.959,718,3.91,719,3.91,720,3.91,721,3.91,722,3.91,723,3.91]],["title/classes/ConvolutionTool.html",[36,0.215,695,2.721]],["body/classes/ConvolutionTool.html",[0,0.009,3,0.197,4,0.157,5,0.157,7,0.118,8,0.348,14,0.424,15,0.177,16,0.017,17,0.263,20,0.236,23,1.24,27,1.202,36,0.231,38,1.088,39,0.37,66,0.012,67,0.012,69,0.817,71,1.902,72,2.082,73,1.672,74,1.041,75,1.171,76,1.137,78,1.88,83,2.141,84,2.141,85,1.351,86,1.137,87,1.014,88,2.801,89,1.515,90,2.18,91,1.494,92,1.636,94,3.202,95,3.202,97,0.817,98,0.504,99,0.477,100,1.364,102,1.014,115,1.636,116,1.636,117,1.891,139,1.636,172,1.715,174,1.494,175,1.563,192,2.497,194,2.18,227,1.495,686,4.676,687,3.573,688,3.573,689,3.573,690,3.573,691,3.202,692,3.202,693,1.8,694,3.358,695,3.898,696,4.267,697,3.573,698,2.18,699,4.761,700,3.573,701,3.573,702,3.573,703,3.573,704,2.52,705,3.202,706,4.761,707,4.761,708,4.761,709,4.761,710,4.761,711,2.925,712,3.573,713,4.267,714,3.573,715,4.267,716,3.573,717,2.704,718,3.573,719,3.573,720,3.573,721,3.573,722,3.573,723,3.573,724,4.761,725,3.358,726,4.761,727,4.136,728,4.136,729,4.136]],["title/interfaces/CreateLayerOptions.html",[0,0.008,730,2.721]],["body/interfaces/CreateLayerOptions.html",[0,0.01,2,0.825,3,0.161,4,0.128,5,0.128,7,0.096,8,0.302,14,0.493,15,0.19,16,0.017,17,0.289,20,0.259,36,0.188,39,0.357,43,0.523,66,0.01,67,0.01,73,1.021,74,0.635,75,1.403,87,0.825,98,0.889,99,0.699,104,1.572,137,1.891,139,1.331,165,0.861,193,1.71,194,2.629,195,1.76,207,2.731,208,1.922,217,1.291,220,1.485,222,2.572,227,1.38,238,2.2,629,2.002,676,1.921,683,1.922,685,1.395,730,4.283,731,2.38,732,2.635,733,4.816,734,3.934,735,2.605,736,2.913,737,0.978,738,3.934,739,4.769,740,5.028,741,1.71,742,1.922,743,2.605,744,2.605,745,5.41,746,4.689,747,3.702,748,3.702,749,3.702,750,3.702,751,4.689,752,3.702,753,3.702,754,3.702,755,3.702,756,3.702,757,2.605,758,2.605,759,3.702,760,2.605,761,2.605,762,2.605,763,2.605,764,3.702,765,2.605,766,2.605,767,2.605,768,5.294,769,2.605,770,2.605,771,2.605,772,4.306,773,2.605,774,2.605,775,3.702,776,2.605,777,2.605,778,2.605,779,2.605,780,2.605,781,2.605,782,2.605,783,2.605,784,2.605,785,2.605,786,2.605,787,1.81,788,2.605,789,2.605,790,2.605,791,2.605,792,2.605,793,2.605,794,2.605,795,2.605]],["title/interfaces/CubicBezierCurveOptions.html",[0,0.008,31,2.344]],["body/interfaces/CubicBezierCurveOptions.html",[0,0.014,1,3.463,2,1.062,3,0.207,4,0.164,5,0.164,6,2.832,7,0.124,8,0.359,9,1.879,10,2.64,11,2.832,12,2.64,13,2.832,14,0.551,15,0.205,16,0.017,17,0.207,18,2.473,19,2.086,20,0.299,21,3.463,22,1.759,23,1.614,24,2.33,25,2.474,26,2.474,27,1.259,28,3.463,29,2.832,30,2.832,31,3.864,32,4.402,33,4.402,34,4.402,35,4.402,36,0.242,37,2.64,38,0.855,39,0.334,40,2.832,41,1.788,42,2.832,43,0.478,44,2.832,45,2.474,46,3.054,47,2.759,48,2.473,49,2.474,50,2.474,51,2.474,52,2.832,53,2.832,54,2.832,55,2.832,56,2.832,57,2.832,58,2.832,59,2.832,60,2.832,61,2.832,62,2.832,63,2.832,64,2.832,65,2.832,66,0.012,67,0.012]],["title/classes/DataSource.html",[36,0.215,796,2.344]],["body/classes/DataSource.html",[0,0.012,3,0.171,4,0.19,5,0.136,7,0.102,8,0.316,9,1.186,14,0.486,15,0.199,16,0.017,17,0.171,20,0.267,22,1.226,23,1.125,27,1.453,36,0.201,39,0.378,43,0.448,66,0.01,67,0.01,69,0.708,76,1.032,85,0.879,86,1.188,89,1.508,97,1.23,98,0.799,99,0.719,100,1.488,102,1.412,104,1.662,137,1.419,165,0.917,195,1.453,206,2.856,216,1.939,217,1.087,220,1.226,227,0.708,246,3.796,248,3.796,693,3.09,698,1.978,732,2.176,737,1.042,796,4.134,797,2.536,798,5.001,799,4.406,800,5.001,801,5.001,802,4.406,803,3.586,804,3.537,805,4.436,806,3.586,807,3.586,808,3.537,809,3.586,810,5.023,811,3.537,812,3.586,813,3.537,814,3.586,815,3.586,816,3.586,817,3.586,818,3.586,819,3.537,820,2.287,821,1.929,822,1.929,823,1.419,824,3.27,825,3.27,826,2.345,827,2.345,828,2.345,829,2.345,830,2.048,831,2.536,832,2.536,833,4.799,834,2.536,835,2.536,836,2.536,837,2.856,838,2.536,839,2.536,840,2.536,841,2.536,842,2.536,843,2.536,844,3.537,845,2.536,846,2.536,847,2.536]],["title/interfaces/DrawArcOptions.html",[0,0.008,21,2.344]],["body/interfaces/DrawArcOptions.html",[0,0.014,1,3.456,2,1.059,3,0.206,4,0.164,5,0.164,6,2.824,7,0.123,8,0.358,9,2.309,10,2.631,11,2.824,12,2.631,13,2.824,14,0.55,15,0.205,16,0.017,17,0.206,18,2.468,19,2.08,20,0.299,21,3.859,22,1.757,23,1.613,24,3.617,25,3.841,26,3.841,27,1.84,28,3.456,29,2.824,30,2.824,31,3.456,32,2.824,33,2.824,34,2.824,35,2.824,36,0.241,37,2.631,38,0.853,39,0.333,40,2.824,41,1.787,42,2.824,43,0.478,44,2.824,45,2.467,46,3.049,47,2.755,48,2.468,49,2.467,50,2.467,51,2.467,52,2.824,53,2.824,54,2.824,55,2.824,56,2.824,57,2.824,58,2.824,59,2.824,60,2.824,61,2.824,62,2.824,63,2.824,64,2.824,65,2.824,66,0.012,67,0.012,99,0.655]],["title/interfaces/DrawEllipseOptions.html",[0,0.008,848,2.979]],["body/interfaces/DrawEllipseOptions.html",[0,0.01,2,1.146,3,0.223,4,0.177,5,0.177,7,0.133,8,0.377,9,1.546,14,0.546,15,0.217,16,0.017,17,0.223,18,2.598,19,2.251,20,0.282,22,1.699,23,1.56,24,3.727,25,3.958,26,3.958,27,1.912,36,0.261,38,0.923,39,0.285,41,1.527,43,0.409,45,2.67,46,2.875,47,2.598,48,2.034,49,3.41,50,3.41,51,3.958,66,0.012,67,0.012,87,1.464,99,0.689,848,5.093,849,3.62,850,5.987,851,5.987,852,5.987,853,4.622,854,3.307,855,3.62,856,3.057,857,4.039,858,4.039,859,4.039,860,4.039,861,4.039]],["title/classes/EllipseTool.html",[36,0.215,855,2.979]],["body/classes/EllipseTool.html",[0,0.006,3,0.142,4,0.113,5,0.113,7,0.085,8,0.277,9,0.986,14,0.519,15,0.219,16,0.017,17,0.142,18,3.254,19,1.436,20,0.222,22,1.074,23,1.169,24,1.604,25,1.703,26,1.703,27,0.867,36,0.167,38,0.865,39,0.38,41,1.121,43,0.3,45,1.703,46,2.11,47,1.907,48,1.298,49,2.503,50,2.503,51,3.27,66,0.009,67,0.009,69,0.589,71,1.631,72,1.655,73,1.329,74,0.828,75,0.981,76,0.904,77,2.67,78,1.576,79,2.865,80,2.67,82,2.865,83,1.795,84,1.795,85,1.274,86,1.072,87,1.274,88,3.001,89,1.577,90,1.733,91,1.077,92,1.18,97,1.448,98,0.894,99,0.846,100,1.559,102,0.731,103,1.95,104,1.289,105,3.489,106,3.489,108,1.655,109,1.817,115,1.18,116,1.18,125,3.674,126,3.099,127,2.865,128,3.674,129,3.099,130,3.099,131,3.099,132,3.099,133,3.099,134,3.099,136,2.109,137,2.523,139,2.413,140,2.055,141,2.109,143,2.109,146,2.109,148,2.109,150,2.109,151,3.099,153,2.109,154,2.109,156,2.109,157,2.109,158,3.099,159,3.099,160,3.099,162,1.817,163,2.109,165,0.763,166,2.109,168,2.109,170,2.109,172,1.236,848,4.433,849,2.309,850,2.576,851,2.576,852,2.576,853,4.433,854,2.109,855,3.393,856,2.865,857,2.576,858,2.576,859,2.576,860,2.576,861,3.786,862,2.67,863,4.382,864,2.982,865,2.982,866,2.309,867,2.309,868,2.309,869,2.309,870,2.309,871,2.309,872,2.309,873,2.309,874,2.309,875,2.309,876,2.309,877,2.309,878,2.309,879,2.309]],["title/interfaces/EraserOptions.html",[0,0.008,880,2.979]],["body/interfaces/EraserOptions.html",[0,0.01,2,1.242,3,0.242,4,0.192,5,0.192,7,0.145,8,0.396,9,1.676,14,0.539,15,0.204,16,0.017,17,0.242,20,0.269,22,1.749,23,1.606,36,0.283,38,1.001,39,0.3,41,1.607,43,0.43,47,2.733,48,2.205,66,0.013,67,0.013,71,1.607,117,2.318,165,1.825,182,3.088,183,3.088,192,2.373,202,3.924,704,3.088,737,2.074,854,3.585,880,5.285,881,4.378,882,3.924,883,4.378,884,4.378,885,3.314,886,3.314,887,4.378,888,4.378,889,4.378,890,4.378,891,4.378,892,4.378,893,4.378]],["title/classes/EraserTool.html",[36,0.215,882,2.979]],["body/classes/EraserTool.html",[0,0.009,3,0.211,4,0.168,5,0.168,7,0.126,8,0.364,9,1.464,14,0.482,15,0.183,16,0.017,17,0.211,20,0.247,22,1.085,23,0.996,36,0.248,38,1.138,39,0.376,41,1.474,43,0.394,47,2.508,48,1.926,66,0.012,67,0.012,69,0.874,71,1.927,72,2.177,73,1.748,74,1.089,75,1.21,76,1.189,78,1.944,83,2.214,84,2.214,85,1.413,86,1.189,87,1.085,88,2.855,89,1.538,90,2.28,91,1.599,92,1.751,97,1.138,98,0.703,99,0.665,100,1.452,102,1.085,115,1.751,116,1.751,117,2.024,139,2.28,165,1.132,172,1.835,182,2.697,183,2.697,192,2.177,202,3.427,704,2.697,737,1.286,854,3.131,880,5.256,881,3.824,882,4.462,883,4.979,884,3.824,885,2.894,886,2.894,887,4.979,888,3.824,889,3.824,890,3.824,891,3.824,892,3.824,893,3.824,894,5.764,895,5.764,896,4.427,897,4.427]],["title/classes/FilterTool.html",[36,0.215,898,3.324]],["body/classes/FilterTool.html",[3,0.13,4,0.103,5,0.103,7,0.077,8,0.258,9,1.807,14,0.543,15,0.206,16,0.017,17,0.13,20,0.175,22,1.001,23,1.23,36,0.152,38,0.807,39,0.377,41,0.694,43,0.483,66,0.009,67,0.009,69,0.536,71,1.722,72,1.543,73,1.239,74,0.772,75,0.928,76,0.843,78,1.49,83,1.697,84,1.697,85,1.51,86,1.521,87,0.665,88,2.437,89,1.521,90,1.616,91,0.98,92,1.073,97,1.375,98,0.921,99,0.804,100,1.487,102,0.665,104,1.567,108,2.065,115,1.073,116,1.073,117,1.241,172,1.125,194,1.616,195,1.956,217,1.271,220,1.65,262,5.49,664,5.322,898,3.529,899,2.344,900,4.085,901,3.803,902,4.244,903,4.085,904,3.529,905,4.912,906,3.529,907,3.475,908,4.912,909,4.912,910,4.912,911,4.085,912,4.722,913,2.714,914,2.344,915,4.085,916,2.714,917,4.085,918,2.714,919,4.085,920,2.714,921,4.085,922,2.714,923,4.085,924,2.714,925,4.085,926,2.714,927,4.244,928,4.085,929,2.714,930,4.085,931,2.714,932,4.085,933,2.714,934,4.085,935,2.714,936,2.714,937,2.714,938,2.714,939,2.714,940,2.714,941,2.714,942,3.529,943,6.857,944,2.714,945,2.714,946,2.714,947,2.714,948,2.714,949,2.714,950,3.163,951,2.344,952,2.714,953,2.714,954,2.714,955,2.714,956,2.714]],["title/interfaces/FrameLayer.html",[0,0.008,957,2.979]],["body/interfaces/FrameLayer.html",[0,0.007,2,0.813,3,0.158,4,0.126,5,0.126,7,0.095,8,0.299,14,0.529,15,0.135,16,0.017,17,0.263,20,0.203,36,0.186,39,0.354,43,0.498,66,0.01,67,0.01,74,0.627,75,1.419,86,1.365,99,0.546,192,1.253,193,2.406,195,1.979,216,1.318,217,1.387,220,1.783,222,2.968,227,1.256,275,1.895,629,2.429,676,1.906,683,1.895,685,1.375,693,2.401,698,1.312,957,4.659,958,2.866,959,5.631,960,5.688,961,2.021,962,2.866,963,4.089,964,4.089,965,2.866,966,3.934,967,4.659,968,2.866,969,2.866,970,5.198,971,4.767,972,2.866,973,2.866,974,2.169,975,4.089,976,2.866,977,2.866,978,4.089,979,2.866,980,2.866,981,2.866,982,2.866,983,2.866,984,2.866,985,4.089,986,1.895,987,2.866,988,2.866,989,4.089,990,2.866,991,4.089,992,2.866,993,4.089,994,2.866,995,4.089,996,2.866,997,4.089,998,2.866,999,4.089,1000,2.866,1001,3.608,1002,2.866,1003,4.089,1004,2.866,1005,3.348,1006,2.866,1007,4.089,1008,2.866,1009,4.089,1010,2.866,1011,4.089,1012,1.962,1013,2.866,1014,2.866,1015,2.021,1016,2.866,1017,2.866,1018,2.866,1019,2.183,1020,2.866,1021,4.089,1022,2.866,1023,2.866,1024,2.866,1025,2.866,1026,2.866,1027,2.866,1028,2.866,1029,2.866,1030,2.866,1031,2.866,1032,2.866,1033,2.866,1034,2.866,1035,2.866,1036,2.866,1037,2.866,1038,2.866,1039,2.866,1040,2.866,1041,1.598,1042,2.866,1043,4.089,1044,2.866,1045,1.784,1046,1.784,1047,1.784,1048,1.784,1049,2.346,1050,2.569,1051,2.569,1052,2.569,1053,2.866,1054,2.866,1055,2.866,1056,2.866]],["title/classes/Illustrator.html",[36,0.215,676,1.329]],["body/classes/Illustrator.html",[0,0.007,3,0.161,4,0.128,5,0.128,7,0.096,8,0.302,14,0.487,15,0.173,16,0.017,17,0.317,20,0.274,36,0.188,39,0.373,43,0.438,66,0.01,67,0.01,69,0.665,74,1.256,75,1.292,76,0.987,78,2.075,85,1.569,86,1.321,89,1.488,97,0.945,98,0.678,99,0.552,100,0.987,165,1.55,174,1.217,175,1.273,216,1.852,217,1.343,220,0.826,227,1.351,270,3.461,629,1.84,631,1.397,676,1.653,685,1.397,698,1.893,717,2.203,725,2.916,732,1.466,737,1.86,741,1.712,742,3.656,823,2.201,862,2.916,961,2.053,966,2.203,1005,2.383,1012,2.757,1015,3.391,1019,2.201,1041,2.918,1045,2.574,1046,2.574,1047,2.574,1048,2.574,1057,2.91,1058,4.808,1059,3.369,1060,4.785,1061,4.134,1062,3.369,1063,4.134,1064,3.369,1065,4.785,1066,3.936,1067,4.134,1068,3.369,1069,4.134,1070,4.691,1071,3.369,1072,2.432,1073,3.369,1074,3.369,1075,3.369,1076,3.936,1077,2.383,1078,2.91,1079,2.91,1080,2.91,1081,2.91,1082,4.134,1083,3.385,1084,4.134,1085,4.134,1086,4.134,1087,2.91,1088,2.608,1089,4.286,1090,2.383,1091,2.91,1092,2.383,1093,2.383,1094,2.91,1095,2.91,1096,2.91,1097,4.134,1098,4.134,1099,4.134,1100,2.91,1101,2.91,1102,2.91,1103,2.91,1104,2.608,1105,2.608,1106,2.91,1107,2.91,1108,2.608,1109,2.91,1110,4.808,1111,2.608,1112,2.383,1113,2.91,1114,2.91,1115,2.91,1116,2.91,1117,2.91,1118,2.91,1119,2.91,1120,5.744,1121,2.91,1122,2.91,1123,2.91,1124,2.91,1125,2.91,1126,2.91]],["title/classes/IllustratorAnimation.html",[36,0.215,966,2.516]],["body/classes/IllustratorAnimation.html",[0,0.005,3,0.126,4,0.1,5,0.1,7,0.075,8,0.253,14,0.532,15,0.2,16,0.017,17,0.231,20,0.171,36,0.148,39,0.374,43,0.474,66,0.008,67,0.008,69,0.521,74,0.912,75,1.41,76,0.826,86,1.258,89,1.479,97,1.366,98,0.844,99,0.799,100,1.447,102,0.647,140,1.583,192,0.998,193,2.034,195,1.84,216,1.114,217,1.325,220,1.696,222,2.599,227,1.144,275,1.508,629,2.319,631,1.095,676,2.307,679,2.044,683,1.508,685,1.095,693,2.521,698,1.044,742,1.508,957,4.903,958,2.281,959,5.431,960,5.171,961,1.609,962,2.281,963,3.457,964,4.657,965,2.281,966,4.265,967,4.174,968,2.281,969,4.657,970,4.657,971,5.266,972,2.281,973,2.281,974,1.726,975,3.457,976,2.281,977,2.281,978,3.457,979,2.281,980,3.457,981,2.281,982,2.281,983,2.281,984,2.281,985,3.457,986,1.508,987,2.281,988,3.457,989,4.174,990,2.281,991,3.457,992,3.457,993,4.174,994,2.281,995,3.457,996,3.457,997,4.174,998,2.281,999,3.457,1000,3.457,1001,3.525,1002,2.281,1003,3.457,1004,3.457,1005,3.417,1006,2.281,1007,3.457,1008,3.457,1009,4.174,1010,2.281,1011,3.457,1012,2.235,1013,4.657,1014,2.281,1015,1.609,1016,2.281,1017,2.281,1018,2.281,1019,1.911,1020,2.281,1021,3.457,1022,2.281,1023,2.281,1024,2.281,1025,2.281,1026,2.281,1027,2.281,1028,2.281,1029,2.281,1030,2.281,1031,2.281,1032,2.281,1033,2.281,1034,2.281,1035,2.281,1036,2.281,1037,2.281,1038,2.281,1039,2.281,1040,2.281,1041,1.271,1042,2.281,1043,3.457,1044,2.281,1045,1.42,1046,1.42,1047,1.42,1048,1.42,1049,1.868,1050,2.044,1051,2.044,1052,2.044,1053,2.281,1054,2.281,1055,2.281,1056,2.281,1072,1.342,1127,6.096,1128,4.001,1129,4.001,1130,4.001,1131,4.001,1132,4.001,1133,4.001,1134,4.001,1135,2.64,1136,2.64,1137,2.64,1138,2.64,1139,2.64,1140,2.64,1141,2.64,1142,2.64,1143,2.64,1144,2.64,1145,2.64,1146,2.64,1147,2.64,1148,2.64]],["title/classes/IllustratorColor.html",[36,0.215,209,2.516]],["body/classes/IllustratorColor.html",[0,0.009,3,0.208,4,0.165,5,0.165,7,0.124,8,0.36,14,0.479,15,0.181,16,0.017,17,0.208,20,0.244,36,0.244,39,0.372,43,0.298,66,0.012,67,0.012,69,0.861,74,1.357,76,1.177,89,1.533,97,0.861,98,0.775,99,0.503,100,1.392,102,1.069,104,1.519,108,2.156,192,1.647,195,1.658,203,4.58,209,3.73,215,4.379,216,2.001,217,0.823,220,1.069,227,0.861,623,5.225,631,1.807,650,3.083,677,5.225,685,1.807,725,3.477,1149,3.765,1150,5.83,1151,5.83,1152,6.051,1153,4.359,1154,4.359,1155,5.706,1156,4.359,1157,4.359,1158,4.359,1159,4.359,1160,3.765,1161,4.359,1162,4.418,1163,4.929,1164,3.765,1165,3.765,1166,3.765,1167,3.765,1168,3.765,1169,3.765,1170,3.765,1171,3.765,1172,3.765,1173,3.765,1174,3.765,1175,4.929,1176,3.765,1177,4.929,1178,3.765,1179,3.765,1180,3.765,1181,3.765,1182,3.765,1183,3.765,1184,3.765,1185,3.765]],["title/interfaces/IllustratorColorData.html",[0,0.008,1162,2.979]],["body/interfaces/IllustratorColorData.html",[0,0.01,2,1.154,3,0.225,4,0.179,5,0.179,7,0.134,8,0.378,14,0.532,15,0.213,16,0.017,17,0.225,20,0.257,36,0.263,39,0.286,43,0.322,66,0.013,67,0.013,74,1.132,102,1.154,104,1.349,108,2.265,137,2.372,192,1.778,195,1.742,203,3.92,206,3.425,209,3.077,215,4.02,216,1.67,217,0.889,220,1.154,227,0.929,623,5.379,650,3.329,677,3.644,685,1.951,1149,4.066,1150,6.001,1151,4.066,1152,6.198,1162,5.108,1163,6.198,1164,6.001,1165,4.066,1166,4.066,1167,4.066,1168,4.066,1169,4.066,1170,4.066,1171,4.066,1172,4.066,1173,4.066,1174,4.066,1175,5.179,1176,4.066,1177,5.179,1178,4.066,1179,4.066,1180,4.066,1181,4.066,1182,4.066,1183,4.066,1184,4.066,1185,4.066]],["title/interfaces/IllustratorDataSource.html",[0,0.008,805,2.516]],["body/interfaces/IllustratorDataSource.html",[0,0.013,2,1.023,3,0.199,4,0.21,5,0.158,7,0.119,8,0.35,9,1.38,14,0.504,15,0.207,16,0.017,17,0.199,20,0.284,22,1.359,23,1.248,27,1.611,36,0.233,39,0.359,43,0.473,66,0.012,67,0.012,86,1.144,98,0.809,104,1.676,165,1.067,195,1.611,206,2.383,216,1.977,217,1.176,220,1.359,227,0.824,246,2.542,248,2.542,693,2.709,698,2.193,732,2.412,737,1.213,796,4.042,797,2.951,799,2.951,802,2.951,804,2.951,805,4.515,808,2.951,810,5.021,811,2.951,813,2.951,819,2.951,820,2.535,821,2.244,822,3.349,823,2.463,824,4.337,825,4.337,826,2.728,827,2.728,828,2.728,829,2.728,830,2.383,831,2.951,832,2.951,833,5.021,834,2.951,835,2.951,836,2.951,837,3.167,838,2.951,839,2.951,840,2.951,841,2.951,842,2.951,843,2.951,844,3.921,845,2.951,846,2.951,847,2.951]],["title/interfaces/IllustratorExportConfig.html",[0,0.008,1070,2.979]],["body/interfaces/IllustratorExportConfig.html",[0,0.008,2,0.922,3,0.18,4,0.143,5,0.143,7,0.107,8,0.326,14,0.456,15,0.169,16,0.017,17,0.329,20,0.253,36,0.21,39,0.348,43,0.456,66,0.011,67,0.011,74,0.976,75,1.332,78,1.929,98,0.459,99,0.795,165,0.962,174,1.359,175,1.421,216,1.918,217,1.259,220,0.922,227,1.393,270,2.953,629,1.953,676,1.3,685,1.56,698,2.045,717,2.46,737,1.093,741,1.912,742,3.373,823,1.488,862,3.15,961,2.293,966,2.46,1005,4.497,1012,2.143,1015,2.293,1019,2.336,1041,3.062,1045,2.78,1046,2.78,1047,2.78,1048,2.78,1057,3.25,1058,3.25,1061,3.25,1063,3.25,1066,3.656,1067,3.25,1069,3.25,1070,4.572,1076,5.082,1077,2.661,1078,3.25,1079,3.25,1080,3.25,1081,3.25,1082,5.758,1083,4.497,1084,5.493,1085,5.493,1086,5.493,1087,3.25,1088,2.913,1089,4.497,1090,2.661,1091,3.25,1092,2.661,1093,2.661,1094,3.25,1095,3.25,1096,3.25,1097,4.466,1098,4.466,1099,4.466,1100,3.25,1101,3.25,1102,3.25,1103,3.25,1104,2.913,1105,2.913,1106,3.25,1107,3.25,1108,2.913,1109,3.25,1110,5.102,1111,2.913,1112,2.661,1113,3.25,1114,3.25,1115,3.25,1116,3.25,1117,3.25,1118,3.25,1119,3.25,1120,5.949,1121,3.25,1122,3.25,1123,3.25,1124,3.25,1125,3.25,1126,3.25]],["title/classes/IllustratorImage.html",[36,0.215,1186,1.853]],["body/classes/IllustratorImage.html",[0,0.008,3,0.191,4,0.248,5,0.152,7,0.114,14,0.369,15,0.186,16,0.017,17,0.291,20,0.291,36,0.223,38,1.063,39,0.359,43,0.466,66,0.011,67,0.011,69,0.789,74,0.755,76,1.111,89,1.447,97,1.203,98,0.743,99,0.703,100,1.345,165,1.022,174,1.945,175,1.51,216,1.697,217,1.017,227,1.415,269,4.959,631,1.657,725,3.282,737,1.161,1012,2.907,1019,1.581,1072,2.737,1076,3.809,1083,3.809,1186,2.934,1187,2.826,1188,4.45,1189,5.386,1190,5.386,1191,5.632,1192,5.632,1193,3.996,1194,3.724,1195,3.996,1196,4.653,1197,4.653,1198,4.44,1199,5.548,1200,3.996,1201,4.653,1202,3.996,1203,3.996,1204,3.996,1205,3.996,1206,3.996,1207,3.809,1208,4.17,1209,4.17,1210,4.17,1211,4.17,1212,4.17,1213,4.653,1214,3.094,1215,3.076,1216,3.094,1217,3.094,1218,3.452,1219,3.452,1220,3.452,1221,2.435,1222,2.282,1223,2.282,1224,2.149,1225,3.452,1226,3.452,1227,3.452,1228,3.452,1229,3.452,1230,4.653,1231,3.452,1232,4.653,1233,3.809,1234,3.809,1235,5.632,1236,3.452,1237,3.452,1238,3.452]],["title/classes/IllustratorImageManager.html",[36,0.215,1066,2.721]],["body/classes/IllustratorImageManager.html",[3,0.16,4,0.27,5,0.128,7,0.096,15,0.199,16,0.017,17,0.265,20,0.205,36,0.188,39,0.372,43,0.478,66,0.01,67,0.01,69,0.664,76,0.986,89,1.441,97,1.379,98,0.852,99,0.806,100,1.441,139,3.079,140,2.628,174,1.214,216,1.33,217,0.635,227,0.664,629,2.526,711,5.098,787,1.808,820,3.126,823,2.394,1012,3.121,1019,2.529,1066,3.379,1072,3.25,1186,2.915,1194,4.364,1214,2.602,1215,2.729,1239,3.361,1240,5.558,1241,5.558,1242,4.777,1243,4.777,1244,4.686,1245,3.699,1246,5.558,1247,5.558,1248,5.558,1249,6.985,1250,3.361,1251,5.558,1252,3.361,1253,4.777,1254,6.985,1255,3.361,1256,4.777,1257,3.361,1258,4.777,1259,3.361,1260,5.229,1261,3.699,1262,4.777,1263,3.361,1264,4.127,1265,5.558,1266,6.985,1267,3.361,1268,5.558,1269,3.361,1270,3.361,1271,3.361,1272,4.127,1273,3.361,1274,2.602,1275,2.903,1276,3.361,1277,3.361,1278,3.361,1279,3.361]],["title/interfaces/ImageDataSource.html",[0,0.008,825,2.516]],["body/interfaces/ImageDataSource.html",[0,0.013,2,1.043,3,0.203,4,0.213,5,0.161,7,0.121,8,0.354,9,1.407,14,0.506,15,0.198,16,0.017,17,0.203,20,0.286,22,1.377,23,1.264,27,1.632,36,0.238,39,0.36,43,0.476,66,0.012,67,0.012,86,1.434,98,0.519,104,1.638,137,2.221,165,1.088,195,1.632,206,2.43,216,1.751,217,1.187,220,1.377,227,0.84,246,2.592,248,2.592,693,2.735,698,2.221,732,3.024,737,1.236,796,4.073,797,3.009,799,3.009,802,3.009,804,3.009,805,4.371,808,3.009,810,5.049,811,3.009,813,3.009,819,3.009,820,3.057,821,2.288,822,2.288,823,1.683,824,3.671,825,4.11,826,2.781,827,2.781,828,2.781,829,2.781,830,2.43,831,3.009,832,3.009,833,5.049,834,3.009,835,3.009,836,3.009,837,3.207,838,3.009,839,3.009,840,3.009,841,3.009,842,3.009,843,3.009,844,3.972,845,3.009,846,3.009,847,3.009]],["title/classes/ImageLoader.html",[36,0.215,1215,2.198]],["body/classes/ImageLoader.html",[3,0.13,4,0.291,5,0.103,7,0.078,14,0.336,15,0.176,16,0.017,17,0.333,20,0.175,27,1.428,36,0.152,38,0.536,39,0.261,43,0.51,66,0.009,67,0.009,69,0.536,75,0.928,76,0.844,87,1.205,89,1.128,97,1.08,98,0.667,99,0.631,100,1.128,102,1.002,104,1.439,140,1.944,174,0.981,175,1.026,192,1.026,193,3.421,194,1.074,195,1.791,216,1.633,217,1.164,220,1.002,227,1.394,269,4.992,629,0.898,630,2.347,631,1.126,676,1.698,683,1.552,787,1.461,820,3.137,823,2.964,829,1.776,837,3.124,961,1.655,986,3.124,1001,1.776,1012,2.791,1019,2.603,1041,2.367,1072,1.38,1186,2.633,1194,3.918,1198,2.995,1215,2.335,1224,1.461,1244,3.165,1245,5.094,1260,3.532,1261,3.165,1264,3.532,1272,3.532,1274,3.806,1275,2.347,1280,2.103,1281,3.532,1282,5.469,1283,2.716,1284,4.088,1285,6.162,1286,6.553,1287,2.716,1288,4.088,1289,4.915,1290,4.246,1291,3.532,1292,2.716,1293,2.716,1294,3.755,1295,2.716,1296,2.716,1297,3.532,1298,5.469,1299,4.915,1300,4.246,1301,2.347,1302,2.716,1303,5.067,1304,2.347,1305,2.347,1306,2.103,1307,3.532,1308,2.716,1309,2.103,1310,2.716,1311,2.347,1312,4.088,1313,5.067,1314,2.716,1315,2.716,1316,2.716,1317,2.716,1318,2.716,1319,2.716,1320,2.716,1321,2.716,1322,2.716,1323,2.347,1324,4.246,1325,3.806,1326,2.716,1327,2.716,1328,2.716,1329,2.716,1330,2.716,1331,2.716,1332,4.088,1333,4.088,1334,2.716,1335,2.716,1336,2.716,1337,2.716,1338,4.915,1339,2.716,1340,2.347,1341,2.716,1342,2.716,1343,2.347,1344,6.162,1345,2.716,1346,2.716,1347,2.716,1348,2.716,1349,2.716,1350,2.716,1351,2.716,1352,2.716,1353,2.716,1354,2.716,1355,2.716,1356,2.716,1357,2.716,1358,2.716,1359,2.716,1360,2.716,1361,2.716,1362,2.716,1363,2.347,1364,2.716,1365,2.347,1366,2.716,1367,2.716,1368,2.716,1369,2.716,1370,2.716,1371,2.716,1372,2.716,1373,2.716,1374,2.716,1375,2.716,1376,2.716]],["title/classes/ImageTool.html",[36,0.215,1377,2.979]],["body/classes/ImageTool.html",[3,0.149,4,0.172,5,0.118,7,0.089,8,0.286,9,1.763,14,0.55,15,0.195,16,0.017,17,0.255,20,0.134,22,1.11,27,1.7,36,0.174,38,0.894,39,0.374,41,1.159,43,0.443,66,0.009,67,0.009,69,0.616,71,1.786,72,1.711,73,1.374,74,0.855,75,1.007,76,0.935,78,1.617,83,1.842,84,1.842,85,1.11,86,0.935,87,0.765,88,2.563,89,1.498,90,1.792,91,1.127,92,1.234,97,1.279,98,0.79,99,0.748,100,1.282,102,0.765,115,1.234,116,1.234,117,1.427,140,2.109,172,1.294,174,1.127,175,1.179,195,1.549,227,0.616,629,1.498,650,2.207,704,2.76,787,1.678,820,2.675,821,1.678,823,3.029,862,4.173,974,2.04,1045,2.868,1046,2.868,1047,2.868,1048,2.868,1049,3.203,1050,3.507,1051,3.507,1052,3.507,1215,1.782,1244,3.507,1290,2.695,1377,3.507,1378,3.12,1379,3.507,1380,6.848,1381,6.565,1382,6.565,1383,3.12,1384,7.599,1385,7.389,1386,3.12,1387,5.775,1388,3.12,1389,3.12,1390,4.529,1391,3.12,1392,4.529,1393,3.12,1394,3.12,1395,3.12,1396,3.12,1397,3.12,1398,3.12,1399,2.695,1400,3.12,1401,4.529,1402,4.529,1403,3.913,1404,4.529,1405,4.529]],["title/classes/Layer.html",[36,0.215,75,0.727]],["body/classes/Layer.html",[0,0.005,3,0.123,4,0.098,5,0.098,7,0.074,8,0.248,14,0.501,15,0.204,16,0.017,17,0.274,20,0.204,22,1.169,23,1.073,27,1.143,36,0.144,39,0.382,43,0.497,66,0.008,67,0.008,69,0.51,71,1.546,73,1.193,74,1.142,75,0.9,76,0.812,78,1.617,83,1.841,84,1.841,85,1.169,86,0.984,87,1.307,89,1.58,97,1.193,98,0.839,99,0.698,100,1.473,102,1.482,104,0.581,137,1.556,139,1.885,140,1.022,165,1.546,174,0.933,175,0.976,192,2.014,193,1.313,194,1.022,216,0.719,217,1.083,220,0.965,275,1.475,629,0.854,631,1.631,676,1.647,678,3.371,693,1.124,694,2.397,698,1.022,725,2.397,732,1.124,733,3.952,736,3.495,737,1.757,739,3.751,741,3.072,787,2.116,986,1.475,1012,1.976,1019,1.022,1041,2.295,1072,1.313,1077,1.827,1090,3.77,1092,1.827,1093,3.77,1112,3.77,1160,2.231,1233,2.783,1234,2.783,1294,1.574,1406,2,1407,4.604,1408,4.127,1409,2.904,1410,3.935,1411,3.935,1412,3.935,1413,4.604,1414,4.604,1415,4.604,1416,3.935,1417,3.935,1418,4.127,1419,4.604,1420,2.904,1421,4.956,1422,2.583,1423,3.935,1424,2.583,1425,2.583,1426,2.583,1427,3.399,1428,2.583,1429,3.485,1430,2.583,1431,2.583,1432,3.399,1433,2.583,1434,2.397,1435,3.399,1436,4.127,1437,2.583,1438,3.399,1439,2.583,1440,3.399,1441,3.046,1442,2.583,1443,2.583,1444,2.583,1445,2.583,1446,2.583,1447,2.583,1448,2.583,1449,3.399,1450,2.583,1451,3.399,1452,2.583,1453,2.583,1454,2.583,1455,2.583,1456,2.583,1457,2.583,1458,2.583,1459,2.583,1460,2.583,1461,2.583,1462,2.583,1463,2.583,1464,2.583,1465,2.583,1466,2.231,1467,2.397,1468,2.231,1469,2.231,1470,2.231,1471,4.118,1472,2.231,1473,2.231,1474,3.399,1475,3.046,1476,2.231,1477,2.231,1478,2.231,1479,2.231,1480,2.231,1481,2.231,1482,2.231,1483,3.399,1484,2.231,1485,4.604,1486,2.231,1487,2.231,1488,4.604,1489,2.231,1490,2.231,1491,2.231,1492,3.399,1493,2.231,1494,2.231,1495,2.231,1496,2.231,1497,2.231,1498,2.231,1499,2.231,1500,2.231,1501,2.231,1502,2.231]],["title/classes/LayerManager.html",[36,0.215,741,1.955]],["body/classes/LayerManager.html",[0,0.008,3,0.127,4,0.101,5,0.101,7,0.076,8,0.255,14,0.467,15,0.203,16,0.017,17,0.259,20,0.232,27,0.776,36,0.149,39,0.376,43,0.506,66,0.008,67,0.008,69,0.527,73,1.475,74,0.919,75,1.443,76,0.833,85,0.655,86,0.551,87,0.655,89,1.495,97,1.388,98,0.911,99,0.812,100,1.468,104,1.378,139,2.145,165,0.683,193,1.357,194,2.422,195,1.576,207,2.305,208,1.525,217,1.201,220,1.329,222,2.171,227,1.292,238,3.545,629,1.793,631,1.107,676,2.315,679,2.067,683,1.525,685,1.107,730,4.496,731,1.889,732,1.162,733,4.536,734,3.441,735,2.067,736,3.303,737,0.776,738,3.441,739,4.536,740,5.389,741,2.051,742,1.525,743,2.067,744,3.125,745,5.068,746,4.198,747,3.125,748,3.125,749,3.125,750,3.125,751,4.198,752,3.125,753,3.125,754,3.125,755,3.125,756,3.125,757,2.067,758,2.067,759,3.125,760,3.125,761,2.067,762,2.067,763,3.125,764,3.125,765,2.067,766,3.125,767,3.125,768,4.922,769,2.067,770,3.125,771,2.067,772,3.766,773,3.125,774,2.067,775,3.125,776,2.067,777,3.125,778,2.067,779,3.125,780,2.067,781,3.125,782,2.067,783,2.067,784,2.067,785,2.067,786,3.125,787,2.171,788,3.125,789,2.067,790,2.067,791,2.067,792,2.067,793,2.067,794,4.198,795,2.067,1088,3.125,1325,3.125,1503,4.035,1504,4.035,1505,4.035,1506,4.035,1507,4.035,1508,4.035,1509,4.035,1510,4.035,1511,4.035,1512,2.67,1513,2.67,1514,2.67,1515,2.67,1516,2.67,1517,2.67,1518,2.67,1519,2.67,1520,2.67,1521,2.67,1522,2.67,1523,2.67,1524,2.67,1525,2.67,1526,2.67]],["title/interfaces/LayerToolConfig.html",[0,0.008,1527,2.979]],["body/interfaces/LayerToolConfig.html",[0,0.009,2,1.106,3,0.215,4,0.171,5,0.171,7,0.129,8,0.368,15,0.166,16,0.017,17,0.309,20,0.25,27,2.058,36,0.252,39,0.357,43,0.485,66,0.012,67,0.012,74,0.852,75,1.291,98,0.95,99,0.673,104,1.455,195,1.987,207,3.333,208,2.577,217,1.291,220,1.43,227,1.35,232,3.191,275,2.577,685,1.87,1072,2.965,1409,3.555,1434,4.167,1467,2.749,1527,5.294,1528,3.897,1529,6.377,1530,3.897,1531,3.897,1532,3.493,1533,3.897,1534,3.897,1535,4.63,1536,3.897,1537,3.897,1538,5.041,1539,6.118,1540,3.897,1541,5.907,1542,3.897,1543,5.587,1544,3.897,1545,3.897,1546,3.897,1547,3.897,1548,5.041,1549,3.897,1550,3.897,1551,3.897,1552,3.897,1553,3.897]],["title/classes/LayerTools.html",[36,0.215,1467,2.344]],["body/classes/LayerTools.html",[0,0.007,3,0.172,4,0.137,5,0.137,7,0.103,8,0.317,15,0.216,16,0.017,17,0.276,20,0.215,27,2.066,36,0.202,39,0.375,43,0.449,66,0.01,67,0.01,69,0.712,74,1.09,75,1.381,76,1.035,89,1.49,97,1.483,98,0.946,99,0.805,100,1.439,102,0.884,104,1.299,140,1.985,195,1.814,207,2.866,208,2.059,217,1.179,220,1.23,227,1.233,232,3.549,275,2.059,631,1.494,685,1.494,732,1.568,1072,2.55,1409,3.058,1434,3.804,1467,3.058,1527,5.398,1528,3.114,1529,6.142,1530,3.114,1531,3.114,1532,4.834,1533,3.114,1534,4.335,1535,5.086,1536,3.114,1537,4.335,1538,4.335,1539,6.142,1540,4.335,1541,5.67,1542,3.114,1543,4.987,1544,3.114,1545,3.114,1546,3.114,1547,3.114,1548,4.335,1549,3.114,1550,3.114,1551,3.114,1552,3.114,1553,4.335,1554,5.018,1555,5.018,1556,5.018,1557,3.114,1558,3.604,1559,3.604,1560,3.604,1561,3.604,1562,3.604,1563,3.604,1564,3.604,1565,3.604,1566,3.604,1567,3.604]],["title/interfaces/LayerTransformationData.html",[0,0.008,1436,2.979]],["body/interfaces/LayerTransformationData.html",[0,0.007,2,0.854,3,0.166,4,0.132,5,0.132,7,0.099,8,0.309,14,0.515,15,0.192,16,0.017,17,0.309,20,0.243,22,1.202,23,1.103,36,0.195,39,0.376,43,0.521,66,0.01,67,0.01,71,1.574,73,1.057,74,0.926,75,0.926,78,1.057,83,1.204,84,1.204,87,1.508,98,0.597,99,0.776,102,0.854,104,0.784,137,1.939,139,1.378,165,1.767,174,1.258,175,1.317,192,1.852,193,1.771,194,1.378,217,1.162,220,1.202,629,1.152,631,1.445,676,1.204,678,2.465,693,1.516,694,2.986,698,1.378,732,1.516,733,3.707,736,3.454,737,2.007,739,2.278,741,2.881,787,2.636,986,1.99,1012,1.445,1019,1.378,1041,2.73,1077,2.465,1090,2.465,1092,2.465,1093,4.351,1112,3.467,1233,3.467,1234,3.467,1294,2.123,1406,2.698,1407,5.6,1408,2.698,1409,2.123,1413,3.01,1414,3.01,1415,3.01,1418,2.698,1419,3.01,1420,2.123,1421,4.898,1427,3.01,1429,3.707,1432,3.01,1434,2.123,1435,3.01,1436,4.389,1438,3.01,1440,3.01,1441,2.698,1449,3.01,1451,3.01,1466,3.01,1467,2.986,1468,3.01,1469,3.01,1470,3.01,1471,4.898,1472,3.01,1473,3.01,1474,4.234,1475,3.795,1476,3.01,1477,3.01,1478,3.01,1479,3.01,1480,3.01,1481,3.01,1482,3.01,1483,4.234,1484,3.01,1485,5.314,1486,3.01,1487,3.01,1488,5.314,1489,3.01,1490,3.01,1491,3.01,1492,4.234,1493,3.01,1494,3.01,1495,3.01,1496,3.01,1497,3.01,1498,3.01,1499,3.01,1500,3.01,1501,3.01,1502,3.01]],["title/classes/LayerUtils.html",[36,0.215,1429,2.516]],["body/classes/LayerUtils.html",[3,0.152,4,0.121,5,0.121,7,0.091,10,4.197,12,4.197,14,0.549,15,0.2,16,0.017,17,0.152,20,0.136,22,1.72,23,1.579,24,1.714,36,0.178,39,0.374,43,0.48,66,0.01,67,0.01,69,0.629,76,0.949,85,1.127,86,0.949,89,1.47,97,1.386,98,0.855,99,0.81,100,1.448,104,1.214,174,1.151,175,1.204,192,2.232,195,0.926,216,0.888,217,0.602,220,0.781,629,1.784,631,1.321,691,2.467,692,4.574,694,3.817,698,2.134,704,2.802,713,4.574,715,4.574,822,1.714,823,2.478,1198,3.817,1217,4.178,1381,5.104,1382,5.104,1429,3.007,1475,2.467,1568,3.187,1569,4.599,1570,4.599,1571,4.599,1572,4.599,1573,3.973,1574,4.599,1575,5.908,1576,4.599,1577,4.599,1578,4.599,1579,3.187,1580,4.599,1581,3.187,1582,4.599,1583,6.888,1584,3.187,1585,4.599,1586,4.599,1587,6.488,1588,3.187,1589,4.599,1590,5.908,1591,5.908,1592,3.187,1593,4.599,1594,3.187,1595,5.908,1596,4.599,1597,3.187,1598,5.396,1599,5.396,1600,3.187,1601,4.599,1602,3.187,1603,4.599,1604,3.187,1605,3.187,1606,3.187,1607,3.187,1608,3.187,1609,3.187,1610,3.187,1611,3.187,1612,3.187,1613,3.187]],["title/interfaces/LayerWrapper.html",[0,0.008,738,2.721]],["body/interfaces/LayerWrapper.html",[0,0.01,2,0.824,3,0.16,4,0.128,5,0.128,7,0.096,8,0.302,14,0.504,15,0.182,16,0.017,17,0.289,20,0.259,36,0.188,39,0.357,43,0.523,66,0.01,67,0.01,73,1.019,74,0.635,75,1.443,87,0.824,98,0.889,104,1.572,139,1.329,165,0.86,193,1.708,194,2.628,195,1.759,207,2.729,208,1.92,217,1.291,220,1.484,222,2.569,227,1.379,238,2.197,629,2.001,676,1.92,683,1.92,685,1.393,730,3.931,731,2.377,732,1.462,733,4.815,734,3.931,735,2.602,736,2.911,737,0.977,738,4.281,739,4.89,740,5.027,741,1.708,742,1.92,743,2.602,744,2.602,745,5.408,746,4.686,747,3.699,748,3.699,749,3.699,750,3.699,751,4.686,752,3.699,753,3.699,754,3.699,755,3.699,756,3.699,757,2.602,758,2.602,759,3.699,760,2.602,761,2.602,762,2.602,763,2.602,764,3.699,765,2.602,766,2.602,767,2.602,768,5.292,769,2.602,770,2.602,771,2.602,772,4.303,773,2.602,774,2.602,775,3.699,776,2.602,777,2.602,778,2.602,779,2.602,780,2.602,781,2.602,782,2.602,783,2.602,784,2.602,785,2.602,786,2.602,787,1.808,788,2.602,789,2.602,790,2.602,791,2.602,792,2.602,793,2.602,794,2.602,795,2.602]],["title/classes/LineTool.html",[36,0.215,37,2.344]],["body/classes/LineTool.html",[0,0.011,1,3.296,3,0.127,4,0.101,5,0.101,6,1.738,7,0.076,8,0.254,9,1.33,10,1.619,11,1.738,12,1.619,13,1.738,14,0.536,15,0.217,16,0.017,17,0.127,18,3.197,19,1.28,20,0.249,21,3.296,22,1.326,23,1.307,24,1.429,25,1.518,26,1.518,27,0.772,28,3.296,29,1.738,30,1.738,31,3.296,32,1.738,33,1.738,34,1.738,35,1.738,36,0.149,37,2.45,38,0.794,39,0.38,40,2.629,41,1.486,42,1.738,43,0.398,44,2.629,45,1.518,46,2.336,47,2.111,48,1.75,49,1.518,50,1.518,51,1.518,52,2.629,53,1.738,54,1.738,55,1.738,56,1.738,57,2.629,58,1.738,59,1.738,60,2.629,61,1.738,62,1.738,63,1.738,64,1.738,65,1.738,66,0.008,67,0.008,69,0.525,71,1.563,72,1.519,73,1.22,74,0.759,75,0.916,76,0.83,77,2.45,78,1.471,79,2.629,80,2.45,82,2.629,83,1.676,84,1.676,85,1.189,86,1.001,87,0.652,88,2.955,89,1.571,90,1.591,91,0.96,92,1.051,97,1.451,98,0.896,99,0.848,100,1.555,102,0.652,103,1.738,104,1.217,105,3.296,106,3.296,108,1.519,109,1.619,115,1.051,116,1.051,125,3.431,126,2.844,127,2.629,128,3.431,129,2.844,130,2.844,131,2.844,132,2.844,133,2.844,134,2.844,136,1.88,137,2.417,139,2.511,140,1.919,141,1.88,143,1.88,146,1.88,148,1.88,150,1.88,151,2.844,153,1.88,154,1.88,156,1.88,157,1.88,158,2.844,159,2.844,160,2.844,162,1.619,163,1.88,165,0.68,166,1.88,168,1.88,170,1.88,172,1.102,862,2.45,866,2.058,867,2.058,868,2.058,869,2.058,870,2.058,871,2.058,872,2.058,873,2.058,874,2.058,875,2.058,876,2.058,877,2.058,878,2.058,879,2.058,1614,4.021,1615,4.021,1616,4.021,1617,4.021,1618,2.658,1619,2.658,1620,2.658,1621,2.658,1622,2.658]],["title/interfaces/PixelTransformerContext.html",[0,0.008,1623,2.721]],["body/interfaces/PixelTransformerContext.html",[0,0.01,2,0.887,3,0.173,4,0.137,5,0.137,7,0.103,8,0.318,14,0.537,15,0.178,16,0.017,17,0.276,20,0.248,36,0.202,38,0.714,39,0.367,41,1.287,43,0.511,66,0.011,67,0.011,71,1.287,165,1.821,216,1.611,217,0.683,220,0.887,227,1.298,629,2.068,737,2.101,820,2.301,821,1.946,907,2.559,1012,2.593,1019,2.474,1045,3.363,1046,3.363,1047,3.363,1048,3.363,1186,2.423,1188,4.448,1221,2.205,1222,2.874,1223,2.874,1224,2.706,1420,3.81,1535,3.29,1623,4.423,1624,2.801,1625,2.559,1626,2.801,1627,4.092,1628,2.366,1629,2.801,1630,2.801,1631,5.089,1632,2.801,1633,2.801,1634,5.268,1635,4.842,1636,4.842,1637,2.801,1638,2.801,1639,5.726,1640,2.801,1641,2.801,1642,2.801,1643,2.801,1644,2.801,1645,2.801,1646,2.801,1647,2.801,1648,2.801,1649,2.801,1650,2.801,1651,2.801,1652,2.801,1653,3.896,1654,2.801,1655,2.801,1656,2.801,1657,2.801,1658,2.801,1659,2.801,1660,2.801,1661,2.801,1662,2.801,1663,2.801,1664,2.801,1665,4.842,1666,4.842,1667,2.801,1668,2.801,1669,2.801,1670,2.801,1671,2.801,1672,2.801]],["title/interfaces/PixelTransformerRenderContext.html",[0,0.008,1627,2.721]],["body/interfaces/PixelTransformerRenderContext.html",[0,0.01,2,0.883,3,0.172,4,0.137,5,0.137,7,0.103,8,0.316,14,0.536,15,0.178,16,0.017,17,0.275,20,0.247,36,0.201,38,0.711,39,0.366,41,1.283,43,0.51,66,0.01,67,0.01,71,1.283,99,0.72,165,1.818,216,1.607,217,0.68,220,0.883,227,1.295,629,2.063,737,2.098,820,2.293,821,1.936,907,2.546,1012,2.587,1019,2.468,1045,3.356,1046,3.356,1047,3.356,1048,3.356,1186,2.414,1188,4.441,1221,2.193,1222,2.864,1223,2.864,1224,2.697,1420,3.802,1535,3.278,1623,4.081,1624,2.787,1625,2.546,1626,2.787,1627,4.413,1628,2.354,1629,2.787,1630,2.787,1631,5.079,1632,2.787,1633,2.787,1634,5.259,1635,4.831,1636,4.831,1637,2.787,1638,2.787,1639,5.721,1640,2.787,1641,2.787,1642,2.787,1643,2.787,1644,2.787,1645,2.787,1646,2.787,1647,2.787,1648,2.787,1649,2.787,1650,2.787,1651,2.787,1652,2.787,1653,3.882,1654,2.787,1655,2.787,1656,2.787,1657,2.787,1658,2.787,1659,2.787,1660,2.787,1661,2.787,1662,2.787,1663,2.787,1664,2.787,1665,4.831,1666,4.831,1667,2.787,1668,2.787,1669,2.787,1670,2.787,1671,2.787,1672,2.787]],["title/classes/PixelsTool.html",[36,0.215,1628,2.516]],["body/classes/PixelsTool.html",[0,0.008,3,0.12,4,0.095,5,0.095,7,0.072,8,0.243,14,0.528,15,0.206,16,0.017,17,0.224,20,0.201,36,0.141,38,0.761,39,0.38,41,0.986,43,0.475,66,0.008,67,0.008,69,0.496,71,1.685,72,1.456,73,1.169,74,0.728,75,0.885,76,0.795,78,1.422,83,1.619,84,1.619,85,0.945,86,0.795,87,0.616,88,2.366,89,1.55,90,1.525,91,0.908,92,0.994,97,1.402,98,0.846,99,0.801,100,1.521,102,1.149,115,0.994,116,0.994,140,1.525,165,1.53,172,1.042,216,1.306,217,0.475,220,0.616,227,1.119,629,2.124,711,1.778,725,2.349,737,1.867,820,2.403,821,1.352,901,1.946,902,2.172,904,3.33,906,3.33,907,3.717,950,2.984,951,2.172,1012,2.876,1019,2.079,1045,2.827,1046,2.827,1047,2.827,1048,2.827,1072,1.278,1186,1.856,1188,4.2,1207,1.778,1221,1.532,1222,2.202,1223,2.202,1224,2.073,1420,3.914,1535,4.2,1623,4.403,1624,1.946,1625,1.778,1626,1.946,1627,4.403,1628,2.52,1629,2.984,1630,1.946,1631,4.388,1632,2.984,1633,1.946,1634,4.63,1635,4.069,1636,4.069,1637,1.946,1638,2.984,1639,5.294,1640,1.946,1641,2.984,1642,1.946,1643,1.946,1644,2.984,1645,1.946,1646,2.984,1647,1.946,1648,2.984,1649,1.946,1650,2.984,1651,1.946,1652,2.984,1653,4.069,1654,1.946,1655,3.629,1656,3.629,1657,1.946,1658,1.946,1659,4.069,1660,1.946,1661,4.069,1662,1.946,1663,2.984,1664,1.946,1665,4.069,1666,4.069,1667,2.984,1668,1.946,1669,4.069,1670,1.946,1671,1.946,1672,1.946,1673,3.854,1674,3.854,1675,3.33,1676,3.854,1677,3.854,1678,3.854,1679,3.854,1680,3.854,1681,2.514,1682,2.514,1683,2.514,1684,2.514,1685,2.514,1686,3.854,1687,2.514,1688,2.514,1689,2.514,1690,2.514,1691,2.514,1692,2.514,1693,2.514,1694,2.514,1695,2.514,1696,2.514,1697,2.514,1698,2.514,1699,2.514,1700,2.514]],["title/interfaces/QuadraticBezierCurveOptions.html",[0,0.008,28,2.344]],["body/interfaces/QuadraticBezierCurveOptions.html",[0,0.014,1,3.512,2,1.085,3,0.211,4,0.168,5,0.168,6,2.894,7,0.126,8,0.364,9,1.906,10,2.697,11,2.894,12,2.697,13,2.894,14,0.549,15,0.194,16,0.017,17,0.211,18,2.508,19,2.132,20,0.301,21,3.512,22,1.769,23,1.624,24,2.381,25,2.529,26,2.529,27,1.286,28,3.905,29,4.439,30,4.439,31,3.512,32,2.894,33,2.894,34,2.894,35,2.894,36,0.248,37,2.697,38,0.874,39,0.336,40,2.894,41,1.801,42,2.894,43,0.482,44,2.894,45,2.529,46,3.086,47,2.789,48,2.508,49,2.529,50,2.529,51,2.529,52,2.894,53,2.894,54,2.894,55,2.894,56,2.894,57,2.894,58,2.894,59,2.894,60,2.894,61,2.894,62,2.894,63,2.894,64,2.894,65,2.894,66,0.012,67,0.012]],["title/interfaces/RawImageData.html",[0,0.008,1199,2.979]],["body/interfaces/RawImageData.html",[0,0.009,2,1.077,3,0.21,4,0.218,5,0.167,7,0.125,8,0.362,14,0.493,15,0.193,16,0.017,17,0.305,20,0.301,36,0.246,38,0.867,39,0.344,43,0.481,66,0.012,67,0.012,74,0.83,165,1.732,174,2.071,175,1.659,216,1.885,217,1.083,227,1.448,269,4.056,737,1.967,1012,2.378,1019,1.737,1076,4.056,1083,4.056,1186,2.115,1187,3.107,1188,4.425,1191,3.795,1192,3.795,1194,3.866,1196,3.795,1197,3.795,1198,4.124,1199,5.241,1201,3.795,1207,4.056,1208,4.44,1209,4.44,1210,4.44,1211,4.44,1212,4.44,1213,4.954,1214,3.401,1215,3.276,1216,3.401,1217,3.401,1218,3.795,1219,3.795,1220,3.795,1221,2.676,1222,2.509,1223,2.509,1224,2.362,1225,5.516,1226,3.795,1227,3.795,1228,3.795,1229,3.795,1230,4.954,1231,3.795,1232,4.954,1233,4.056,1234,4.056,1235,5.847,1236,3.795,1237,3.795,1238,3.795]],["title/interfaces/RectangleOptions.html",[0,0.008,1701,2.721]],["body/interfaces/RectangleOptions.html",[0,0.012,2,1.161,3,0.226,4,0.18,5,0.18,7,0.135,8,0.38,9,1.567,14,0.542,15,0.199,16,0.017,17,0.226,18,2.62,19,2.281,20,0.283,22,1.763,23,1.618,36,0.265,38,0.935,39,0.287,41,1.212,43,0.412,46,3.538,47,3.344,48,3.128,66,0.013,67,0.013,165,1.839,182,2.887,183,2.887,737,2.089,856,3.098,885,4.804,886,4.701,1701,4.681,1702,3.668,1703,4.259,1704,3.351,1705,3.668,1706,3.668,1707,3.668,1708,4.662,1709,4.662]],["title/classes/RectangleTool.html",[36,0.215,1704,2.721]],["body/classes/RectangleTool.html",[0,0.009,3,0.139,4,0.111,5,0.111,7,0.083,8,0.272,9,0.964,14,0.52,15,0.217,16,0.017,17,0.139,18,3.243,19,1.404,20,0.219,22,1.257,23,1.274,36,0.163,38,0.851,39,0.379,41,0.746,43,0.295,46,3.046,47,3.036,48,2.629,66,0.009,67,0.009,69,0.576,71,1.618,72,1.628,73,1.307,74,0.814,75,0.968,76,0.889,77,2.625,78,1.555,79,2.817,80,2.625,82,2.817,83,1.771,84,1.771,85,1.257,86,1.058,87,0.715,88,2.992,89,1.573,90,1.704,91,1.053,92,1.153,97,1.442,98,0.89,99,0.843,100,1.554,102,0.715,103,1.906,104,1.274,105,3.45,106,3.45,108,1.628,109,1.776,115,1.153,116,1.153,125,3.625,126,3.047,127,2.817,128,3.625,129,3.047,130,3.047,131,3.047,132,3.047,133,3.047,134,3.047,136,2.062,137,2.502,139,2.39,140,2.028,141,2.062,143,2.062,146,2.062,148,2.062,150,2.062,151,3.047,153,2.062,154,2.062,156,2.062,157,2.062,158,3.047,159,3.047,160,3.047,162,1.776,163,2.062,165,1.311,166,2.062,168,2.062,170,2.062,172,1.208,182,1.776,183,1.776,737,1.252,856,2.817,862,2.625,866,2.257,867,2.257,868,2.257,869,2.257,870,2.257,871,2.257,872,2.257,873,2.257,874,2.257,875,2.257,876,2.257,877,2.257,878,2.257,879,2.257,885,4.136,886,3.951,1379,3.336,1701,4.005,1702,2.257,1703,4.005,1704,3.047,1705,2.257,1706,3.336,1707,2.257,1708,3.336,1709,3.336,1710,2.915,1711,2.915]],["title/interfaces/RoundedRectangleOptions.html",[0,0.008,1703,2.721]],["body/interfaces/RoundedRectangleOptions.html",[0,0.012,2,1.148,3,0.224,4,0.178,5,0.178,7,0.134,8,0.377,9,2.293,14,0.543,15,0.204,16,0.017,17,0.224,18,2.6,19,2.255,20,0.282,22,1.756,23,1.612,36,0.262,38,0.925,39,0.285,41,1.198,43,0.409,46,3.528,47,3.338,48,3.117,66,0.012,67,0.012,165,1.833,182,2.853,183,2.853,737,2.082,856,3.062,885,4.79,886,4.684,1701,4.227,1702,3.626,1703,4.656,1704,3.312,1705,3.626,1706,3.626,1707,3.626,1708,4.627,1709,4.627]],["title/classes/ShadowTool.html",[36,0.215,1712,3.324]],["body/classes/ShadowTool.html",[3,0.202,4,0.16,5,0.16,7,0.12,8,0.353,14,0.511,15,0.203,16,0.017,17,0.202,20,0.181,36,0.236,38,1.103,39,0.379,41,1.705,43,0.456,66,0.012,67,0.012,69,0.834,71,1.91,72,2.111,73,1.695,74,1.055,75,1.183,76,1.153,78,1.899,83,2.163,84,2.163,85,1.37,86,1.153,87,1.035,88,2.818,89,1.555,90,2.21,91,1.525,92,1.67,97,1.316,98,0.813,99,0.769,100,1.499,102,1.035,104,1.409,108,2.111,115,1.67,116,1.67,117,1.931,172,1.751,262,5.038,1712,4.827,1713,4.222,1714,5.587,1715,4.827,1716,5.587,1717,5.587,1718,5.587,1719,4.222,1720,4.827,1721,4.222,1722,5.587,1723,4.222,1724,5.587,1725,4.222,1726,4.222,1727,4.222,1728,4.222,1729,4.222]],["title/classes/SharpenTool.html",[36,0.215,1730,3.324]],["body/classes/SharpenTool.html",[3,0.227,4,0.18,5,0.18,7,0.135,8,0.38,14,0.413,15,0.199,16,0.017,17,0.227,20,0.203,36,0.265,38,1.19,39,0.378,66,0.013,67,0.013,69,0.937,71,1.881,72,2.277,73,1.828,74,1.138,75,1.251,76,1.244,78,2.009,83,2.288,84,2.288,85,1.624,86,1.367,87,1.163,88,2.954,89,1.56,90,2.384,91,1.714,92,1.877,97,1.19,98,0.735,99,0.696,100,1.484,102,1.163,115,1.877,116,1.877,139,1.877,172,1.967,194,2.384,262,4.685,686,4.263,695,4.929,696,3.674,724,5.207,1730,5.207,1731,4.745,1732,6.027,1733,6.027,1734,4.745,1735,4.745,1736,4.1]],["title/interfaces/TextDataSource.html",[0,0.008,824,2.516]],["body/interfaces/TextDataSource.html",[0,0.013,2,1.043,3,0.203,4,0.213,5,0.161,7,0.121,8,0.354,9,1.407,14,0.506,15,0.198,16,0.017,17,0.203,20,0.286,22,1.377,23,1.264,27,1.632,36,0.238,39,0.36,43,0.476,66,0.012,67,0.012,86,1.434,98,0.519,104,1.682,137,2.221,165,1.088,195,1.632,206,2.43,216,1.751,217,1.187,220,1.377,227,0.84,246,2.592,248,2.592,693,2.735,698,2.221,732,3.024,737,1.236,796,4.073,797,3.009,799,3.009,802,3.009,804,3.009,805,4.371,808,3.009,810,5.049,811,3.009,813,3.009,819,3.009,820,2.568,821,2.288,822,2.288,823,1.683,824,4.11,825,3.671,826,2.781,827,2.781,828,2.781,829,2.781,830,2.43,831,3.009,832,3.009,833,5.049,834,3.009,835,3.009,836,3.009,837,3.207,838,3.009,839,3.009,840,3.009,841,3.009,842,3.009,843,3.009,844,3.972,845,3.009,846,3.009,847,3.009]],["title/classes/TextTool.html",[36,0.215,1737,2.979]],["body/classes/TextTool.html",[3,0.12,4,0.095,5,0.095,7,0.072,8,0.243,14,0.501,15,0.204,16,0.017,17,0.224,20,0.108,22,1.574,23,1.445,36,0.14,38,0.761,39,0.378,41,1.643,43,0.486,66,0.008,67,0.008,69,0.496,71,1.684,72,1.455,73,1.168,74,0.727,75,0.885,76,0.795,78,1.421,80,2.347,83,1.618,84,1.618,85,0.944,86,0.795,87,0.616,88,2.365,89,1.529,90,1.524,91,0.907,92,0.994,97,1.387,98,0.873,99,0.81,100,1.502,102,0.616,104,1.755,105,3.643,106,3.643,108,1.985,109,2.347,115,0.994,116,0.994,117,1.149,118,1.945,121,1.945,140,2.241,162,3.452,172,1.041,174,0.907,175,0.949,176,1.776,177,2.17,629,1.274,822,3.047,826,4.198,827,1.642,828,1.642,1104,3.627,1105,3.627,1194,2.676,1222,2.2,1223,2.2,1224,2.072,1715,3.327,1720,3.327,1737,2.982,1738,2.512,1739,5.253,1740,3.852,1741,3.852,1742,3.852,1743,3.852,1744,3.852,1745,3.852,1746,3.852,1747,3.852,1748,3.852,1749,3.852,1750,3.852,1751,2.512,1752,3.852,1753,2.512,1754,3.852,1755,2.512,1756,3.852,1757,6.421,1758,2.512,1759,3.852,1760,2.512,1761,3.852,1762,2.512,1763,2.512,1764,2.512,1765,3.852,1766,4.685,1767,4.685,1768,4.685,1769,2.512,1770,3.852,1771,3.852,1772,5.253,1773,2.512,1774,2.512,1775,3.852,1776,4.685,1777,4.685,1778,4.685,1779,4.685,1780,4.685,1781,2.512,1782,5.253,1783,3.852,1784,4.685,1785,4.685,1786,4.685,1787,4.685,1788,2.512,1789,3.852,1790,2.512,1791,3.852,1792,2.512,1793,2.512,1794,2.512,1795,2.512,1796,2.512,1797,2.512,1798,2.512,1799,2.512,1800,2.512,1801,2.512,1802,2.512,1803,2.512,1804,2.512,1805,3.852,1806,2.512,1807,2.512]],["title/classes/ToolBox.html",[36,0.215,71,0.984]],["body/classes/ToolBox.html",[3,0.22,4,0.175,5,0.175,7,0.131,8,0.373,15,0.203,16,0.017,17,0.282,20,0.28,36,0.258,39,0.378,41,1.513,43,0.405,66,0.012,67,0.012,69,0.91,71,1.513,72,2.693,73,1.981,74,1.234,75,1.433,76,1.22,78,2.09,83,2.381,84,2.381,85,1.45,86,1.22,87,1.45,89,1.531,91,2.359,97,0.91,98,0.562,99,0.532,100,1.348,102,1.129,123,3.98,174,1.664,175,1.74,631,1.91,685,1.91,694,3.604,698,1.822,961,2.807,1294,2.807,1399,3.98,1403,3.98,1557,3.98,1808,3.98,1809,5.914,1810,5.914,1811,4.607,1812,4.607,1813,4.607,1814,5.109,1815,3.98,1816,4.607,1817,4.607]],["title/interfaces/TransformOptions.html",[0,0.008,1818,2.979]],["body/interfaces/TransformOptions.html",[0,0.009,2,1.057,3,0.206,4,0.164,5,0.164,7,0.123,8,0.358,14,0.544,15,0.204,16,0.017,17,0.206,20,0.243,23,1.512,36,0.241,38,0.851,39,0.349,41,1.833,43,0.5,66,0.012,67,0.012,71,1.449,99,0.776,117,1.972,194,2.658,227,0.851,1818,5.404,1819,3.725,1820,6.03,1821,6.03,1822,6.03,1823,6.03,1824,6.03,1825,6.03,1826,3.339,1827,3.725,1828,3.725,1829,3.725,1830,5.806,1831,5.806,1832,3.725,1833,4.895,1834,4.895,1835,4.895,1836,4.895,1837,3.725,1838,3.725,1839,3.725,1840,3.725,1841,3.725,1842,3.725,1843,3.725,1844,3.725,1845,3.725,1846,3.725,1847,3.725,1848,3.725,1849,3.725,1850,3.725,1851,3.725,1852,3.725,1853,3.725]],["title/classes/TransformTool.html",[36,0.215,1826,2.979]],["body/classes/TransformTool.html",[0,0.007,3,0.169,4,0.134,5,0.134,7,0.101,8,0.313,14,0.531,15,0.198,16,0.017,17,0.169,20,0.212,22,1.214,23,1.593,36,0.198,38,0.978,39,0.379,41,1.728,43,0.475,66,0.01,67,0.01,69,0.698,71,1.84,72,1.871,73,1.502,74,0.935,75,1.079,76,1.022,78,1.733,83,1.974,84,1.974,85,1.214,86,1.022,87,0.867,88,2.672,89,1.545,90,1.959,91,1.277,92,1.399,97,1.287,98,0.795,99,0.752,100,1.503,102,0.867,115,1.399,116,1.399,117,1.618,139,1.959,172,1.466,194,2.449,227,0.698,927,3.056,950,3.835,1818,5.568,1819,3.056,1820,4.279,1821,4.279,1822,4.279,1823,4.279,1824,4.279,1825,4.279,1826,3.835,1827,4.279,1828,3.056,1829,4.279,1830,5.349,1831,5.349,1832,3.056,1833,4.279,1834,4.279,1835,4.279,1836,4.279,1837,4.279,1838,3.056,1839,5.349,1840,3.056,1841,5.349,1842,3.056,1843,3.056,1844,3.056,1845,3.056,1846,3.056,1847,3.056,1848,3.056,1849,3.056,1850,4.279,1851,3.056,1852,4.279,1853,3.056,1854,4.953,1855,4.953,1856,3.835,1857,4.953,1858,3.537,1859,3.537,1860,3.537,1861,3.537,1862,3.537,1863,3.537,1864,3.537]],["title/changelog.html",[1865,2.273,1866,2.273,1867,3.214]],["body/changelog.html",[4,0.157,15,0.118,16,0.012,20,0.236,66,0.012,67,0.012,71,1.762,75,1.338,76,1.28,85,1.015,108,2.084,127,2.708,176,2.93,188,3.578,216,1.154,252,6.158,253,3.578,267,2.93,270,2.366,676,2.143,678,3.902,705,3.207,726,3.578,796,2.524,822,2.967,823,2.616,830,3.778,974,2.708,986,2.366,1015,2.524,1041,1.995,1089,2.93,1108,3.207,1186,1.995,1198,3.361,1215,3.151,1245,3.207,1306,3.207,1363,5.714,1377,3.207,1379,3.207,1387,3.578,1408,3.207,1409,4.03,1420,2.524,1429,3.607,1434,4.197,1467,3.361,1532,3.207,1573,3.578,1625,2.93,1628,2.708,1736,4.766,1737,3.207,1856,3.207,1868,3.578,1869,5.951,1870,6.889,1871,6.614,1872,5.359,1873,5.714,1874,4.142,1875,4.142,1876,4.142,1877,6.614,1878,6.614,1879,4.142,1880,4.766,1881,4.142,1882,4.142,1883,4.142,1884,4.142,1885,4.142,1886,3.578,1887,4.142,1888,4.142,1889,4.142,1890,5.359,1891,4.142,1892,6.889,1893,4.142,1894,4.142,1895,3.578,1896,4.142,1897,4.142,1898,4.142,1899,4.142,1900,4.142,1901,4.142,1902,4.142,1903,4.142,1904,3.578,1905,4.142,1906,4.142,1907,4.142,1908,4.142,1909,4.142,1910,4.142,1911,4.142,1912,4.142,1913,4.142,1914,4.142,1915,4.142,1916,4.142,1917,4.142,1918,4.142,1919,5.517,1920,4.142,1921,4.142,1922,4.142,1923,5.517,1924,4.142,1925,4.142,1926,4.142,1927,4.142,1928,4.766,1929,4.142,1930,4.142,1931,4.142,1932,4.142,1933,4.142,1934,4.142,1935,3.207,1936,4.142,1937,4.142,1938,4.142,1939,4.142,1940,4.142,1941,3.578,1942,4.142,1943,4.766,1944,4.142,1945,4.142,1946,4.142,1947,4.142,1948,4.142,1949,4.142,1950,4.142,1951,4.142]],["title/contributing.html",[1865,2.273,1866,2.273,1952,2.776]],["body/contributing.html",[5,0.204,16,0.014,36,0.364,66,0.014,67,0.014,162,3.269,243,5.42,676,1.854,741,2.727,837,3.065,1001,4.577,1111,4.154,1309,5.771,1365,4.635,1935,5.036,1952,5.619,1953,5.366,1954,5.366,1955,4.635,1956,5.366,1957,5.366,1958,6.505,1959,5.366,1960,4.635,1961,4.635,1962,5.366,1963,5.366,1964,7,1965,7,1966,5.619,1967,6.505,1968,5.366,1969,5.366,1970,4.635,1971,5.366,1972,6.505,1973,5.619,1974,5.366,1975,5.366,1976,4.635,1977,5.366,1978,6.505,1979,5.366,1980,5.366,1981,6.505,1982,5.366,1983,4.635,1984,5.366,1985,5.366,1986,5.366,1987,5.366,1988,5.366,1989,5.366,1990,5.366,1991,5.366,1992,5.366,1993,5.366]],["title/miscellaneous/functions.html",[1994,1.958,1995,3.997]],["body/miscellaneous/functions.html",[4,0.201,7,0.151,14,0.442,15,0.199,16,0.016,66,0.013,67,0.013,85,1.301,86,1.095,87,1.301,97,1.467,98,0.906,99,0.858,100,1.095,140,2.099,176,4.569,734,4.927,974,4.224,1194,3.69,1274,5.002,1280,4.108,1281,5.581,1286,5.581,1294,3.233,1300,5.581,1301,4.583,1307,4.583,1311,4.583,1313,5.581,1323,5.581,1324,5.581,1325,5.002,1340,4.583,1880,4.583,1994,3.233,1995,4.583,1996,6.46,1997,6.262,1998,5.305,1999,6.46,2000,5.305,2001,5.305,2002,5.305,2003,5.305,2004,5.305,2005,5.305]],["title/index.html",[7,0.092,1865,2.273,1866,2.273]],["body/index.html",[5,0.15,16,0.017,17,0.29,66,0.011,67,0.011,75,1.282,77,3.696,78,1.624,98,0.483,108,2.701,174,2.191,175,1.497,192,2.023,217,1.146,222,2.131,227,1.436,252,4.146,270,3.711,279,3.423,287,3.423,354,3.423,428,3.423,493,3.423,568,3.423,676,2.344,693,2.33,717,3.501,732,1.724,742,3.711,822,2.131,823,2.118,830,3.876,901,3.068,914,3.423,942,3.423,959,3.068,960,4.146,967,4.146,986,2.263,1001,2.591,1015,4.135,1019,1.567,1049,2.803,1089,3.788,1291,3.423,1297,4.626,1343,6.042,1409,3.263,1418,3.068,1434,3.263,1587,3.423,1675,3.423,1856,3.068,1872,3.423,1873,3.423,1886,3.423,1890,3.423,1895,3.423,1904,4.626,1928,3.423,1935,3.068,1941,3.423,1943,5.24,1955,3.423,1960,3.423,1961,3.423,1966,3.423,1970,4.626,1976,3.423,1983,3.423,2006,3.423,2007,3.423,2008,4.626,2009,3.962,2010,6.066,2011,6.066,2012,3.962,2013,3.962,2014,3.962,2015,3.962,2016,5.355,2017,5.355,2018,3.962,2019,3.962,2020,3.962,2021,3.962,2022,3.962,2023,3.962,2024,5.355,2025,3.423,2026,3.423,2027,3.962,2028,3.962,2029,3.962,2030,6.497,2031,3.962,2032,3.962,2033,3.962,2034,3.962,2035,3.962,2036,5.355,2037,3.962,2038,3.962,2039,3.962,2040,3.962,2041,3.962,2042,3.962,2043,3.962,2044,3.962,2045,3.962,2046,3.962,2047,3.962,2048,3.962,2049,3.962,2050,3.962,2051,3.962,2052,5.355,2053,4.626,2054,5.355,2055,5.355,2056,3.962,2057,3.962,2058,3.962,2059,3.962,2060,3.962,2061,3.962,2062,3.962,2063,5.355,2064,5.355,2065,3.962,2066,3.962,2067,3.962,2068,5.355,2069,5.355,2070,3.962,2071,3.962,2072,3.962,2073,3.962,2074,3.962,2075,3.962]],["title/license.html",[1865,2.273,1866,2.273,2076,2.488]],["body/license.html",[16,0.013,66,0.013,67,0.013,637,4.499,1309,4.945,1441,4.945,1869,4.499,1973,4.499,2025,4.499,2053,4.499,2076,4.032,2077,4.499,2078,6.909,2079,4.499,2080,6.387,2081,5.208,2082,5.208,2083,5.208,2084,5.208,2085,5.208,2086,5.208,2087,7.753,2088,5.208,2089,5.208,2090,6.909,2091,5.208,2092,6.387,2093,5.208,2094,5.208,2095,5.208,2096,5.208,2097,5.208,2098,5.208,2099,5.208,2100,5.208,2101,5.208,2102,6.387,2103,5.208,2104,5.208,2105,5.208,2106,5.208,2107,5.208,2108,5.208,2109,5.208,2110,6.387,2111,6.387,2112,5.208,2113,5.208,2114,5.208,2115,5.208,2116,5.208,2117,5.208,2118,5.208,2119,5.208,2120,5.208,2121,5.208,2122,5.208,2123,5.208,2124,5.208,2125,5.208,2126,5.208,2127,5.208,2128,5.208,2129,5.208,2130,5.208,2131,5.208,2132,5.208,2133,5.208,2134,5.208,2135,5.208,2136,5.208,2137,5.208,2138,5.208,2139,5.208,2140,5.208,2141,5.208]],["title/modules.html",[2142,4.535]],["body/modules.html",[16,0.015,66,0.015,67,0.015,2142,5.403]],["title/overview.html",[2143,4.535]],["body/overview.html",[2,1.52,16,0.015,66,0.015,67,0.015,69,1.224,2143,5.355,2144,6.199,2145,6.199]],["title/properties.html",[8,0.292,2146,3.214]],["body/properties.html",[8,0.368,16,0.017,66,0.014,67,0.014,676,2.014,823,2.703,830,3.33,1041,2.807,1261,4.513,1868,5.036,2006,5.904,2007,5.904,2008,5.036,2026,5.036,2076,4.513,2077,5.036,2079,5.036,2147,5.829,2148,5.829,2149,5.829,2150,5.829,2151,5.829,2152,5.829,2153,5.829,2154,5.829,2155,5.829]],["title/miscellaneous/typealiases.html",[1994,1.958,2156,4.627]],["body/miscellaneous/typealiases.html",[7,0.154,14,0.37,15,0.186,16,0.017,66,0.014,67,0.014,75,1.234,91,2.36,102,1.325,104,1.471,137,2.139,676,1.868,693,2.352,731,3.824,736,3.982,740,4.622,820,2.988,823,2.139,837,3.088,849,4.186,853,5.059,899,4.671,912,5.645,1041,2.604,1186,2.604,1187,3.824,1194,3.088,1198,3.294,1216,5.059,1280,4.186,1294,3.294,1303,4.671,1304,4.671,1305,4.671,1306,4.186,1406,4.186,1808,4.671,1814,5.645,1815,4.671,1994,3.294,1997,4.671,2157,5.406,2158,6.535,2159,5.406,2160,5.406,2161,4.671,2162,5.406,2163,5.406]],["title/miscellaneous/variables.html",[1994,1.958,2164,3.997]],["body/miscellaneous/variables.html",[7,0.169,15,0.169,16,0.016,66,0.014,67,0.014,85,1.456,86,1.226,275,3.392,1187,4.201,1207,4.201,1208,4.598,1209,4.598,1210,4.598,1211,4.598,1212,4.598,1221,4.21,1222,3.392,1223,3.392,1224,3.194,1994,3.619,2161,5.131,2164,5.131]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"changelog.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":192,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/ColorUtil.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"index.html":{}}}],["0.${val.replace",{"_index":1180,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["0.1.0",{"_index":1897,"title":{},"body":{"changelog.html":{}}}],["0.3.0",{"_index":1885,"title":{},"body":{"changelog.html":{}}}],["0.3.1",{"_index":1882,"title":{},"body":{"changelog.html":{}}}],["0.3.2",{"_index":1876,"title":{},"body":{"changelog.html":{}}}],["0.3.3",{"_index":1868,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["000000",{"_index":277,"title":{},"body":{"classes/ColorUtil.html":{}}}],["000080",{"_index":530,"title":{},"body":{"classes/ColorUtil.html":{}}}],["00008b",{"_index":377,"title":{},"body":{"classes/ColorUtil.html":{}}}],["0000cd",{"_index":504,"title":{},"body":{"classes/ColorUtil.html":{}}}],["0000ff",{"_index":354,"title":{},"body":{"classes/ColorUtil.html":{},"index.html":{}}}],["006400",{"_index":385,"title":{},"body":{"classes/ColorUtil.html":{}}}],["0074071",{"_index":1925,"title":{},"body":{"changelog.html":{}}}],["008000",{"_index":440,"title":{},"body":{"classes/ColorUtil.html":{}}}],["008080",{"_index":603,"title":{},"body":{"classes/ColorUtil.html":{}}}],["008b8b",{"_index":379,"title":{},"body":{"classes/ColorUtil.html":{}}}],["00bfff",{"_index":415,"title":{},"body":{"classes/ColorUtil.html":{}}}],["00ced1",{"_index":409,"title":{},"body":{"classes/ColorUtil.html":{}}}],["00fa9a",{"_index":514,"title":{},"body":{"classes/ColorUtil.html":{}}}],["00ff00",{"_index":493,"title":{},"body":{"classes/ColorUtil.html":{},"index.html":{}}}],["00ff7f",{"_index":597,"title":{},"body":{"classes/ColorUtil.html":{}}}],["00ffff",{"_index":341,"title":{},"body":{"classes/ColorUtil.html":{}}}],["06",{"_index":1870,"title":{},"body":{"changelog.html":{}}}],["0f8f753",{"_index":1891,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":194,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/ColorUtil.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"classes/FilterTool.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"classes/SharpenTool.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["10",{"_index":662,"title":{},"body":{"classes/ColorUtil.html":{}}}],["100",{"_index":664,"title":{},"body":{"classes/ColorUtil.html":{},"classes/FilterTool.html":{}}}],["100).tostring",{"_index":665,"title":{},"body":{"classes/ColorUtil.html":{}}}],["1000",{"_index":975,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["10398f8",{"_index":1951,"title":{},"body":{"changelog.html":{}}}],["11806a",{"_index":303,"title":{},"body":{"classes/ColorUtil.html":{}}}],["14",{"_index":1898,"title":{},"body":{"changelog.html":{}}}],["16).tostring",{"_index":660,"title":{},"body":{"classes/ColorUtil.html":{}}}],["16777216",{"_index":668,"title":{},"body":{"classes/ColorUtil.html":{}}}],["18",{"_index":1871,"title":{},"body":{"changelog.html":{}}}],["191970",{"_index":520,"title":{},"body":{"classes/ColorUtil.html":{}}}],["1abc9c",{"_index":281,"title":{},"body":{"classes/ColorUtil.html":{}}}],["1e90ff",{"_index":420,"title":{},"body":{"classes/ColorUtil.html":{}}}],["1f8b4c",{"_index":305,"title":{},"body":{"classes/ColorUtil.html":{}}}],["1fec6bb",{"_index":1875,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":704,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/ImageTool.html":{},"classes/LayerUtils.html":{}}}],["20",{"_index":1341,"title":{},"body":{"classes/ImageLoader.html":{}}}],["200",{"_index":1339,"title":{},"body":{"classes/ImageLoader.html":{}}}],["2000cb7",{"_index":1889,"title":{},"body":{"changelog.html":{}}}],["2022",{"_index":1869,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["206694",{"_index":307,"title":{},"body":{"classes/ColorUtil.html":{}}}],["20b2aa",{"_index":482,"title":{},"body":{"classes/ColorUtil.html":{}}}],["21",{"_index":1939,"title":{},"body":{"changelog.html":{}}}],["228b22",{"_index":426,"title":{},"body":{"classes/ColorUtil.html":{}}}],["23272a",{"_index":335,"title":{},"body":{"classes/ColorUtil.html":{}}}],["24",{"_index":2145,"title":{},"body":{"overview.html":{}}}],["255",{"_index":663,"title":{},"body":{"classes/ColorUtil.html":{}}}],["26",{"_index":1932,"title":{},"body":{"changelog.html":{}}}],["2a11331",{"_index":1930,"title":{},"body":{"changelog.html":{}}}],["2c2f33",{"_index":333,"title":{},"body":{"classes/ColorUtil.html":{}}}],["2c3e50",{"_index":325,"title":{},"body":{"classes/ColorUtil.html":{}}}],["2e8b57",{"_index":580,"title":{},"body":{"classes/ColorUtil.html":{}}}],["2ecc71",{"_index":283,"title":{},"body":{"classes/ColorUtil.html":{}}}],["2f4f4f",{"_index":406,"title":{},"body":{"classes/ColorUtil.html":{}}}],["3",{"_index":644,"title":{},"body":{"classes/ColorUtil.html":{}}}],["30",{"_index":2144,"title":{},"body":{"overview.html":{}}}],["301",{"_index":1334,"title":{},"body":{"classes/ImageLoader.html":{}}}],["302].includes(res.statuscode",{"_index":1335,"title":{},"body":{"classes/ImageLoader.html":{}}}],["32cd32",{"_index":495,"title":{},"body":{"classes/ColorUtil.html":{}}}],["34495e",{"_index":301,"title":{},"body":{"classes/ColorUtil.html":{}}}],["3498db",{"_index":285,"title":{},"body":{"classes/ColorUtil.html":{}}}],["3cb371",{"_index":510,"title":{},"body":{"classes/ColorUtil.html":{}}}],["4",{"_index":650,"title":{},"body":{"classes/ColorUtil.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"classes/ImageTool.html":{}}}],["40e0d0",{"_index":609,"title":{},"body":{"classes/ColorUtil.html":{}}}],["4132053",{"_index":1946,"title":{},"body":{"changelog.html":{}}}],["4169e1",{"_index":572,"title":{},"body":{"classes/ColorUtil.html":{}}}],["4682b4",{"_index":599,"title":{},"body":{"classes/ColorUtil.html":{}}}],["483d8b",{"_index":404,"title":{},"body":{"classes/ColorUtil.html":{}}}],["488fc9f",{"_index":1903,"title":{},"body":{"changelog.html":{}}}],["48d1cc",{"_index":516,"title":{},"body":{"classes/ColorUtil.html":{}}}],["4b0082",{"_index":451,"title":{},"body":{"classes/ColorUtil.html":{}}}],["4d5e94",{"_index":329,"title":{},"body":{"classes/ColorUtil.html":{}}}],["50",{"_index":889,"title":{},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["500",{"_index":2044,"title":{},"body":{"index.html":{}}}],["512",{"_index":2032,"title":{},"body":{"index.html":{}}}],["5156a89",{"_index":1896,"title":{},"body":{"changelog.html":{}}}],["556b2f",{"_index":392,"title":{},"body":{"classes/ColorUtil.html":{}}}],["5a8065f",{"_index":1911,"title":{},"body":{"changelog.html":{}}}],["5af4c28",{"_index":1924,"title":{},"body":{"changelog.html":{}}}],["5f9ea0",{"_index":362,"title":{},"body":{"classes/ColorUtil.html":{}}}],["6",{"_index":652,"title":{},"body":{"classes/ColorUtil.html":{}}}],["6495ed",{"_index":370,"title":{},"body":{"classes/ColorUtil.html":{}}}],["65526ea",{"_index":1949,"title":{},"body":{"changelog.html":{}}}],["663399",{"_index":566,"title":{},"body":{"classes/ColorUtil.html":{}}}],["66cdaa",{"_index":502,"title":{},"body":{"classes/ColorUtil.html":{}}}],["696969",{"_index":417,"title":{},"body":{"classes/ColorUtil.html":{}}}],["6a5acd",{"_index":590,"title":{},"body":{"classes/ColorUtil.html":{}}}],["6b8e23",{"_index":536,"title":{},"body":{"classes/ColorUtil.html":{}}}],["708090",{"_index":592,"title":{},"body":{"classes/ColorUtil.html":{}}}],["71368a",{"_index":309,"title":{},"body":{"classes/ColorUtil.html":{}}}],["71e80d0",{"_index":1936,"title":{},"body":{"changelog.html":{}}}],["7289da",{"_index":327,"title":{},"body":{"classes/ColorUtil.html":{}}}],["778899",{"_index":486,"title":{},"body":{"classes/ColorUtil.html":{}}}],["7825830",{"_index":1888,"title":{},"body":{"changelog.html":{}}}],["783dd58",{"_index":1915,"title":{},"body":{"changelog.html":{}}}],["788adbd",{"_index":1907,"title":{},"body":{"changelog.html":{}}}],["7b68ee",{"_index":512,"title":{},"body":{"classes/ColorUtil.html":{}}}],["7cd61f7",{"_index":1917,"title":{},"body":{"changelog.html":{}}}],["7cfc00",{"_index":461,"title":{},"body":{"classes/ColorUtil.html":{}}}],["7f8c8d",{"_index":321,"title":{},"body":{"classes/ColorUtil.html":{}}}],["7fff00",{"_index":364,"title":{},"body":{"classes/ColorUtil.html":{}}}],["7fffd4",{"_index":343,"title":{},"body":{"classes/ColorUtil.html":{}}}],["8",{"_index":655,"title":{},"body":{"classes/ColorUtil.html":{}}}],["800000",{"_index":500,"title":{},"body":{"classes/ColorUtil.html":{}}}],["800080",{"_index":564,"title":{},"body":{"classes/ColorUtil.html":{}}}],["808000",{"_index":534,"title":{},"body":{"classes/ColorUtil.html":{}}}],["808080",{"_index":438,"title":{},"body":{"classes/ColorUtil.html":{}}}],["819a50c",{"_index":1881,"title":{},"body":{"changelog.html":{}}}],["87ceeb",{"_index":588,"title":{},"body":{"classes/ColorUtil.html":{}}}],["87cefa",{"_index":484,"title":{},"body":{"classes/ColorUtil.html":{}}}],["896a98b",{"_index":1940,"title":{},"body":{"changelog.html":{}}}],["8a2be2",{"_index":356,"title":{},"body":{"classes/ColorUtil.html":{}}}],["8b0000",{"_index":398,"title":{},"body":{"classes/ColorUtil.html":{}}}],["8b008b",{"_index":390,"title":{},"body":{"classes/ColorUtil.html":{}}}],["8b4513",{"_index":574,"title":{},"body":{"classes/ColorUtil.html":{}}}],["8b4f10b",{"_index":1884,"title":{},"body":{"changelog.html":{}}}],["8fbc8f",{"_index":402,"title":{},"body":{"classes/ColorUtil.html":{}}}],["90ee90",{"_index":475,"title":{},"body":{"classes/ColorUtil.html":{}}}],["9370db",{"_index":508,"title":{},"body":{"classes/ColorUtil.html":{}}}],["93a3269",{"_index":1913,"title":{},"body":{"changelog.html":{}}}],["9400d3",{"_index":411,"title":{},"body":{"classes/ColorUtil.html":{}}}],["95a5a6",{"_index":299,"title":{},"body":{"classes/ColorUtil.html":{}}}],["979c9f",{"_index":319,"title":{},"body":{"classes/ColorUtil.html":{}}}],["98fb98",{"_index":546,"title":{},"body":{"classes/ColorUtil.html":{}}}],["992d22",{"_index":317,"title":{},"body":{"classes/ColorUtil.html":{}}}],["9932cc",{"_index":396,"title":{},"body":{"classes/ColorUtil.html":{}}}],["99aab5",{"_index":331,"title":{},"body":{"classes/ColorUtil.html":{}}}],["9acd32",{"_index":619,"title":{},"body":{"classes/ColorUtil.html":{}}}],["9b18a82",{"_index":1902,"title":{},"body":{"changelog.html":{}}}],["9b3316b",{"_index":1914,"title":{},"body":{"changelog.html":{}}}],["9b59b6",{"_index":289,"title":{},"body":{"classes/ColorUtil.html":{}}}],["_data",{"_index":1196,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["a.position",{"_index":792,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["a0522d",{"_index":584,"title":{},"body":{"classes/ColorUtil.html":{}}}],["a1c559a",{"_index":1901,"title":{},"body":{"changelog.html":{}}}],["a209619",{"_index":1926,"title":{},"body":{"changelog.html":{}}}],["a52a2a",{"_index":358,"title":{},"body":{"classes/ColorUtil.html":{}}}],["a7584e9",{"_index":1921,"title":{},"body":{"changelog.html":{}}}],["a7a69c3",{"_index":1933,"title":{},"body":{"changelog.html":{}}}],["a84300",{"_index":315,"title":{},"body":{"classes/ColorUtil.html":{}}}],["a9a9a9",{"_index":383,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ab",{"_index":1360,"title":{},"body":{"classes/ImageLoader.html":{}}}],["ab07a24",{"_index":1927,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":2109,"title":{},"body":{"license.html":{}}}],["accessors",{"_index":725,"title":{},"body":{"classes/ConvolutionTool.html":{},"classes/Illustrator.html":{},"classes/IllustratorColor.html":{},"classes/IllustratorImage.html":{},"classes/Layer.html":{},"classes/PixelsTool.html":{}}}],["action",{"_index":2135,"title":{},"body":{"license.html":{}}}],["ad1457",{"_index":311,"title":{},"body":{"classes/ColorUtil.html":{}}}],["add",{"_index":252,"title":{},"body":{"classes/ColorSwatches.html":{},"changelog.html":{},"index.html":{}}}],["add(data",{"_index":218,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["add8e6",{"_index":465,"title":{},"body":{"classes/ColorUtil.html":{}}}],["adddata",{"_index":798,"title":{},"body":{"classes/DataSource.html":{}}}],["adddata(data",{"_index":804,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["addframe",{"_index":1127,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["addframe(frames",{"_index":1054,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["addframe(layer",{"_index":971,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["addframes",{"_index":1128,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["addframes(layers",{"_index":980,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["addpoint",{"_index":125,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["adff2f",{"_index":442,"title":{},"body":{"classes/ColorUtil.html":{}}}],["afd8532",{"_index":1942,"title":{},"body":{"changelog.html":{}}}],["afeeee",{"_index":548,"title":{},"body":{"classes/ColorUtil.html":{}}}],["algorithm",{"_index":1656,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["aliases",{"_index":2157,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aliceblue",{"_index":336,"title":{},"body":{"classes/ColorUtil.html":{}}}],["alignment",{"_index":1782,"title":{},"body":{"classes/TextTool.html":{}}}],["alive",{"_index":2075,"title":{},"body":{"index.html":{}}}],["alphabetic",{"_index":1784,"title":{},"body":{"classes/TextTool.html":{}}}],["alphafac",{"_index":720,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["already",{"_index":749,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["always",{"_index":1978,"title":{},"body":{"contributing.html":{}}}],["amount",{"_index":262,"title":{},"body":{"classes/ColorSwatches.html":{},"classes/FilterTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{}}}],["and/or",{"_index":2100,"title":{},"body":{"license.html":{}}}],["angle",{"_index":927,"title":{},"body":{"classes/FilterTool.html":{},"classes/TransformTool.html":{}}}],["angle}deg",{"_index":952,"title":{},"body":{"classes/FilterTool.html":{}}}],["animation",{"_index":1015,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"changelog.html":{},"index.html":{}}}],["animation.createanimation",{"_index":2048,"title":{},"body":{"index.html":{}}}],["animation.setrepeat(0).addframes(layers",{"_index":2047,"title":{},"body":{"index.html":{}}}],["animation/illustratoranimation",{"_index":1078,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["antiquewhite",{"_index":338,"title":{},"body":{"classes/ColorUtil.html":{}}}],["api",{"_index":830,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["apis",{"_index":1983,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["applyfilter",{"_index":900,"title":{},"body":{"classes/FilterTool.html":{}}}],["applyfilter(filters",{"_index":911,"title":{},"body":{"classes/FilterTool.html":{}}}],["applysharpness",{"_index":1732,"title":{},"body":{"classes/SharpenTool.html":{}}}],["applysharpness(amount",{"_index":1733,"title":{},"body":{"classes/SharpenTool.html":{}}}],["applytool",{"_index":1410,"title":{},"body":{"classes/Layer.html":{}}}],["applytool(tool",{"_index":1432,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["aqua",{"_index":340,"title":{},"body":{"classes/ColorUtil.html":{}}}],["aquamarine",{"_index":342,"title":{},"body":{"classes/ColorUtil.html":{}}}],["arc",{"_index":1614,"title":{},"body":{"classes/LineTool.html":{}}}],["arc(options",{"_index":44,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["arcto",{"_index":1615,"title":{},"body":{"classes/LineTool.html":{}}}],["arcto(options",{"_index":52,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["arctopoint",{"_index":1,"title":{"interfaces/ArcToPoint.html":{}},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["arg",{"_index":190,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["args",{"_index":974,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/ImageTool.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["args.length",{"_index":1400,"title":{},"body":{"classes/ImageTool.html":{}}}],["arguments",{"_index":1398,"title":{},"body":{"classes/ImageTool.html":{}}}],["arguments.length",{"_index":972,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["arising",{"_index":2139,"title":{},"body":{"license.html":{}}}],["array",{"_index":693,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/DataSource.html":{},"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/TextDataSource.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["array(4).fill(\"0",{"_index":640,"title":{},"body":{"classes/ColorUtil.html":{}}}],["array.isarray(data",{"_index":831,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["array.isarray(filters",{"_index":936,"title":{},"body":{"classes/FilterTool.html":{}}}],["array.isarray(this.#frames",{"_index":1055,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["arraybuffer",{"_index":1304,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/typealiases.html":{}}}],["assertion",{"_index":1052,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/ImageTool.html":{}}}],["associated",{"_index":2088,"title":{},"body":{"license.html":{}}}],["async",{"_index":1012,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{}}}],["author",{"_index":2155,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":2128,"title":{},"body":{"license.html":{}}}],["autoclear",{"_index":72,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{}}}],["avif",{"_index":1084,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["avifconfig",{"_index":1076,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["await",{"_index":1019,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"index.html":{}}}],["awaitable",{"_index":1814,"title":{},"body":{"classes/ToolBox.html":{},"miscellaneous/typealiases.html":{}}}],["azure",{"_index":344,"title":{},"body":{"classes/ColorUtil.html":{}}}],["b",{"_index":790,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["b.position",{"_index":791,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["b0c4de",{"_index":489,"title":{},"body":{"classes/ColorUtil.html":{}}}],["b0e0e6",{"_index":562,"title":{},"body":{"classes/ColorUtil.html":{}}}],["b22222",{"_index":422,"title":{},"body":{"classes/ColorUtil.html":{}}}],["b8860b",{"_index":381,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ba55d3",{"_index":506,"title":{},"body":{"classes/ColorUtil.html":{}}}],["background",{"_index":1089,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"changelog.html":{},"index.html":{}}}],["backgroundcolortool",{"_index":68,"title":{"classes/BackgroundColorTool.html":{}},"body":{"classes/BackgroundColorTool.html":{}}}],["backgroundlayer",{"_index":1058,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["base",{"_index":1892,"title":{},"body":{"changelog.html":{}}}],["base/baseshapetool",{"_index":19,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["base/toolbox",{"_index":117,"title":{},"body":{"classes/BackgroundColorTool.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/ShadowTool.html":{},"classes/TextTool.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["baseshapetool",{"_index":18,"title":{"classes/BaseShapeTool.html":{}},"body":{"interfaces/ArcToPoint.html":{},"classes/BaseShapeTool.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["baseshapetool:100",{"_index":879,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:108",{"_index":874,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:116",{"_index":867,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:14",{"_index":878,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:22",{"_index":876,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:30",{"_index":873,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:38",{"_index":871,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:46",{"_index":875,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:54",{"_index":877,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:6",{"_index":872,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:62",{"_index":866,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:70",{"_index":870,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:78",{"_index":869,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["baseshapetool:86",{"_index":868,"title":{},"body":{"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["bc8f8f",{"_index":570,"title":{},"body":{"classes/ColorUtil.html":{}}}],["bcc0c0",{"_index":323,"title":{},"body":{"classes/ColorUtil.html":{}}}],["bdb76b",{"_index":388,"title":{},"body":{"classes/ColorUtil.html":{}}}],["before",{"_index":1967,"title":{},"body":{"contributing.html":{}}}],["beginner",{"_index":2016,"title":{},"body":{"index.html":{}}}],["behind",{"_index":2063,"title":{},"body":{"index.html":{}}}],["beige",{"_index":346,"title":{},"body":{"classes/ColorUtil.html":{}}}],["bevel",{"_index":159,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["bgtool",{"_index":2034,"title":{},"body":{"index.html":{}}}],["bgtool.fill(0",{"_index":2038,"title":{},"body":{"index.html":{}}}],["bgtool.render",{"_index":2041,"title":{},"body":{"index.html":{}}}],["bgtool.setfillcolor(color",{"_index":2037,"title":{},"body":{"index.html":{}}}],["bisque",{"_index":348,"title":{},"body":{"classes/ColorUtil.html":{}}}],["black",{"_index":350,"title":{},"body":{"classes/ColorUtil.html":{}}}],["blanchedalmond",{"_index":351,"title":{},"body":{"classes/ColorUtil.html":{}}}],["blue",{"_index":353,"title":{},"body":{"classes/ColorUtil.html":{}}}],["blueviolet",{"_index":355,"title":{},"body":{"classes/ColorUtil.html":{}}}],["blur",{"_index":942,"title":{},"body":{"classes/FilterTool.html":{},"index.html":{}}}],["body",{"_index":1314,"title":{},"body":{"classes/ImageLoader.html":{}}}],["body.push(chunk",{"_index":1317,"title":{},"body":{"classes/ImageLoader.html":{}}}],["boolean",{"_index":27,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/TextDataSource.html":{}}}],["bottom",{"_index":1105,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/TextTool.html":{}}}],["break",{"_index":649,"title":{},"body":{"classes/ColorUtil.html":{}}}],["brightness",{"_index":901,"title":{},"body":{"classes/FilterTool.html":{},"classes/PixelsTool.html":{},"index.html":{}}}],["brightness(amount",{"_index":915,"title":{},"body":{"classes/FilterTool.html":{}}}],["brooooooklyn",{"_index":2061,"title":{},"body":{"index.html":{}}}],["brown",{"_index":357,"title":{},"body":{"classes/ColorUtil.html":{}}}],["buffer",{"_index":1194,"title":{},"body":{"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"interfaces/RawImageData.html":{},"classes/TextTool.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["buffer.isbuffer(source",{"_index":1346,"title":{},"body":{"classes/ImageLoader.html":{}}}],["bufferonly",{"_index":1286,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/functions.html":{}}}],["bug",{"_index":1877,"title":{},"body":{"changelog.html":{}}}],["bugs",{"_index":2151,"title":{},"body":{"properties.html":{}}}],["build",{"_index":2012,"title":{},"body":{"index.html":{}}}],["built",{"_index":2059,"title":{},"body":{"index.html":{}}}],["burlywood",{"_index":359,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c",{"_index":637,"title":{},"body":{"classes/ColorUtil.html":{},"license.html":{}}}],["c.length",{"_index":642,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c.map((char",{"_index":658,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c.pop",{"_index":666,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c0c0c0",{"_index":586,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c1a2b88",{"_index":1944,"title":{},"body":{"changelog.html":{}}}],["c24ef1d",{"_index":1916,"title":{},"body":{"changelog.html":{}}}],["c27c0e",{"_index":313,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c71585",{"_index":518,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c8be6f1",{"_index":1937,"title":{},"body":{"changelog.html":{}}}],["c[0",{"_index":645,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c[1",{"_index":646,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c[2",{"_index":647,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c[3",{"_index":651,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c[4",{"_index":653,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c[5",{"_index":654,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c[6",{"_index":656,"title":{},"body":{"classes/ColorUtil.html":{}}}],["c[7",{"_index":657,"title":{},"body":{"classes/ColorUtil.html":{}}}],["cache",{"_index":1529,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["cadetblue",{"_index":361,"title":{},"body":{"classes/ColorUtil.html":{}}}],["camelcase",{"_index":1979,"title":{},"body":{"contributing.html":{}}}],["canvacord",{"_index":2054,"title":{},"body":{"index.html":{}}}],["canvas",{"_index":1041,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"changelog.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["canvas).encode(\"png",{"_index":1352,"title":{},"body":{"classes/ImageLoader.html":{}}}],["canvas.getcontext(\"2d",{"_index":1094,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["canvasarray",{"_index":1035,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["canvasarray.map((m",{"_index":1044,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["canvasgradient",{"_index":106,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{},"classes/TextTool.html":{}}}],["canvaslinecap",{"_index":151,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["canvaspattern",{"_index":105,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{},"classes/TextTool.html":{}}}],["case",{"_index":643,"title":{},"body":{"classes/ColorUtil.html":{}}}],["cd5c5c",{"_index":449,"title":{},"body":{"classes/ColorUtil.html":{}}}],["cd853f",{"_index":556,"title":{},"body":{"classes/ColorUtil.html":{}}}],["center",{"_index":1776,"title":{},"body":{"classes/TextTool.html":{}}}],["cfcdd83",{"_index":1922,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":1867,"title":{"changelog.html":{}},"body":{}}],["changelogs",{"_index":1989,"title":{},"body":{"contributing.html":{}}}],["charge",{"_index":2084,"title":{},"body":{"license.html":{}}}],["chartreuse",{"_index":363,"title":{},"body":{"classes/ColorUtil.html":{}}}],["check",{"_index":1904,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["chocolate",{"_index":365,"title":{},"body":{"classes/ColorUtil.html":{}}}],["chromasubsampling",{"_index":1208,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{},"miscellaneous/variables.html":{}}}],["chunk",{"_index":1316,"title":{},"body":{"classes/ImageLoader.html":{}}}],["circle",{"_index":1387,"title":{},"body":{"classes/ImageTool.html":{},"changelog.html":{}}}],["circular",{"_index":894,"title":{},"body":{"classes/EraserTool.html":{}}}],["circular(options",{"_index":887,"title":{},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["claim",{"_index":2131,"title":{},"body":{"license.html":{}}}],["class",{"_index":36,"title":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"classes/ConvolutionTool.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"classes/LayerTools.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{}},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"contributing.html":{}}}],["classes",{"_index":69,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"classes/ConvolutionTool.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"classes/LayerTools.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{},"overview.html":{}}}],["clear",{"_index":236,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["clearcache",{"_index":1532,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"changelog.html":{}}}],["clearframes",{"_index":969,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["cleartransformer",{"_index":1669,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["clip",{"_index":126,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["clip(options",{"_index":136,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["clone",{"_index":799,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["close",{"_index":1887,"title":{},"body":{"changelog.html":{}}}],["cmyk",{"_index":1163,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["cmyk(${number",{"_index":212,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["code",{"_index":1001,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/ImageLoader.html":{},"contributing.html":{},"index.html":{}}}],["color",{"_index":108,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/EllipseTool.html":{},"classes/FilterTool.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/TextTool.html":{},"changelog.html":{},"index.html":{}}}],["color.indexof(pattern",{"_index":1172,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["color.split(\",\").map(m",{"_index":1176,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["color.startswith(\"rgb",{"_index":1173,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["color.startswith(\"rgba",{"_index":1174,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["colorconfig",{"_index":203,"title":{"interfaces/ColorConfig.html":{}},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["colors",{"_index":270,"title":{"classes/Colors.html":{}},"body":{"classes/ColorUtil.html":{},"classes/Colors.html":{},"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"changelog.html":{},"index.html":{}}}],["colors(this",{"_index":1063,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["colors/colors",{"_index":1079,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["colorspace",{"_index":1217,"title":{},"body":{"classes/IllustratorImage.html":{},"classes/LayerUtils.html":{},"interfaces/RawImageData.html":{}}}],["colorswatches",{"_index":215,"title":{"classes/ColorSwatches.html":{}},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/Colors.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["colorutil",{"_index":267,"title":{"classes/ColorUtil.html":{}},"body":{"classes/ColorUtil.html":{},"classes/Colors.html":{},"changelog.html":{}}}],["colorutil.colors",{"_index":672,"title":{},"body":{"classes/ColorUtil.html":{}}}],["colorutil.colors[color",{"_index":674,"title":{},"body":{"classes/ColorUtil.html":{}}}],["colorutil.ishex(hex",{"_index":639,"title":{},"body":{"classes/ColorUtil.html":{}}}],["colorutil.randomhex",{"_index":673,"title":{},"body":{"classes/ColorUtil.html":{}}}],["commit",{"_index":1910,"title":{},"body":{"changelog.html":{}}}],["commitlint",{"_index":1908,"title":{},"body":{"changelog.html":{}}}],["commits",{"_index":1993,"title":{},"body":{"contributing.html":{}}}],["compression",{"_index":2022,"title":{},"body":{"index.html":{}}}],["compressiontype",{"_index":1209,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{},"miscellaneous/variables.html":{}}}],["compressjpeg",{"_index":1240,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["compressjpeg(src",{"_index":1248,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["compressjpegsync",{"_index":1241,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["compressjpegsync(src",{"_index":1251,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["compresspnglossless",{"_index":1242,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["compresspnglossless(src",{"_index":1253,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["compresspnglosslesssync",{"_index":1243,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["compresspnglosslesssync(src",{"_index":1256,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["conditions",{"_index":2108,"title":{},"body":{"license.html":{}}}],["config",{"_index":732,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/DataSource.html":{},"classes/Illustrator.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"interfaces/TextDataSource.html":{},"index.html":{}}}],["config.avifconfig",{"_index":1123,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["config.encoding",{"_index":1120,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["config.quality",{"_index":1125,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["connection",{"_index":2140,"title":{},"body":{"license.html":{}}}],["console.log(image.width",{"_index":1289,"title":{},"body":{"classes/ImageLoader.html":{}}}],["const",{"_index":227,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"classes/DataSource.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerWrapper.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"interfaces/TextDataSource.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"index.html":{}}}],["constructor",{"_index":631,"title":{},"body":{"classes/ColorUtil.html":{},"classes/Colors.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"classes/IllustratorImage.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"classes/ToolBox.html":{}}}],["constructor(_data",{"_index":1193,"title":{},"body":{"classes/IllustratorImage.html":{}}}],["constructor(ctx",{"_index":1578,"title":{},"body":{"classes/LayerUtils.html":{}}}],["constructor(illustrator",{"_index":679,"title":{},"body":{"classes/Colors.html":{},"classes/IllustratorAnimation.html":{},"classes/LayerManager.html":{}}}],["constructor(layer",{"_index":1557,"title":{},"body":{"classes/LayerTools.html":{},"classes/ToolBox.html":{}}}],["constructor(manager",{"_index":1422,"title":{},"body":{"classes/Layer.html":{}}}],["constructor(private",{"_index":1226,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["constructor(public",{"_index":685,"title":{},"body":{"classes/Colors.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerWrapper.html":{},"classes/ToolBox.html":{}}}],["constructor(swatches",{"_index":1153,"title":{},"body":{"classes/IllustratorColor.html":{}}}],["constructor(width",{"_index":1059,"title":{},"body":{"classes/Illustrator.html":{}}}],["consumestream",{"_index":1996,"title":{},"body":{"miscellaneous/functions.html":{}}}],["consumestream(source",{"_index":1345,"title":{},"body":{"classes/ImageLoader.html":{}}}],["consumestream(stream",{"_index":1311,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/functions.html":{}}}],["containing",{"_index":1974,"title":{},"body":{"contributing.html":{}}}],["context",{"_index":1420,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"changelog.html":{}}}],["context.from",{"_index":1666,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["context.height",{"_index":1636,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["context.to",{"_index":1634,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["context.width",{"_index":1635,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["continue",{"_index":1110,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["contract",{"_index":2136,"title":{},"body":{"license.html":{}}}],["contrast",{"_index":902,"title":{},"body":{"classes/FilterTool.html":{},"classes/PixelsTool.html":{}}}],["contrast(amount",{"_index":917,"title":{},"body":{"classes/FilterTool.html":{}}}],["contributing",{"_index":1952,"title":{"contributing.html":{}},"body":{"contributing.html":{}}}],["contribution",{"_index":1953,"title":{},"body":{"contributing.html":{}}}],["controlpointx",{"_index":29,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["controlpointy",{"_index":30,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["conventional",{"_index":1992,"title":{},"body":{"contributing.html":{}}}],["conversion",{"_index":2021,"title":{},"body":{"index.html":{}}}],["convolute",{"_index":724,"title":{},"body":{"classes/ConvolutionTool.html":{},"classes/SharpenTool.html":{}}}],["convolute(options",{"_index":696,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/SharpenTool.html":{}}}],["convolution",{"_index":1919,"title":{},"body":{"changelog.html":{}}}],["convolutionfilter",{"_index":1736,"title":{},"body":{"classes/SharpenTool.html":{},"changelog.html":{}}}],["convolutionoptions",{"_index":686,"title":{"interfaces/ConvolutionOptions.html":{}},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/SharpenTool.html":{}}}],["convolutiontool",{"_index":695,"title":{"classes/ConvolutionTool.html":{}},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/SharpenTool.html":{}}}],["convolutiontool:13",{"_index":1735,"title":{},"body":{"classes/SharpenTool.html":{}}}],["coordinates",{"_index":1407,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["copies",{"_index":2102,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1441,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"license.html":{}}}],["copyright",{"_index":2078,"title":{},"body":{"license.html":{}}}],["coral",{"_index":367,"title":{},"body":{"classes/ColorUtil.html":{}}}],["cornflowerblue",{"_index":369,"title":{},"body":{"classes/ColorUtil.html":{}}}],["cornsilk",{"_index":371,"title":{},"body":{"classes/ColorUtil.html":{}}}],["count",{"_index":238,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["counterclockwise",{"_index":26,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["create",{"_index":2030,"title":{},"body":{"index.html":{}}}],["createanimation",{"_index":1013,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["createcanvas",{"_index":1077,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["createcanvas(this.width",{"_index":1092,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["createconicgradient",{"_index":1569,"title":{},"body":{"classes/LayerUtils.html":{}}}],["createconicgradient(startangle",{"_index":1580,"title":{},"body":{"classes/LayerUtils.html":{}}}],["created",{"_index":1672,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["createimage",{"_index":1281,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/functions.html":{}}}],["createimage(await",{"_index":1344,"title":{},"body":{"classes/ImageLoader.html":{}}}],["createimage(buffer.from(ab",{"_index":1373,"title":{},"body":{"classes/ImageLoader.html":{}}}],["createimage(buffer.from(source",{"_index":1348,"title":{},"body":{"classes/ImageLoader.html":{}}}],["createimage(data",{"_index":1282,"title":{},"body":{"classes/ImageLoader.html":{}}}],["createimage(res",{"_index":1375,"title":{},"body":{"classes/ImageLoader.html":{}}}],["createimage(source",{"_index":1307,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/functions.html":{}}}],["createimage(source.src",{"_index":1349,"title":{},"body":{"classes/ImageLoader.html":{}}}],["createlayer",{"_index":1088,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/LayerManager.html":{}}}],["createlayer(options",{"_index":744,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["createlayeroptions",{"_index":730,"title":{"interfaces/CreateLayerOptions.html":{}},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["createlineargradient",{"_index":1570,"title":{},"body":{"classes/LayerUtils.html":{}}}],["createlineargradient(x0",{"_index":1582,"title":{},"body":{"classes/LayerUtils.html":{}}}],["createpattern",{"_index":1571,"title":{},"body":{"classes/LayerUtils.html":{}}}],["createpattern(image",{"_index":1586,"title":{},"body":{"classes/LayerUtils.html":{}}}],["createradialgradient",{"_index":1572,"title":{},"body":{"classes/LayerUtils.html":{}}}],["createradialgradient(x0",{"_index":1589,"title":{},"body":{"classes/LayerUtils.html":{}}}],["createrawtransformer",{"_index":1673,"title":{},"body":{"classes/PixelsTool.html":{}}}],["createrawtransformer(src",{"_index":1629,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["creates",{"_index":1284,"title":{},"body":{"classes/ImageLoader.html":{}}}],["createtransformation",{"_index":1411,"title":{},"body":{"classes/Layer.html":{}}}],["createtransformation(data",{"_index":1435,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["createtransformer",{"_index":1674,"title":{},"body":{"classes/PixelsTool.html":{}}}],["createtransformer(context",{"_index":1632,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["creating",{"_index":2029,"title":{},"body":{"index.html":{}}}],["crimson",{"_index":373,"title":{},"body":{"classes/ColorUtil.html":{}}}],["crop",{"_index":1675,"title":{},"body":{"classes/PixelsTool.html":{},"index.html":{}}}],["crop(context",{"_index":1641,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["ctx",{"_index":698,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/DataSource.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"interfaces/ImageDataSource.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/TextDataSource.html":{},"classes/ToolBox.html":{}}}],["ctx.arc",{"_index":45,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["ctx.arc(options.x",{"_index":888,"title":{},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["ctx.arcto",{"_index":1708,"title":{},"body":{"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["ctx.arcto(options.x",{"_index":1709,"title":{},"body":{"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["ctx.arcto(options.x1",{"_index":53,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["ctx.beginpath",{"_index":182,"title":{},"body":{"classes/BaseShapeTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["ctx.beziercurveto",{"_index":61,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["ctx.clearrect(0",{"_index":891,"title":{},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["ctx.clearrect(options.x",{"_index":884,"title":{},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["ctx.clip",{"_index":202,"title":{},"body":{"classes/BaseShapeTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["ctx.closepath",{"_index":183,"title":{},"body":{"classes/BaseShapeTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["ctx.direction",{"_index":1799,"title":{},"body":{"classes/TextTool.html":{}}}],["ctx.drawimage",{"_index":1099,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["ctx.drawimage(data",{"_index":1665,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["ctx.drawimage(image",{"_index":1405,"title":{},"body":{"classes/ImageTool.html":{}}}],["ctx.ellipse",{"_index":857,"title":{},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{}}}],["ctx.fill",{"_index":189,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["ctx.fillrect(x",{"_index":119,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["ctx.fillstyle",{"_index":118,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/TextTool.html":{}}}],["ctx.filltext(...makeargs((el",{"_index":1804,"title":{},"body":{"classes/TextTool.html":{}}}],["ctx.filter",{"_index":938,"title":{},"body":{"classes/FilterTool.html":{}}}],["ctx.font",{"_index":1802,"title":{},"body":{"classes/TextTool.html":{}}}],["ctx.linecap",{"_index":178,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["ctx.linedashoffset",{"_index":179,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["ctx.linejoin",{"_index":180,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["ctx.lineto(from",{"_index":42,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["ctx.linewidth",{"_index":122,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{}}}],["ctx.miterlimit",{"_index":181,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["ctx.moveto(options.x",{"_index":1707,"title":{},"body":{"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["ctx.moveto(x",{"_index":184,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["ctx.quadraticcurveto(options.controlpointx",{"_index":58,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["ctx.rect(options.x",{"_index":1705,"title":{},"body":{"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["ctx.resettransform",{"_index":1840,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["ctx.restore",{"_index":1403,"title":{},"body":{"classes/ImageTool.html":{},"classes/ToolBox.html":{}}}],["ctx.rotate(angle",{"_index":1851,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["ctx.save",{"_index":1399,"title":{},"body":{"classes/ImageTool.html":{},"classes/ToolBox.html":{}}}],["ctx.scale(x",{"_index":1853,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["ctx.setlinedash(segments",{"_index":201,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["ctx.settransform",{"_index":1838,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["ctx.shadowblur",{"_index":1727,"title":{},"body":{"classes/ShadowTool.html":{}}}],["ctx.shadowcolor",{"_index":1726,"title":{},"body":{"classes/ShadowTool.html":{}}}],["ctx.shadowoffsetx",{"_index":1728,"title":{},"body":{"classes/ShadowTool.html":{}}}],["ctx.shadowoffsety",{"_index":1729,"title":{},"body":{"classes/ShadowTool.html":{}}}],["ctx.stroke",{"_index":200,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["ctx.stroke(options.path",{"_index":199,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["ctx.strokerect(x",{"_index":120,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["ctx.strokestyle",{"_index":121,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/TextTool.html":{}}}],["ctx.stroketext(...makeargs((el",{"_index":1806,"title":{},"body":{"classes/TextTool.html":{}}}],["ctx.textalign",{"_index":1800,"title":{},"body":{"classes/TextTool.html":{}}}],["ctx.textbaseline",{"_index":1801,"title":{},"body":{"classes/TextTool.html":{}}}],["ctx.transform",{"_index":1832,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["ctx.translate(x",{"_index":1828,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["cubicbeziercurve",{"_index":1616,"title":{},"body":{"classes/LineTool.html":{}}}],["cubicbeziercurve(options",{"_index":60,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["cubicbeziercurveoptions",{"_index":31,"title":{"interfaces/CubicBezierCurveOptions.html":{}},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["cyan",{"_index":375,"title":{},"body":{"classes/ColorUtil.html":{}}}],["d2691e",{"_index":366,"title":{},"body":{"classes/ColorUtil.html":{}}}],["d2b48c",{"_index":601,"title":{},"body":{"classes/ColorUtil.html":{}}}],["d3d3d3",{"_index":473,"title":{},"body":{"classes/ColorUtil.html":{}}}],["d4c5685",{"_index":1950,"title":{},"body":{"changelog.html":{}}}],["d8bfd8",{"_index":605,"title":{},"body":{"classes/ColorUtil.html":{}}}],["d96aa88",{"_index":1929,"title":{},"body":{"changelog.html":{}}}],["da",{"_index":633,"title":{},"body":{"classes/ColorUtil.html":{}}}],["da70d6",{"_index":542,"title":{},"body":{"classes/ColorUtil.html":{}}}],["daa520",{"_index":434,"title":{},"body":{"classes/ColorUtil.html":{}}}],["damages",{"_index":2132,"title":{},"body":{"license.html":{}}}],["darkblue",{"_index":376,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkcyan",{"_index":378,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkgoldenrod",{"_index":380,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkgray",{"_index":382,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkgreen",{"_index":384,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkgrey",{"_index":386,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkkhaki",{"_index":387,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkmagenta",{"_index":389,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkolivegreen",{"_index":391,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkorange",{"_index":393,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkorchid",{"_index":395,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkred",{"_index":397,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darksalmon",{"_index":399,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkseagreen",{"_index":401,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkslateblue",{"_index":403,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkslategray",{"_index":405,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkslategrey",{"_index":407,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkturquoise",{"_index":408,"title":{},"body":{"classes/ColorUtil.html":{}}}],["darkviolet",{"_index":410,"title":{},"body":{"classes/ColorUtil.html":{}}}],["data",{"_index":216,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/DataSource.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"classes/LayerUtils.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"interfaces/TextDataSource.html":{},"changelog.html":{}}}],["data.color",{"_index":223,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["data.coordinates",{"_index":1483,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["data.force",{"_index":225,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["data.height",{"_index":1234,"title":{},"body":{"classes/IllustratorImage.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/RawImageData.html":{}}}],["data.name",{"_index":219,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["data.width",{"_index":1233,"title":{},"body":{"classes/IllustratorImage.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/RawImageData.html":{}}}],["data[name",{"_index":251,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["datasource",{"_index":796,"title":{"classes/DataSource.html":{}},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{},"changelog.html":{}}}],["db7093",{"_index":550,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc143c",{"_index":374,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_aqua",{"_index":280,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_blue",{"_index":284,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_blurple",{"_index":326,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_dark_aqua",{"_index":302,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_dark_blue",{"_index":306,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_dark_blurple",{"_index":328,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_dark_but_not_black",{"_index":332,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_dark_gold",{"_index":312,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_dark_green",{"_index":304,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_dark_grey",{"_index":318,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_dark_navy",{"_index":324,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_dark_orange",{"_index":314,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_dark_purple",{"_index":308,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_dark_red",{"_index":316,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_dark_vivid_pink",{"_index":310,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_darker_grey",{"_index":320,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_default",{"_index":276,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_gold",{"_index":292,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_green",{"_index":282,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_grey",{"_index":298,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_greyple",{"_index":330,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_light_grey",{"_index":322,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_luminous_vivid_pink",{"_index":290,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_navy",{"_index":300,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_not_quite_black",{"_index":334,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_orange",{"_index":294,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_purple",{"_index":288,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_red",{"_index":296,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_white",{"_index":278,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dc_yellow",{"_index":286,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dcdcdc",{"_index":430,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dda0dd",{"_index":560,"title":{},"body":{"classes/ColorUtil.html":{}}}],["de626b5",{"_index":1918,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":2089,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2141,"title":{},"body":{"license.html":{}}}],["deb887",{"_index":360,"title":{},"body":{"classes/ColorUtil.html":{}}}],["deeppink",{"_index":412,"title":{},"body":{"classes/ColorUtil.html":{}}}],["deepskyblue",{"_index":414,"title":{},"body":{"classes/ColorUtil.html":{}}}],["default",{"_index":85,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"classes/ConvolutionTool.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/Illustrator.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":89,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"classes/ConvolutionTool.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"classes/LayerTools.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{}}}],["delay",{"_index":997,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["delete",{"_index":1554,"title":{},"body":{"classes/LayerTools.html":{}}}],["delete(name",{"_index":1534,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["deletelayer",{"_index":1503,"title":{},"body":{"classes/LayerManager.html":{}}}],["deletelayer(layer",{"_index":763,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["deployment",{"_index":1968,"title":{},"body":{"contributing.html":{}}}],["description",{"_index":1261,"title":{},"body":{"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"properties.html":{}}}],["devandromeda",{"_index":2079,"title":{},"body":{"license.html":{},"properties.html":{}}}],["dh",{"_index":1385,"title":{},"body":{"classes/ImageTool.html":{}}}],["dh].every((x",{"_index":1404,"title":{},"body":{"classes/ImageTool.html":{}}}],["dimgray",{"_index":416,"title":{},"body":{"classes/ColorUtil.html":{}}}],["dimgrey",{"_index":418,"title":{},"body":{"classes/ColorUtil.html":{}}}],["direction",{"_index":1770,"title":{},"body":{"classes/TextTool.html":{}}}],["disable",{"_index":1046,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/ImageTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["discord",{"_index":2068,"title":{},"body":{"index.html":{}}}],["disposalcode",{"_index":964,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["distribute",{"_index":2098,"title":{},"body":{"license.html":{}}}],["divider",{"_index":1595,"title":{},"body":{"classes/LayerUtils.html":{}}}],["document",{"_index":1982,"title":{},"body":{"contributing.html":{}}}],["documentation",{"_index":2025,"title":{},"body":{"index.html":{},"license.html":{}}}],["dodgerblue",{"_index":419,"title":{},"body":{"classes/ColorUtil.html":{}}}],["don't",{"_index":1111,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"contributing.html":{}}}],["done",{"_index":2057,"title":{},"body":{"index.html":{}}}],["draw",{"_index":862,"title":{},"body":{"classes/EllipseTool.html":{},"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/ImageTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["draw(from",{"_index":40,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["draw(image",{"_index":1380,"title":{},"body":{"classes/ImageTool.html":{}}}],["draw(options",{"_index":856,"title":{},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["drawarcoptions",{"_index":21,"title":{"interfaces/DrawArcOptions.html":{}},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["drawcircle",{"_index":863,"title":{},"body":{"classes/EllipseTool.html":{}}}],["drawcircle(options",{"_index":861,"title":{},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{}}}],["drawcircleoptions",{"_index":853,"title":{},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"miscellaneous/typealiases.html":{}}}],["drawellipseoptions",{"_index":848,"title":{"interfaces/DrawEllipseOptions.html":{}},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{}}}],["drawrounded",{"_index":1379,"title":{},"body":{"classes/ImageTool.html":{},"classes/RectangleTool.html":{},"changelog.html":{}}}],["drawrounded(image",{"_index":1390,"title":{},"body":{"classes/ImageTool.html":{}}}],["drawrounded(options",{"_index":1706,"title":{},"body":{"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["drop",{"_index":946,"title":{},"body":{"classes/FilterTool.html":{}}}],["dropshadow",{"_index":903,"title":{},"body":{"classes/FilterTool.html":{}}}],["dropshadow(x",{"_index":919,"title":{},"body":{"classes/FilterTool.html":{}}}],["ds",{"_index":844,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["ds.loaddata(this.data.slice",{"_index":845,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["ds.name",{"_index":836,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["dst",{"_index":718,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["duplicate",{"_index":1412,"title":{},"body":{"classes/Layer.html":{}}}],["duplicate(name",{"_index":1438,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["duplicatelayer",{"_index":1504,"title":{},"body":{"classes/LayerManager.html":{}}}],["duplicatelayer(layer",{"_index":760,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["duration",{"_index":959,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"index.html":{}}}],["dw",{"_index":1384,"title":{},"body":{"classes/ImageTool.html":{}}}],["dx",{"_index":1381,"title":{},"body":{"classes/ImageTool.html":{},"classes/LayerUtils.html":{}}}],["dy",{"_index":1382,"title":{},"body":{"classes/ImageTool.html":{},"classes/LayerUtils.html":{}}}],["e",{"_index":1327,"title":{},"body":{"classes/ImageLoader.html":{}}}],["e0dc795",{"_index":1947,"title":{},"body":{"changelog.html":{}}}],["e0ffff",{"_index":469,"title":{},"body":{"classes/ColorUtil.html":{}}}],["e42a539",{"_index":1893,"title":{},"body":{"changelog.html":{}}}],["e67e22",{"_index":295,"title":{},"body":{"classes/ColorUtil.html":{}}}],["e6e6fa",{"_index":459,"title":{},"body":{"classes/ColorUtil.html":{}}}],["e74c3c",{"_index":297,"title":{},"body":{"classes/ColorUtil.html":{}}}],["e91e63",{"_index":291,"title":{},"body":{"classes/ColorUtil.html":{}}}],["e9967a",{"_index":400,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ee82ee",{"_index":611,"title":{},"body":{"classes/ColorUtil.html":{}}}],["eee8aa",{"_index":544,"title":{},"body":{"classes/ColorUtil.html":{}}}],["eefa81d",{"_index":1905,"title":{},"body":{"changelog.html":{}}}],["efbcb18",{"_index":1874,"title":{},"body":{"changelog.html":{}}}],["eg",{"_index":1975,"title":{},"body":{"contributing.html":{}}}],["el",{"_index":1805,"title":{},"body":{"classes/TextTool.html":{}}}],["ellipse",{"_index":1923,"title":{},"body":{"changelog.html":{}}}],["ellipsetool",{"_index":855,"title":{"classes/EllipseTool.html":{}},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{}}}],["encoder",{"_index":1016,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoder.addframe(frame.ctx.getimagedata(0",{"_index":1030,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoder.createreadstream",{"_index":1022,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoder.finish",{"_index":1033,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoder.setdelay(frame.duration",{"_index":1029,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoder.setdispose(this.#encoderconfig.dispose",{"_index":1023,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoder.setframerate(this.#encoderconfig.framerate",{"_index":1024,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoder.setquality(this.#encoderconfig.quality",{"_index":1025,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoder.setrepeat(this.#encoderconfig.repeat",{"_index":1026,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoder.settransparent(this.#encoderconfig.transparent",{"_index":1027,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoder.start",{"_index":1028,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoderconfig",{"_index":968,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoderoptions",{"_index":963,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["encoding",{"_index":1082,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["end",{"_index":1777,"title":{},"body":{"classes/TextTool.html":{}}}],["endangle",{"_index":25,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["english",{"_index":1980,"title":{},"body":{"contributing.html":{}}}],["ensuretransformer",{"_index":1670,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["eraser",{"_index":1886,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["eraseroptions",{"_index":880,"title":{"interfaces/EraserOptions.html":{}},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["erasertool",{"_index":882,"title":{"classes/EraserTool.html":{}},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["err",{"_index":1321,"title":{},"body":{"classes/ImageLoader.html":{}}}],["error",{"_index":1224,"title":{},"body":{"classes/IllustratorImage.html":{},"classes/ImageLoader.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"classes/TextTool.html":{},"miscellaneous/variables.html":{}}}],["error(\"cannot",{"_index":1498,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["error(\"frame",{"_index":973,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["error(\"frames",{"_index":982,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["error(\"invalid",{"_index":839,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["error(\"layer",{"_index":746,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["error(\"missing",{"_index":978,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["error(\"not",{"_index":1168,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["error(\"tool",{"_index":1495,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["error(\"transformer",{"_index":1671,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["error(`request",{"_index":1368,"title":{},"body":{"classes/ImageLoader.html":{}}}],["error(`unknown",{"_index":1549,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["error(`unsupported",{"_index":1126,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["eslint",{"_index":1045,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/ImageTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["eslint/no",{"_index":1050,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/ImageTool.html":{}}}],["etc",{"_index":1976,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["evenodd",{"_index":186,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["event",{"_index":2127,"title":{},"body":{"license.html":{}}}],["example",{"_index":1291,"title":{},"body":{"classes/ImageLoader.html":{},"index.html":{}}}],["examples",{"_index":2052,"title":{},"body":{"index.html":{}}}],["exists",{"_index":750,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["expect",{"_index":1223,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"classes/TextTool.html":{},"miscellaneous/variables.html":{}}}],["explain",{"_index":1990,"title":{},"body":{"contributing.html":{}}}],["export",{"_index":20,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"changelog.html":{}}}],["export(config",{"_index":1069,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["exports",{"_index":1625,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"changelog.html":{}}}],["expose",{"_index":1906,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":2118,"title":{},"body":{"license.html":{}}}],["extends",{"_index":38,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ColorUtil.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/IllustratorImage.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["f08080",{"_index":467,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f0e68c",{"_index":455,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f0f8ff",{"_index":337,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f0fff0",{"_index":445,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f0ffff",{"_index":345,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f1c40f",{"_index":293,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f4a460",{"_index":578,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f5deb3",{"_index":613,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f5f5dc",{"_index":347,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f5f5f5",{"_index":616,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f5fffa",{"_index":522,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f8f8ff",{"_index":432,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f]{3}){1,2}|([\\da",{"_index":635,"title":{},"body":{"classes/ColorUtil.html":{}}}],["f]{4}){1,2})$/.test(hex",{"_index":636,"title":{},"body":{"classes/ColorUtil.html":{}}}],["fa",{"_index":634,"title":{},"body":{"classes/ColorUtil.html":{}}}],["fa8072",{"_index":576,"title":{},"body":{"classes/ColorUtil.html":{}}}],["faebd7",{"_index":339,"title":{},"body":{"classes/ColorUtil.html":{}}}],["faf0e6",{"_index":497,"title":{},"body":{"classes/ColorUtil.html":{}}}],["fafad2",{"_index":471,"title":{},"body":{"classes/ColorUtil.html":{}}}],["false",{"_index":87,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{},"miscellaneous/functions.html":{}}}],["fast",{"_index":2013,"title":{},"body":{"index.html":{}}}],["fdf5e6",{"_index":532,"title":{},"body":{"classes/ColorUtil.html":{}}}],["features",{"_index":1872,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["fetch",{"_index":1359,"title":{},"body":{"classes/ImageLoader.html":{}}}],["fetch(source",{"_index":1361,"title":{},"body":{"classes/ImageLoader.html":{}}}],["ff",{"_index":648,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ff0000",{"_index":568,"title":{},"body":{"classes/ColorUtil.html":{},"index.html":{}}}],["ff00ff",{"_index":428,"title":{},"body":{"classes/ColorUtil.html":{},"index.html":{}}}],["ff1493",{"_index":413,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ff4500",{"_index":540,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ff6347",{"_index":607,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ff69b4",{"_index":447,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ff7f50",{"_index":368,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ff8c00",{"_index":394,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffa07a",{"_index":480,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffa500",{"_index":538,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffb6c1",{"_index":478,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffc0cb",{"_index":558,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffd700",{"_index":436,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffdab9",{"_index":554,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffdead",{"_index":528,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffe4b5",{"_index":526,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffe4c4",{"_index":349,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffe4e1",{"_index":524,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffebcd",{"_index":352,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffefd5",{"_index":552,"title":{},"body":{"classes/ColorUtil.html":{}}}],["fff0f5",{"_index":457,"title":{},"body":{"classes/ColorUtil.html":{}}}],["fff5ee",{"_index":582,"title":{},"body":{"classes/ColorUtil.html":{}}}],["fff8dc",{"_index":372,"title":{},"body":{"classes/ColorUtil.html":{}}}],["fffacd",{"_index":463,"title":{},"body":{"classes/ColorUtil.html":{}}}],["fffaf0",{"_index":424,"title":{},"body":{"classes/ColorUtil.html":{}}}],["fffafa",{"_index":595,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffff00",{"_index":287,"title":{},"body":{"classes/ColorUtil.html":{},"index.html":{}}}],["ffffe0",{"_index":491,"title":{},"body":{"classes/ColorUtil.html":{}}}],["fffff0",{"_index":453,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ffffff",{"_index":279,"title":{},"body":{"classes/ColorUtil.html":{},"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"contributing.html":{},"index.html":{}}}],["files",{"_index":1973,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["fill",{"_index":77,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{},"index.html":{}}}],["fill(options",{"_index":141,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["fill(x",{"_index":93,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["fillrule",{"_index":185,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["filter",{"_index":1880,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{}}}],["filter((frame",{"_index":1037,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["filterargs",{"_index":912,"title":{},"body":{"classes/FilterTool.html":{},"miscellaneous/typealiases.html":{}}}],["filters",{"_index":914,"title":{},"body":{"classes/FilterTool.html":{},"index.html":{}}}],["filters.length",{"_index":937,"title":{},"body":{"classes/FilterTool.html":{}}}],["filters.map((m",{"_index":939,"title":{},"body":{"classes/FilterTool.html":{}}}],["filtertool",{"_index":898,"title":{"classes/FilterTool.html":{}},"body":{"classes/FilterTool.html":{}}}],["filtertype",{"_index":1211,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{},"miscellaneous/variables.html":{}}}],["firebrick",{"_index":421,"title":{},"body":{"classes/ColorUtil.html":{}}}],["first",{"_index":1095,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["firstcontrolpointx",{"_index":32,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["firstcontrolpointy",{"_index":33,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["fitness",{"_index":2123,"title":{},"body":{"license.html":{}}}],["fix",{"_index":1879,"title":{},"body":{"changelog.html":{}}}],["fixes",{"_index":1878,"title":{},"body":{"changelog.html":{}}}],["flatten",{"_index":1883,"title":{},"body":{"changelog.html":{}}}],["floralwhite",{"_index":423,"title":{},"body":{"classes/ColorUtil.html":{}}}],["fn",{"_index":842,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["fn.name",{"_index":843,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["follow",{"_index":1365,"title":{},"body":{"classes/ImageLoader.html":{},"contributing.html":{}}}],["followed",{"_index":1962,"title":{},"body":{"contributing.html":{}}}],["following",{"_index":2107,"title":{},"body":{"license.html":{}}}],["font",{"_index":827,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{}}}],["fontdir",{"_index":1763,"title":{},"body":{"classes/TextTool.html":{}}}],["fontpath",{"_index":828,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{}}}],["force",{"_index":205,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["forestgreen",{"_index":425,"title":{},"body":{"classes/ColorUtil.html":{}}}],["format",{"_index":1966,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["formatting",{"_index":1963,"title":{},"body":{"contributing.html":{}}}],["frame",{"_index":960,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"index.html":{}}}],["frame.ctx.canvas.height).data",{"_index":1032,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["frame.ctx.canvas.width",{"_index":1031,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["frame.frame.hidden",{"_index":1038,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["framelayer",{"_index":957,"title":{"interfaces/FrameLayer.html":{}},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["framelayer).duration",{"_index":976,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["framelayer).frame",{"_index":977,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["framerate",{"_index":989,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["frames",{"_index":967,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"index.html":{}}}],["free",{"_index":2083,"title":{},"body":{"license.html":{}}}],["friendly",{"_index":2017,"title":{},"body":{"index.html":{}}}],["fromimagedata",{"_index":1189,"title":{},"body":{"classes/IllustratorImage.html":{}}}],["fromimagedata(data",{"_index":1197,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["fromimagedatasync",{"_index":1190,"title":{},"body":{"classes/IllustratorImage.html":{}}}],["fromimagedatasync(data",{"_index":1201,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["fs",{"_index":1297,"title":{},"body":{"classes/ImageLoader.html":{},"index.html":{}}}],["fs.existssync(source",{"_index":1357,"title":{},"body":{"classes/ImageLoader.html":{}}}],["fs.promises.readfile(source",{"_index":1358,"title":{},"body":{"classes/ImageLoader.html":{}}}],["fuchsia",{"_index":427,"title":{},"body":{"classes/ColorUtil.html":{}}}],["function",{"_index":837,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"interfaces/TextDataSource.html":{},"contributing.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":1995,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":2105,"title":{},"body":{"license.html":{}}}],["gainsboro",{"_index":429,"title":{},"body":{"classes/ColorUtil.html":{}}}],["gaussianblur",{"_index":904,"title":{},"body":{"classes/FilterTool.html":{},"classes/PixelsTool.html":{}}}],["gaussianblur(amount",{"_index":921,"title":{},"body":{"classes/FilterTool.html":{}}}],["gaussianblur(sigma",{"_index":1650,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["general",{"_index":1959,"title":{},"body":{"contributing.html":{}}}],["generate",{"_index":1988,"title":{},"body":{"contributing.html":{}}}],["generaterandomid",{"_index":734,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{},"miscellaneous/functions.html":{}}}],["get(config",{"_index":1540,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["get(name",{"_index":232,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["get(nameorconfig",{"_index":1564,"title":{},"body":{"classes/LayerTools.html":{}}}],["get(nameorfn",{"_index":808,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["getalllayers",{"_index":1505,"title":{},"body":{"classes/LayerManager.html":{}}}],["getalllayers(ordered",{"_index":786,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["getbackgroundlayer",{"_index":1074,"title":{},"body":{"classes/Illustrator.html":{}}}],["getcenterpoint",{"_index":1573,"title":{},"body":{"classes/LayerUtils.html":{},"changelog.html":{}}}],["getcenterpoint(divider",{"_index":1593,"title":{},"body":{"classes/LayerUtils.html":{}}}],["getcontext",{"_index":1458,"title":{},"body":{"classes/Layer.html":{}}}],["getfonts",{"_index":1739,"title":{},"body":{"classes/TextTool.html":{}}}],["gethidden",{"_index":1464,"title":{},"body":{"classes/Layer.html":{}}}],["getillustrator",{"_index":1456,"title":{},"body":{"classes/Layer.html":{}}}],["getimage",{"_index":1659,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["getimagedata",{"_index":1574,"title":{},"body":{"classes/LayerUtils.html":{}}}],["getimagedata(sx",{"_index":1596,"title":{},"body":{"classes/LayerUtils.html":{}}}],["getimagesync",{"_index":1661,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["getlayer",{"_index":1506,"title":{},"body":{"classes/LayerManager.html":{}}}],["getlayer(layer",{"_index":767,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["getlayerposition",{"_index":1507,"title":{},"body":{"classes/LayerManager.html":{}}}],["getlayerposition(layer",{"_index":770,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["getlayertransformation",{"_index":1575,"title":{},"body":{"classes/LayerUtils.html":{}}}],["getlocked",{"_index":1462,"title":{},"body":{"classes/Layer.html":{}}}],["getmatrices",{"_index":728,"title":{},"body":{"classes/ConvolutionTool.html":{}}}],["getname",{"_index":1160,"title":{},"body":{"classes/IllustratorColor.html":{},"classes/Layer.html":{}}}],["getposition",{"_index":1460,"title":{},"body":{"classes/Layer.html":{}}}],["getsource",{"_index":1205,"title":{},"body":{"classes/IllustratorImage.html":{}}}],["getting",{"_index":1865,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["gettransform",{"_index":1841,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["gettransformer",{"_index":1699,"title":{},"body":{"classes/PixelsTool.html":{}}}],["ghostwhite",{"_index":431,"title":{},"body":{"classes/ColorUtil.html":{}}}],["gif",{"_index":2024,"title":{},"body":{"index.html":{}}}],["gifencoder",{"_index":962,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["gifencoder(this.illustrator.width",{"_index":1017,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["gifstream",{"_index":1021,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["git+https://github.com/devandromeda/illustrator.js.git",{"_index":2154,"title":{},"body":{"properties.html":{}}}],["given",{"_index":1264,"title":{},"body":{"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{}}}],["globalfonts",{"_index":1793,"title":{},"body":{"classes/TextTool.html":{}}}],["globalfonts.families",{"_index":1797,"title":{},"body":{"classes/TextTool.html":{}}}],["globalfonts.has(name",{"_index":1798,"title":{},"body":{"classes/TextTool.html":{}}}],["globalfonts.loadfontsfromdir(fontdir",{"_index":1796,"title":{},"body":{"classes/TextTool.html":{}}}],["globalfonts.register(font",{"_index":1794,"title":{},"body":{"classes/TextTool.html":{}}}],["globalfonts.registerfrompath(fontpath",{"_index":1795,"title":{},"body":{"classes/TextTool.html":{}}}],["gold",{"_index":435,"title":{},"body":{"classes/ColorUtil.html":{}}}],["goldenrod",{"_index":433,"title":{},"body":{"classes/ColorUtil.html":{}}}],["granted",{"_index":2082,"title":{},"body":{"license.html":{}}}],["gray",{"_index":437,"title":{},"body":{"classes/ColorUtil.html":{}}}],["grayscale",{"_index":905,"title":{},"body":{"classes/FilterTool.html":{}}}],["grayscale(amount",{"_index":923,"title":{},"body":{"classes/FilterTool.html":{}}}],["green",{"_index":439,"title":{},"body":{"classes/ColorUtil.html":{}}}],["greenyellow",{"_index":441,"title":{},"body":{"classes/ColorUtil.html":{}}}],["grey",{"_index":443,"title":{},"body":{"classes/ColorUtil.html":{}}}],["guide",{"_index":1954,"title":{},"body":{"contributing.html":{}}}],["h",{"_index":95,"title":{},"body":{"classes/BackgroundColorTool.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["halfside",{"_index":702,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["hanging",{"_index":1785,"title":{},"body":{"classes/TextTool.html":{}}}],["hard",{"_index":2055,"title":{},"body":{"index.html":{}}}],["has(name",{"_index":234,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["hasfont",{"_index":1740,"title":{},"body":{"classes/TextTool.html":{}}}],["hasfont(name",{"_index":1752,"title":{},"body":{"classes/TextTool.html":{}}}],["haslayer",{"_index":1508,"title":{},"body":{"classes/LayerManager.html":{}}}],["haslayer(layer",{"_index":766,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["height",{"_index":737,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/DataSource.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/Illustrator.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"interfaces/ImageDataSource.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"interfaces/TextDataSource.html":{}}}],["help",{"_index":2073,"title":{},"body":{"index.html":{}}}],["here",{"_index":1960,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["hereby",{"_index":2081,"title":{},"body":{"license.html":{}}}],["hex",{"_index":623,"title":{},"body":{"classes/ColorUtil.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["hex.substring(1).split",{"_index":638,"title":{},"body":{"classes/ColorUtil.html":{}}}],["hextorgba",{"_index":271,"title":{},"body":{"classes/ColorUtil.html":{}}}],["hextorgba(hex",{"_index":621,"title":{},"body":{"classes/ColorUtil.html":{}}}],["hidden",{"_index":1112,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["hide",{"_index":1413,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["history",{"_index":73,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{}}}],["historycallback",{"_index":91,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{},"miscellaneous/typealiases.html":{}}}],["holders",{"_index":2129,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":2150,"title":{},"body":{"properties.html":{}}}],["honeydew",{"_index":444,"title":{},"body":{"classes/ColorUtil.html":{}}}],["horizontalscaling",{"_index":1820,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["horizontalskewing",{"_index":1821,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["horizontaltranslation",{"_index":1822,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["hotpink",{"_index":446,"title":{},"body":{"classes/ColorUtil.html":{}}}],["hsl",{"_index":1170,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["hsl(${number",{"_index":213,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["hsla",{"_index":1164,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["hsla(\"].some(pattern",{"_index":1171,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["hsla(${number",{"_index":214,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["http",{"_index":1298,"title":{},"body":{"classes/ImageLoader.html":{}}}],["httpreq",{"_index":1999,"title":{},"body":{"miscellaneous/functions.html":{}}}],["httpreq(link",{"_index":2001,"title":{},"body":{"miscellaneous/functions.html":{}}}],["httpreq(source",{"_index":1374,"title":{},"body":{"classes/ImageLoader.html":{}}}],["https",{"_index":1299,"title":{},"body":{"classes/ImageLoader.html":{}}}],["https://github.com/devandromeda/illustrator.js/issues",{"_index":2152,"title":{},"body":{"properties.html":{}}}],["https://illustrator.js.org",{"_index":2026,"title":{},"body":{"index.html":{},"properties.html":{}}}],["https://www.npmjs.com/package/illustrator.js",{"_index":2027,"title":{},"body":{"index.html":{}}}],["hue",{"_index":951,"title":{},"body":{"classes/FilterTool.html":{},"classes/PixelsTool.html":{}}}],["huerotate",{"_index":906,"title":{},"body":{"classes/FilterTool.html":{},"classes/PixelsTool.html":{}}}],["huerotate(angle",{"_index":925,"title":{},"body":{"classes/FilterTool.html":{}}}],["huerotate(hue",{"_index":1648,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["id",{"_index":739,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{}}}],["ideographic",{"_index":1786,"title":{},"body":{"classes/TextTool.html":{}}}],["idx",{"_index":191,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["ignore",{"_index":1220,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["iimage",{"_index":1235,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["ijs",{"_index":2149,"title":{},"body":{"properties.html":{}}}],["illustrator",{"_index":676,"title":{"classes/Illustrator.html":{}},"body":{"classes/Colors.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"changelog.html":{},"contributing.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["illustrator(512",{"_index":2031,"title":{},"body":{"index.html":{}}}],["illustrator.animation",{"_index":2042,"title":{},"body":{"index.html":{}}}],["illustrator.height",{"_index":2040,"title":{},"body":{"index.html":{}}}],["illustrator.js",{"_index":1343,"title":{},"body":{"classes/ImageLoader.html":{},"index.html":{}}}],["illustrator.layers.createlayer",{"_index":2033,"title":{},"body":{"index.html":{}}}],["illustrator.layers.getalllayers().map(m",{"_index":2043,"title":{},"body":{"index.html":{}}}],["illustrator.width",{"_index":2039,"title":{},"body":{"index.html":{}}}],["illustrator/illustrator",{"_index":683,"title":{},"body":{"classes/Colors.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/ImageLoader.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["illustratoranimation",{"_index":966,"title":{"classes/IllustratorAnimation.html":{}},"body":{"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["illustratoranimation(this",{"_index":1061,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["illustratorcollection",{"_index":207,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerWrapper.html":{}}}],["illustratorcolor",{"_index":209,"title":{"classes/IllustratorColor.html":{}},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["illustratorcolor(this",{"_index":228,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["illustratorcolordata",{"_index":1162,"title":{"interfaces/IllustratorColorData.html":{}},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["illustratordatasource",{"_index":805,"title":{"interfaces/IllustratorDataSource.html":{}},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["illustratorexportconfig",{"_index":1070,"title":{"interfaces/IllustratorExportConfig.html":{}},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["illustratorimage",{"_index":1186,"title":{"classes/IllustratorImage.html":{}},"body":{"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["illustratorimage(await",{"_index":1236,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["illustratorimage(img",{"_index":1277,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["illustratorimage(transformer.rawpixelssync",{"_index":1238,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["illustratorimage.fromimagedata(data",{"_index":1637,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["illustratorimage.fromimagedata(source",{"_index":1355,"title":{},"body":{"classes/ImageLoader.html":{}}}],["illustratorimagedata",{"_index":1216,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{},"miscellaneous/typealiases.html":{}}}],["illustratorimageenums",{"_index":1221,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"miscellaneous/variables.html":{}}}],["illustratorimageenums.resizefiltertype[algorithm",{"_index":1658,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["illustratorimagemanager",{"_index":1066,"title":{"classes/IllustratorImageManager.html":{}},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImageManager.html":{}}}],["illustratorimagesource",{"_index":820,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/TextDataSource.html":{},"miscellaneous/typealiases.html":{}}}],["image",{"_index":823,"title":{},"body":{"classes/DataSource.html":{},"classes/Illustrator.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/LayerUtils.html":{},"interfaces/TextDataSource.html":{},"changelog.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["image.height",{"_index":1290,"title":{},"body":{"classes/ImageLoader.html":{},"classes/ImageTool.html":{}}}],["image.src",{"_index":1308,"title":{},"body":{"classes/ImageLoader.html":{}}}],["image.width",{"_index":1402,"title":{},"body":{"classes/ImageTool.html":{}}}],["image/illustratorimage",{"_index":1626,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["image/illustratorimagemanager",{"_index":1080,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["image/imageloader",{"_index":821,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/TextDataSource.html":{}}}],["imagedata",{"_index":1198,"title":{},"body":{"classes/IllustratorImage.html":{},"classes/ImageLoader.html":{},"classes/LayerUtils.html":{},"interfaces/RawImageData.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["imagedatasource",{"_index":825,"title":{"interfaces/ImageDataSource.html":{}},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["imageloader",{"_index":1215,"title":{"classes/ImageLoader.html":{}},"body":{"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"interfaces/RawImageData.html":{},"changelog.html":{}}}],["imageloader.createimage(png",{"_index":1230,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["imageloader.loadimage(source",{"_index":1394,"title":{},"body":{"classes/ImageTool.html":{}}}],["imageloader.loadimage(src",{"_index":1273,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["imagetool",{"_index":1377,"title":{"classes/ImageTool.html":{}},"body":{"classes/ImageTool.html":{},"changelog.html":{}}}],["img",{"_index":1275,"title":{},"body":{"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{}}}],["img.png",{"_index":1356,"title":{},"body":{"classes/ImageLoader.html":{}}}],["impl",{"_index":1900,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":1920,"title":{},"body":{"changelog.html":{}}}],["implemented",{"_index":1169,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["implied",{"_index":2119,"title":{},"body":{"license.html":{}}}],["import",{"_index":17,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"index.html":{}}}],["included",{"_index":2112,"title":{},"body":{"license.html":{}}}],["including",{"_index":2092,"title":{},"body":{"license.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indianred",{"_index":448,"title":{},"body":{"classes/ColorUtil.html":{}}}],["indigo",{"_index":450,"title":{},"body":{"classes/ColorUtil.html":{}}}],["infinite",{"_index":2046,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["inherit",{"_index":1766,"title":{},"body":{"classes/TextTool.html":{}}}],["inherited",{"_index":88,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/TransformTool.html":{}}}],["initialize",{"_index":1934,"title":{},"body":{"changelog.html":{}}}],["install",{"_index":2010,"title":{},"body":{"index.html":{}}}],["installation",{"_index":2009,"title":{},"body":{"index.html":{}}}],["instance",{"_index":986,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"changelog.html":{},"index.html":{}}}],["instanceof",{"_index":193,"title":{},"body":{"classes/BaseShapeTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{}}}],["instancetype",{"_index":1539,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["int",{"_index":1150,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["interest",{"_index":1956,"title":{},"body":{"contributing.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ArcToPoint.html":{},"interfaces/ColorConfig.html":{},"interfaces/ConvolutionOptions.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"interfaces/EraserOptions.html":{},"interfaces/FrameLayer.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"interfaces/ImageDataSource.html":{},"interfaces/LayerToolConfig.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"interfaces/RoundedRectangleOptions.html":{},"interfaces/TextDataSource.html":{},"interfaces/TransformOptions.html":{}},"body":{"interfaces/ArcToPoint.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"interfaces/ImageDataSource.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"interfaces/TextDataSource.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/ColorConfig.html":{},"interfaces/ConvolutionOptions.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"interfaces/EraserOptions.html":{},"interfaces/FrameLayer.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"interfaces/ImageDataSource.html":{},"interfaces/LayerToolConfig.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"interfaces/RoundedRectangleOptions.html":{},"interfaces/TextDataSource.html":{},"interfaces/TransformOptions.html":{},"overview.html":{}}}],["invert",{"_index":907,"title":{},"body":{"classes/FilterTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["invert(amount",{"_index":928,"title":{},"body":{"classes/FilterTool.html":{}}}],["isbufferlike",{"_index":1302,"title":{},"body":{"classes/ImageLoader.html":{}}}],["isbufferlike(source",{"_index":1347,"title":{},"body":{"classes/ImageLoader.html":{}}}],["iscached",{"_index":1555,"title":{},"body":{"classes/LayerTools.html":{}}}],["iscached(name",{"_index":1537,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["ishex",{"_index":272,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ishex(hex",{"_index":624,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ishidden",{"_index":1414,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["islocked",{"_index":1415,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["isvalidtool",{"_index":1556,"title":{},"body":{"classes/LayerTools.html":{}}}],["isvalidtool(name",{"_index":1553,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["iterableiterator",{"_index":819,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["iterate",{"_index":794,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["iterations",{"_index":688,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["ivory",{"_index":452,"title":{},"body":{"classes/ColorUtil.html":{}}}],["javascript",{"_index":2006,"title":{},"body":{"index.html":{},"properties.html":{}}}],["join",{"_index":2069,"title":{},"body":{"index.html":{}}}],["jpeg",{"_index":1085,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["jpegcompressoptions",{"_index":1249,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["jscolortype",{"_index":1210,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{},"miscellaneous/variables.html":{}}}],["k",{"_index":1535,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["keep",{"_index":2074,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":671,"title":{},"body":{"classes/ColorUtil.html":{}}}],["keywords",{"_index":2148,"title":{},"body":{"properties.html":{}}}],["khaki",{"_index":454,"title":{},"body":{"classes/ColorUtil.html":{}}}],["kind",{"_index":2117,"title":{},"body":{"license.html":{}}}],["l",{"_index":768,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["l.frame",{"_index":984,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["l.name",{"_index":785,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["l.position",{"_index":772,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["lavender",{"_index":458,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lavenderblush",{"_index":456,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lawngreen",{"_index":460,"title":{},"body":{"classes/ColorUtil.html":{}}}],["layer",{"_index":75,"title":{"classes/Layer.html":{}},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["layer(this",{"_index":752,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["layer.tools.get(\"backgroundcolortool",{"_index":2035,"title":{},"body":{"index.html":{}}}],["layer/layer",{"_index":961,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/ImageLoader.html":{},"classes/ToolBox.html":{}}}],["layer/layermanager",{"_index":1081,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["layerconfig",{"_index":1107,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["layerconfig.layer.coordinates.x",{"_index":1115,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["layerconfig.layer.coordinates.y",{"_index":1116,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["layerconfig.layer.height",{"_index":1118,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["layerconfig.layer.hidden",{"_index":1113,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["layerconfig.layer.render",{"_index":1114,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["layerconfig.layer.width",{"_index":1117,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["layerconfig.name",{"_index":1109,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["layermanager",{"_index":741,"title":{"classes/LayerManager.html":{}},"body":{"interfaces/CreateLayerOptions.html":{},"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"contributing.html":{}}}],["layermanager(this",{"_index":1067,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["layerobj",{"_index":751,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["layerobj.layer",{"_index":759,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["layerobj.layer.sethistory(history",{"_index":761,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["layerobj.layer.setposition(layer.position",{"_index":762,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["layerobj.layer.setposition(layerobj.position",{"_index":758,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["layerresolvable",{"_index":740,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{},"miscellaneous/typealiases.html":{}}}],["layers",{"_index":742,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{},"index.html":{}}}],["layers.every((l",{"_index":983,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["layers.length",{"_index":981,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["layerstobeupdated.foreach((l",{"_index":774,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["layertoolconfig",{"_index":1527,"title":{"interfaces/LayerToolConfig.html":{}},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["layertoolhistory",{"_index":736,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"miscellaneous/typealiases.html":{}}}],["layertools",{"_index":1467,"title":{"classes/LayerTools.html":{}},"body":{"classes/Layer.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"changelog.html":{}}}],["layertools(this",{"_index":1427,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["layertransformationdata",{"_index":1436,"title":{"interfaces/LayerTransformationData.html":{}},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["layerutils",{"_index":1429,"title":{"classes/LayerUtils.html":{}},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"changelog.html":{}}}],["layerutils(this.#ctx",{"_index":1478,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["layerwrapper",{"_index":738,"title":{"interfaces/LayerWrapper.html":{}},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["left",{"_index":1778,"title":{},"body":{"classes/TextTool.html":{}}}],["lemonchiffon",{"_index":462,"title":{},"body":{"classes/ColorUtil.html":{}}}],["liability",{"_index":2133,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2130,"title":{},"body":{"license.html":{}}}],["library",{"_index":2008,"title":{},"body":{"index.html":{},"properties.html":{}}}],["license",{"_index":2076,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["lightblue",{"_index":464,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightcoral",{"_index":466,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightcyan",{"_index":468,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightgoldenrodyellow",{"_index":470,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightgray",{"_index":472,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightgreen",{"_index":474,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightgrey",{"_index":476,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightpink",{"_index":477,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightsalmon",{"_index":479,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightseagreen",{"_index":481,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightskyblue",{"_index":483,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightslategray",{"_index":485,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightslategrey",{"_index":487,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightsteelblue",{"_index":488,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lightyellow",{"_index":490,"title":{},"body":{"classes/ColorUtil.html":{}}}],["lime",{"_index":492,"title":{},"body":{"classes/ColorUtil.html":{}}}],["limegreen",{"_index":494,"title":{},"body":{"classes/ColorUtil.html":{}}}],["limit",{"_index":168,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["limitation",{"_index":2093,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2120,"title":{},"body":{"license.html":{}}}],["line",{"_index":1048,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/ImageTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["linecapstyle",{"_index":153,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["linen",{"_index":496,"title":{},"body":{"classes/ColorUtil.html":{}}}],["linetool",{"_index":37,"title":{"classes/LineTool.html":{}},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["link",{"_index":1274,"title":{},"body":{"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"miscellaneous/functions.html":{}}}],["literal",{"_index":137,"title":{},"body":{"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorUtil.html":{},"interfaces/CreateLayerOptions.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/ImageDataSource.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{},"interfaces/TextDataSource.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":1244,"title":{},"body":{"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{}}}],["load(source",{"_index":1392,"title":{},"body":{"classes/ImageTool.html":{}}}],["load(src",{"_index":1258,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["loaddata",{"_index":800,"title":{},"body":{"classes/DataSource.html":{}}}],["loaddata(data",{"_index":811,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["loadimage",{"_index":1245,"title":{},"body":{"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"changelog.html":{}}}],["loadimage(\"https://example.com/image.png",{"_index":1288,"title":{},"body":{"classes/ImageLoader.html":{}}}],["loadimage(&quot;https://example.com/image.png&quot",{"_index":1293,"title":{},"body":{"classes/ImageLoader.html":{}}}],["loadimage(source",{"_index":1285,"title":{},"body":{"classes/ImageLoader.html":{}}}],["loadimage(src",{"_index":1262,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["loads",{"_index":1260,"title":{},"body":{"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{}}}],["lock",{"_index":1090,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["locked",{"_index":1421,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["losslesscompresspng",{"_index":1270,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["losslesscompresspng(src",{"_index":1278,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["losslesscompresspngsync",{"_index":1271,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["losslesscompresspngsync(src",{"_index":1279,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["lowercase/camelcase",{"_index":1977,"title":{},"body":{"contributing.html":{}}}],["ltr",{"_index":1767,"title":{},"body":{"classes/TextTool.html":{}}}],["m",{"_index":1040,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["m(this.#ctx",{"_index":1502,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["m.canvas!.getcontext(\"2d",{"_index":1053,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["m.duration",{"_index":1043,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["m.frame.render",{"_index":1042,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["m.layer",{"_index":2045,"title":{},"body":{"index.html":{}}}],["m.name",{"_index":245,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["m.name}(${m.value})`).join",{"_index":940,"title":{},"body":{"classes/FilterTool.html":{}}}],["m.trim",{"_index":1178,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["magenta",{"_index":498,"title":{},"body":{"classes/ColorUtil.html":{}}}],["magic",{"_index":1971,"title":{},"body":{"contributing.html":{}}}],["main",{"_index":1098,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["make",{"_index":1964,"title":{},"body":{"contributing.html":{}}}],["makeargs",{"_index":176,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/TextTool.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["makeargs(filter",{"_index":2004,"title":{},"body":{"miscellaneous/functions.html":{}}}],["makerequest",{"_index":1323,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/functions.html":{}}}],["makerequest(link",{"_index":1340,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/functions.html":{}}}],["makerequest(res.headers.location",{"_index":1337,"title":{},"body":{"classes/ImageLoader.html":{}}}],["making",{"_index":1985,"title":{},"body":{"contributing.html":{}}}],["manager",{"_index":1408,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"changelog.html":{}}}],["manipulation",{"_index":1895,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["map(async",{"_index":1039,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["maroon",{"_index":499,"title":{},"body":{"classes/ColorUtil.html":{}}}],["matching",{"_index":67,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"changelog.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random",{"_index":667,"title":{},"body":{"classes/ColorUtil.html":{}}}],["math.floor(side",{"_index":703,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["math.pi",{"_index":890,"title":{},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["math.round((parseint(c[3",{"_index":661,"title":{},"body":{"classes/ColorUtil.html":{}}}],["math.round(math.sqrt(options.matrix.length",{"_index":701,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["matrices",{"_index":726,"title":{},"body":{"classes/ConvolutionTool.html":{},"changelog.html":{}}}],["matrix",{"_index":689,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["maxwidth",{"_index":826,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{}}}],["measure",{"_index":1741,"title":{},"body":{"classes/TextTool.html":{}}}],["measure(text",{"_index":1754,"title":{},"body":{"classes/TextTool.html":{}}}],["measuretext",{"_index":1576,"title":{},"body":{"classes/LayerUtils.html":{}}}],["measuretext(text",{"_index":1601,"title":{},"body":{"classes/LayerUtils.html":{}}}],["mediumaquamarine",{"_index":501,"title":{},"body":{"classes/ColorUtil.html":{}}}],["mediumblue",{"_index":503,"title":{},"body":{"classes/ColorUtil.html":{}}}],["mediumorchid",{"_index":505,"title":{},"body":{"classes/ColorUtil.html":{}}}],["mediumpurple",{"_index":507,"title":{},"body":{"classes/ColorUtil.html":{}}}],["mediumseagreen",{"_index":509,"title":{},"body":{"classes/ColorUtil.html":{}}}],["mediumslateblue",{"_index":511,"title":{},"body":{"classes/ColorUtil.html":{}}}],["mediumspringgreen",{"_index":513,"title":{},"body":{"classes/ColorUtil.html":{}}}],["mediumturquoise",{"_index":515,"title":{},"body":{"classes/ColorUtil.html":{}}}],["mediumvioletred",{"_index":517,"title":{},"body":{"classes/ColorUtil.html":{}}}],["merchantability",{"_index":2122,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2096,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":1213,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["method",{"_index":1363,"title":{},"body":{"classes/ImageLoader.html":{},"changelog.html":{}}}],["methods",{"_index":76,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/ConvolutionTool.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"classes/LayerTools.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{},"changelog.html":{}}}],["middle",{"_index":1787,"title":{},"body":{"classes/TextTool.html":{}}}],["midnightblue",{"_index":519,"title":{},"body":{"classes/ColorUtil.html":{}}}],["mintcream",{"_index":521,"title":{},"body":{"classes/ColorUtil.html":{}}}],["miscellaneous",{"_index":1994,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mistyrose",{"_index":523,"title":{},"body":{"classes/ColorUtil.html":{}}}],["mit",{"_index":2077,"title":{},"body":{"license.html":{},"properties.html":{}}}],["miter",{"_index":160,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["moccasin",{"_index":525,"title":{},"body":{"classes/ColorUtil.html":{}}}],["modify",{"_index":2095,"title":{},"body":{"license.html":{}}}],["modules",{"_index":2142,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":1943,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["move",{"_index":127,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{},"changelog.html":{}}}],["move(x",{"_index":143,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["much",{"_index":2023,"title":{},"body":{"index.html":{}}}],["name",{"_index":98,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["namealias",{"_index":1757,"title":{},"body":{"classes/TextTool.html":{}}}],["nameorconfig",{"_index":1541,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["nameorconfig.cache",{"_index":1544,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["nameorconfig.name",{"_index":1542,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["nameorfn",{"_index":810,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["names",{"_index":243,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"contributing.html":{}}}],["name}${size",{"_index":1803,"title":{},"body":{"classes/TextTool.html":{}}}],["napi",{"_index":174,"title":{},"body":{"classes/BaseShapeTool.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/RawImageData.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"index.html":{}}}],["navajowhite",{"_index":527,"title":{},"body":{"classes/ColorUtil.html":{}}}],["navy",{"_index":529,"title":{},"body":{"classes/ColorUtil.html":{}}}],["new",{"_index":217,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/CreateLayerOptions.html":{},"classes/DataSource.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"interfaces/TextDataSource.html":{},"index.html":{}}}],["next",{"_index":1047,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/ImageTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["non",{"_index":1051,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/ImageTool.html":{}}}],["noninfringement",{"_index":2126,"title":{},"body":{"license.html":{}}}],["nonzero",{"_index":187,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["noop",{"_index":632,"title":{},"body":{"classes/ColorUtil.html":{}}}],["notice",{"_index":2110,"title":{},"body":{"license.html":{}}}],["now",{"_index":2072,"title":{},"body":{"index.html":{}}}],["npm",{"_index":2011,"title":{},"body":{"index.html":{}}}],["null",{"_index":629,"title":{},"body":{"classes/ColorUtil.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"classes/TextTool.html":{}}}],["number",{"_index":14,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["object",{"_index":275,"title":{},"body":{"classes/ColorUtil.html":{},"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/Layer.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"miscellaneous/variables.html":{}}}],["obtaining",{"_index":2086,"title":{},"body":{"license.html":{}}}],["official",{"_index":2070,"title":{},"body":{"index.html":{}}}],["offset",{"_index":148,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["oldlace",{"_index":531,"title":{},"body":{"classes/ColorUtil.html":{}}}],["olive",{"_index":533,"title":{},"body":{"classes/ColorUtil.html":{}}}],["olivedrab",{"_index":535,"title":{},"body":{"classes/ColorUtil.html":{}}}],["omit",{"_index":854,"title":{},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["op",{"_index":1342,"title":{},"body":{"classes/ImageLoader.html":{}}}],["opacity",{"_index":908,"title":{},"body":{"classes/FilterTool.html":{}}}],["opacity(amount",{"_index":930,"title":{},"body":{"classes/FilterTool.html":{}}}],["opaque",{"_index":690,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["operations",{"_index":1500,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["optional",{"_index":99,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":139,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/IllustratorImageManager.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{},"classes/SharpenTool.html":{},"classes/TransformTool.html":{}}}],["options.config",{"_index":753,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["options.controlpointy",{"_index":59,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["options.counterclockwise",{"_index":51,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["options.ctx.canvas.height",{"_index":710,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["options.ctx.canvas.width",{"_index":709,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["options.ctx.getimagedata",{"_index":706,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["options.endangle",{"_index":50,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["options.fillrule",{"_index":197,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["options.firstcontrolpointx",{"_index":62,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["options.firstcontrolpointy",{"_index":63,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["options.height",{"_index":886,"title":{},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["options.horizontalscaling",{"_index":1830,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["options.horizontalskewing",{"_index":1834,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["options.horizontaltranslation",{"_index":1835,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["options.iterations",{"_index":699,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["options.name",{"_index":745,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["options.opaque",{"_index":721,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["options.path",{"_index":196,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["options.position",{"_index":754,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["options.radius",{"_index":48,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["options.radiusx",{"_index":858,"title":{},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{}}}],["options.radiusy",{"_index":859,"title":{},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{}}}],["options.rotation",{"_index":860,"title":{},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{}}}],["options.secondcontrolpointx",{"_index":64,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["options.secondcontrolpointy",{"_index":65,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["options.startangle",{"_index":49,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["options.sx",{"_index":707,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["options.sy",{"_index":708,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["options.verticalscaling",{"_index":1831,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["options.verticalskewing",{"_index":1833,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["options.verticaltranslation",{"_index":1836,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["options.width",{"_index":885,"title":{},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["options.x",{"_index":46,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["options.x2",{"_index":55,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["options.y",{"_index":47,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["options.y1",{"_index":54,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["options.y2",{"_index":56,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["options?.height",{"_index":1469,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["options?.path",{"_index":198,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["options?.width",{"_index":1472,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["orange",{"_index":537,"title":{},"body":{"classes/ColorUtil.html":{}}}],["orangered",{"_index":539,"title":{},"body":{"classes/ColorUtil.html":{}}}],["orchid",{"_index":541,"title":{},"body":{"classes/ColorUtil.html":{}}}],["ordered",{"_index":788,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["orientation",{"_index":1207,"title":{},"body":{"classes/IllustratorImage.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"miscellaneous/variables.html":{}}}],["otherwise",{"_index":2138,"title":{},"body":{"license.html":{}}}],["out",{"_index":2053,"title":{},"body":{"index.html":{},"license.html":{}}}],["output",{"_index":717,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"index.html":{}}}],["output.canvas.encode(\"avif",{"_index":1122,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["output.canvas.encode(\"png",{"_index":1121,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["output.canvas.encode(config.encoding",{"_index":1124,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["output.data",{"_index":719,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["output.pipe(fs.createwritestream(\"./animation.gif\"));output",{"_index":2050,"title":{},"body":{"index.html":{}}}],["overview",{"_index":2143,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":2146,"title":{"properties.html":{}},"body":{}}],["padstart(6",{"_index":670,"title":{},"body":{"classes/ColorUtil.html":{}}}],["palegoldenrod",{"_index":543,"title":{},"body":{"classes/ColorUtil.html":{}}}],["palegreen",{"_index":545,"title":{},"body":{"classes/ColorUtil.html":{}}}],["paleturquoise",{"_index":547,"title":{},"body":{"classes/ColorUtil.html":{}}}],["palevioletred",{"_index":549,"title":{},"body":{"classes/ColorUtil.html":{}}}],["papayawhip",{"_index":551,"title":{},"body":{"classes/ColorUtil.html":{}}}],["param",{"_index":1272,"title":{},"body":{"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{}}}],["parameter",{"_index":840,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["parameters",{"_index":97,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"classes/ConvolutionTool.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"classes/LayerTools.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":1397,"title":{},"body":{"classes/ImageTool.html":{}}}],["parse(color",{"_index":1166,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["parsefloat(val",{"_index":1181,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["parseint(char",{"_index":659,"title":{},"body":{"classes/ColorUtil.html":{}}}],["particular",{"_index":2124,"title":{},"body":{"license.html":{}}}],["pascalcase",{"_index":1972,"title":{},"body":{"contributing.html":{}}}],["path",{"_index":188,"title":{},"body":{"classes/BaseShapeTool.html":{},"changelog.html":{}}}],["path2d",{"_index":173,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["peachpuff",{"_index":553,"title":{},"body":{"classes/ColorUtil.html":{}}}],["people",{"_index":2062,"title":{},"body":{"index.html":{}}}],["perform",{"_index":1499,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["permission",{"_index":2080,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2103,"title":{},"body":{"license.html":{}}}],["person",{"_index":2085,"title":{},"body":{"license.html":{}}}],["persons",{"_index":2104,"title":{},"body":{"license.html":{}}}],["peru",{"_index":555,"title":{},"body":{"classes/ColorUtil.html":{}}}],["pink",{"_index":557,"title":{},"body":{"classes/ColorUtil.html":{}}}],["pixels",{"_index":705,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"changelog.html":{}}}],["pixels.data",{"_index":712,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["pixels.height",{"_index":716,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["pixels.width",{"_index":714,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["pixelstool",{"_index":1628,"title":{"classes/PixelsTool.html":{}},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"changelog.html":{}}}],["pixeltool",{"_index":1894,"title":{},"body":{"changelog.html":{}}}],["pixeltransformercontext",{"_index":1623,"title":{"interfaces/PixelTransformerContext.html":{}},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["pixeltransformerrendercontext",{"_index":1627,"title":{"interfaces/PixelTransformerRenderContext.html":{}},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["plum",{"_index":559,"title":{},"body":{"classes/ColorUtil.html":{}}}],["png",{"_index":1083,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["pnglosslessoptions",{"_index":1254,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["pngquantize",{"_index":1246,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["pngquantize(src",{"_index":1265,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["pngquantizesync",{"_index":1247,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["pngquantizesync(src",{"_index":1268,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["pngquantoptions",{"_index":1266,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["points",{"_index":1175,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["points[0",{"_index":1185,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["portions",{"_index":2114,"title":{},"body":{"license.html":{}}}],["position",{"_index":733,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{}}}],["powderblue",{"_index":561,"title":{},"body":{"classes/ColorUtil.html":{}}}],["powered",{"_index":2014,"title":{},"body":{"index.html":{}}}],["pre",{"_index":1909,"title":{},"body":{"changelog.html":{}}}],["predefinedcolorspace",{"_index":1218,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["prefer",{"_index":1395,"title":{},"body":{"classes/ImageTool.html":{}}}],["prettier",{"_index":1219,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["preview",{"_index":2051,"title":{},"body":{"index.html":{}}}],["private",{"_index":630,"title":{},"body":{"classes/ColorUtil.html":{},"classes/ImageLoader.html":{}}}],["processing",{"_index":2007,"title":{},"body":{"index.html":{},"properties.html":{}}}],["project",{"_index":1935,"title":{},"body":{"changelog.html":{},"contributing.html":{},"index.html":{}}}],["projects",{"_index":2066,"title":{},"body":{"index.html":{}}}],["promise",{"_index":1294,"title":{},"body":{"classes/ImageLoader.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/ToolBox.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["promise((resolve",{"_index":1312,"title":{},"body":{"classes/ImageLoader.html":{}}}],["promise.all",{"_index":1036,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["promise.all(this.#toolhistory.flat(2).map((m",{"_index":1501,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["properly",{"_index":1981,"title":{},"body":{"contributing.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"properties.html":{}}}],["provided",{"_index":2115,"title":{},"body":{"license.html":{}}}],["provides",{"_index":2015,"title":{},"body":{"index.html":{}}}],["public",{"_index":39,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["publish",{"_index":2097,"title":{},"body":{"license.html":{}}}],["pull",{"_index":1986,"title":{},"body":{"contributing.html":{}}}],["purple",{"_index":563,"title":{},"body":{"classes/ColorUtil.html":{}}}],["purpose",{"_index":2125,"title":{},"body":{"license.html":{}}}],["putimagedata",{"_index":1577,"title":{},"body":{"classes/LayerUtils.html":{}}}],["putimagedata(data",{"_index":1603,"title":{},"body":{"classes/LayerUtils.html":{}}}],["quadraticbeziercurve",{"_index":1617,"title":{},"body":{"classes/LineTool.html":{}}}],["quadraticbeziercurve(options",{"_index":57,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["quadraticbeziercurveoptions",{"_index":28,"title":{"interfaces/QuadraticBezierCurveOptions.html":{}},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["quality",{"_index":1005,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["quick",{"_index":2028,"title":{},"body":{"index.html":{}}}],["quot;illustrator.js&quot",{"_index":1292,"title":{},"body":{"classes/ImageLoader.html":{}}}],["r0",{"_index":1590,"title":{},"body":{"classes/LayerUtils.html":{}}}],["r1",{"_index":1591,"title":{},"body":{"classes/LayerUtils.html":{}}}],["radius",{"_index":9,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageTool.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"interfaces/TextDataSource.html":{}}}],["radiusx",{"_index":850,"title":{},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{}}}],["radiusy",{"_index":851,"title":{},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{}}}],["random",{"_index":240,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{}}}],["random(amount",{"_index":241,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["randomhex",{"_index":273,"title":{},"body":{"classes/ColorUtil.html":{}}}],["rate",{"_index":990,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["rawimagedata",{"_index":1199,"title":{"interfaces/RawImageData.html":{}},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["readable",{"_index":1300,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/functions.html":{}}}],["readonly",{"_index":74,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/Colors.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{}}}],["rearrange",{"_index":757,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["rebeccapurple",{"_index":565,"title":{},"body":{"classes/ColorUtil.html":{}}}],["received",{"_index":1546,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["record",{"_index":249,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["rectangle",{"_index":1938,"title":{},"body":{"changelog.html":{}}}],["rectangleoptions",{"_index":1701,"title":{"interfaces/RectangleOptions.html":{}},"body":{"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["rectangletool",{"_index":1704,"title":{"classes/RectangleTool.html":{}},"body":{"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["rectangular",{"_index":895,"title":{},"body":{"classes/EraserTool.html":{}}}],["rectangular(options",{"_index":883,"title":{},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["red",{"_index":567,"title":{},"body":{"classes/ColorUtil.html":{}}}],["redirect",{"_index":1364,"title":{},"body":{"classes/ImageLoader.html":{}}}],["redirectcount",{"_index":1324,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/functions.html":{}}}],["registerfont",{"_index":1742,"title":{},"body":{"classes/TextTool.html":{}}}],["registerfont(font",{"_index":1756,"title":{},"body":{"classes/TextTool.html":{}}}],["registerfontpath",{"_index":1743,"title":{},"body":{"classes/TextTool.html":{}}}],["registerfontpath(fontpath",{"_index":1759,"title":{},"body":{"classes/TextTool.html":{}}}],["registerfontsdir",{"_index":1744,"title":{},"body":{"classes/TextTool.html":{}}}],["registerfontsdir(fontdir",{"_index":1761,"title":{},"body":{"classes/TextTool.html":{}}}],["reject",{"_index":1313,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/functions.html":{}}}],["reject(err",{"_index":1322,"title":{},"body":{"classes/ImageLoader.html":{}}}],["rejected",{"_index":1369,"title":{},"body":{"classes/ImageLoader.html":{}}}],["remove",{"_index":253,"title":{},"body":{"classes/ColorSwatches.html":{},"changelog.html":{}}}],["remove(name",{"_index":230,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["removedata",{"_index":801,"title":{},"body":{"classes/DataSource.html":{}}}],["removedata(nameorfn",{"_index":813,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["removepoint",{"_index":128,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["render",{"_index":78,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{},"index.html":{}}}],["rendereachlayer",{"_index":1034,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["rendered",{"_index":1097,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["rendering",{"_index":1912,"title":{},"body":{"changelog.html":{}}}],["rendertransformer",{"_index":1676,"title":{},"body":{"classes/PixelsTool.html":{}}}],["rendertransformer(context",{"_index":1663,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["rendertransformersync",{"_index":1677,"title":{},"body":{"classes/PixelsTool.html":{}}}],["rendertransformersync(context",{"_index":1667,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["repeat",{"_index":1587,"title":{},"body":{"classes/LayerUtils.html":{},"index.html":{}}}],["repeats",{"_index":1009,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["repository",{"_index":2153,"title":{},"body":{"properties.html":{}}}],["reqby",{"_index":1329,"title":{},"body":{"classes/ImageLoader.html":{}}}],["reqby.get(url",{"_index":1331,"title":{},"body":{"classes/ImageLoader.html":{}}}],["requestinfo",{"_index":1362,"title":{},"body":{"classes/ImageLoader.html":{}}}],["requests",{"_index":1987,"title":{},"body":{"contributing.html":{}}}],["required",{"_index":222,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{},"index.html":{}}}],["res",{"_index":1332,"title":{},"body":{"classes/ImageLoader.html":{}}}],["res.arraybuffer",{"_index":1372,"title":{},"body":{"classes/ImageLoader.html":{}}}],["res.headers.location",{"_index":1336,"title":{},"body":{"classes/ImageLoader.html":{}}}],["res.ok",{"_index":1367,"title":{},"body":{"classes/ImageLoader.html":{}}}],["res.status",{"_index":1371,"title":{},"body":{"classes/ImageLoader.html":{}}}],["res.statuscode",{"_index":1338,"title":{},"body":{"classes/ImageLoader.html":{}}}],["resettransform",{"_index":1839,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["resize",{"_index":1655,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["resize(width",{"_index":1693,"title":{},"body":{"classes/PixelsTool.html":{}}}],["resizefiltertype",{"_index":1212,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{},"miscellaneous/variables.html":{}}}],["resolve",{"_index":1325,"title":{},"body":{"classes/ImageLoader.html":{},"classes/LayerManager.html":{},"miscellaneous/functions.html":{}}}],["resolve(buffer.concat(body",{"_index":1319,"title":{},"body":{"classes/ImageLoader.html":{}}}],["resolve(layer",{"_index":781,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["resolvehex",{"_index":274,"title":{},"body":{"classes/ColorUtil.html":{}}}],["resolvehex(color",{"_index":627,"title":{},"body":{"classes/ColorUtil.html":{}}}],["resolveid",{"_index":1509,"title":{},"body":{"classes/LayerManager.html":{}}}],["resolveid(layer",{"_index":779,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["resolvelayer",{"_index":1510,"title":{},"body":{"classes/LayerManager.html":{}}}],["resolvelayer(layer",{"_index":777,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["rest",{"_index":1396,"title":{},"body":{"classes/ImageTool.html":{}}}],["restore",{"_index":83,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{}}}],["restriction",{"_index":2091,"title":{},"body":{"license.html":{}}}],["results",{"_index":66,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"changelog.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":43,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["returns",{"_index":100,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/ConvolutionTool.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"classes/LayerTools.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{},"miscellaneous/functions.html":{}}}],["rgb",{"_index":1151,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["rgb(${number",{"_index":210,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["rgba",{"_index":1152,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["rgba(${number",{"_index":211,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["right",{"_index":1779,"title":{},"body":{"classes/TextTool.html":{}}}],["rights",{"_index":2094,"title":{},"body":{"license.html":{}}}],["rosybrown",{"_index":569,"title":{},"body":{"classes/ColorUtil.html":{}}}],["rotate",{"_index":950,"title":{},"body":{"classes/FilterTool.html":{},"classes/PixelsTool.html":{},"classes/TransformTool.html":{}}}],["rotate(angle",{"_index":1850,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["rotate(orientation",{"_index":1638,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["rotation",{"_index":852,"title":{},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{}}}],["round",{"_index":158,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["rounded",{"_index":1931,"title":{},"body":{"changelog.html":{}}}],["roundedrectangleoptions",{"_index":1703,"title":{"interfaces/RoundedRectangleOptions.html":{}},"body":{"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["royalblue",{"_index":571,"title":{},"body":{"classes/ColorUtil.html":{}}}],["rs",{"_index":2064,"title":{},"body":{"index.html":{}}}],["rs/canvas",{"_index":175,"title":{},"body":{"classes/BaseShapeTool.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/RawImageData.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"index.html":{}}}],["rs/image",{"_index":1214,"title":{},"body":{"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/RawImageData.html":{}}}],["rtl",{"_index":1768,"title":{},"body":{"classes/TextTool.html":{}}}],["rules",{"_index":1958,"title":{},"body":{"contributing.html":{}}}],["run",{"_index":1969,"title":{},"body":{"contributing.html":{}}}],["saddlebrown",{"_index":573,"title":{},"body":{"classes/ColorUtil.html":{}}}],["salmon",{"_index":575,"title":{},"body":{"classes/ColorUtil.html":{}}}],["sandybrown",{"_index":577,"title":{},"body":{"classes/ColorUtil.html":{}}}],["saturate",{"_index":909,"title":{},"body":{"classes/FilterTool.html":{}}}],["saturate(amount",{"_index":932,"title":{},"body":{"classes/FilterTool.html":{}}}],["save",{"_index":84,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{}}}],["scale",{"_index":1854,"title":{},"body":{"classes/TransformTool.html":{}}}],["scale(x",{"_index":1852,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["scx",{"_index":723,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["scy",{"_index":722,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["seagreen",{"_index":579,"title":{},"body":{"classes/ColorUtil.html":{}}}],["seashell",{"_index":581,"title":{},"body":{"classes/ColorUtil.html":{}}}],["secondcontrolpointx",{"_index":34,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["secondcontrolpointy",{"_index":35,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["segments",{"_index":156,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["sell",{"_index":2101,"title":{},"body":{"license.html":{}}}],["sepia",{"_index":910,"title":{},"body":{"classes/FilterTool.html":{}}}],["sepia(amount",{"_index":934,"title":{},"body":{"classes/FilterTool.html":{}}}],["server",{"_index":2071,"title":{},"body":{"index.html":{}}}],["set",{"_index":2036,"title":{},"body":{"index.html":{}}}],["setblur",{"_index":1714,"title":{},"body":{"classes/ShadowTool.html":{}}}],["setblur(amount",{"_index":1718,"title":{},"body":{"classes/ShadowTool.html":{}}}],["setbrightness",{"_index":1678,"title":{},"body":{"classes/PixelsTool.html":{}}}],["setbrightness(brightness",{"_index":1644,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["setcolor",{"_index":1715,"title":{},"body":{"classes/ShadowTool.html":{},"classes/TextTool.html":{}}}],["setcolor(color",{"_index":1720,"title":{},"body":{"classes/ShadowTool.html":{},"classes/TextTool.html":{}}}],["setcontrast",{"_index":1679,"title":{},"body":{"classes/PixelsTool.html":{}}}],["setcontrast(contrast",{"_index":1646,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["setdashoffset",{"_index":129,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setdashoffset(offset",{"_index":146,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setdirection",{"_index":1745,"title":{},"body":{"classes/TextTool.html":{}}}],["setdirection(direction",{"_index":1765,"title":{},"body":{"classes/TextTool.html":{}}}],["setdisposalcode",{"_index":1129,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["setdisposalcode(code",{"_index":1000,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["setfillcolor",{"_index":79,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setfillcolor(color",{"_index":103,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setfont",{"_index":1746,"title":{},"body":{"classes/TextTool.html":{}}}],["setfont(name",{"_index":1771,"title":{},"body":{"classes/TextTool.html":{}}}],["setframedelay",{"_index":1130,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["setframedelay(delay",{"_index":996,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["setframerate",{"_index":1131,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["setframerate(framerate",{"_index":988,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["sethistory",{"_index":1416,"title":{},"body":{"classes/Layer.html":{}}}],["sethistory(history",{"_index":1449,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["setlayerposition",{"_index":1511,"title":{},"body":{"classes/LayerManager.html":{}}}],["setlayerposition(layer",{"_index":773,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["setlinecap",{"_index":130,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setlinecap(linecapstyle",{"_index":150,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setlinedash",{"_index":131,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setlinedash(segments",{"_index":154,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setlinejoinstyle",{"_index":132,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setlinejoinstyle(style",{"_index":157,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setlinewidth",{"_index":133,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setlinewidth(width",{"_index":163,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setmiterlimit",{"_index":134,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setmiterlimit(limit",{"_index":166,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["setoffsetx",{"_index":1716,"title":{},"body":{"classes/ShadowTool.html":{}}}],["setoffsetx(amount",{"_index":1722,"title":{},"body":{"classes/ShadowTool.html":{}}}],["setoffsety",{"_index":1717,"title":{},"body":{"classes/ShadowTool.html":{}}}],["setoffsety(amount",{"_index":1724,"title":{},"body":{"classes/ShadowTool.html":{}}}],["setposition",{"_index":1417,"title":{},"body":{"classes/Layer.html":{}}}],["setposition(position",{"_index":1451,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["setquality",{"_index":1132,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["setquality(quality",{"_index":1004,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["setrepeat",{"_index":1133,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["setrepeat(repeats",{"_index":1008,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["setstrokecolor",{"_index":80,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{},"classes/TextTool.html":{}}}],["setstrokecolor(color",{"_index":109,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{},"classes/TextTool.html":{}}}],["setstrokewidth",{"_index":81,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["setstrokewidth(w",{"_index":111,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["settextalignment",{"_index":1747,"title":{},"body":{"classes/TextTool.html":{}}}],["settextalignment(alignment",{"_index":1775,"title":{},"body":{"classes/TextTool.html":{}}}],["settextbaseline",{"_index":1748,"title":{},"body":{"classes/TextTool.html":{}}}],["settextbaseline(alignment",{"_index":1783,"title":{},"body":{"classes/TextTool.html":{}}}],["settransform",{"_index":1855,"title":{},"body":{"classes/TransformTool.html":{}}}],["settransform(options",{"_index":1837,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["settransparency",{"_index":1134,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["settransparency(transparent",{"_index":992,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["sh",{"_index":715,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/LayerUtils.html":{}}}],["shadow",{"_index":947,"title":{},"body":{"classes/FilterTool.html":{}}}],["shadowtool",{"_index":1712,"title":{"classes/ShadowTool.html":{}},"body":{"classes/ShadowTool.html":{}}}],["shall",{"_index":2111,"title":{},"body":{"license.html":{}}}],["shape",{"_index":1948,"title":{},"body":{"changelog.html":{}}}],["shapes",{"_index":1941,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sharedarraybuffer",{"_index":1305,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/typealiases.html":{}}}],["sharpen",{"_index":1945,"title":{},"body":{"changelog.html":{}}}],["sharpentool",{"_index":1730,"title":{"classes/SharpenTool.html":{}},"body":{"classes/SharpenTool.html":{}}}],["sharpness",{"_index":2020,"title":{},"body":{"index.html":{}}}],["shouldcache",{"_index":1543,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["shouldredirect",{"_index":1333,"title":{},"body":{"classes/ImageLoader.html":{}}}],["show",{"_index":1418,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"index.html":{}}}],["side",{"_index":700,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["sienna",{"_index":583,"title":{},"body":{"classes/ColorUtil.html":{}}}],["sigma",{"_index":1686,"title":{},"body":{"classes/PixelsTool.html":{}}}],["silver",{"_index":585,"title":{},"body":{"classes/ColorUtil.html":{}}}],["simple",{"_index":2056,"title":{},"body":{"index.html":{}}}],["size",{"_index":1772,"title":{},"body":{"classes/TextTool.html":{}}}],["skip",{"_index":1108,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"changelog.html":{}}}],["skrscontext2d",{"_index":694,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"classes/ToolBox.html":{}}}],["skyblue",{"_index":587,"title":{},"body":{"classes/ColorUtil.html":{}}}],["skyra/gifenc",{"_index":965,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["slateblue",{"_index":589,"title":{},"body":{"classes/ColorUtil.html":{}}}],["slategray",{"_index":591,"title":{},"body":{"classes/ColorUtil.html":{}}}],["slategrey",{"_index":593,"title":{},"body":{"classes/ColorUtil.html":{}}}],["slice(0",{"_index":1182,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["snow",{"_index":594,"title":{},"body":{"classes/ColorUtil.html":{}}}],["software",{"_index":2087,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["source.encode(\"png",{"_index":1350,"title":{},"body":{"classes/ImageLoader.html":{}}}],["source.export",{"_index":1353,"title":{},"body":{"classes/ImageLoader.html":{}}}],["source.png",{"_index":1354,"title":{},"body":{"classes/ImageLoader.html":{}}}],["source.render",{"_index":1351,"title":{},"body":{"classes/ImageLoader.html":{}}}],["special",{"_index":2060,"title":{},"body":{"index.html":{}}}],["springgreen",{"_index":596,"title":{},"body":{"classes/ColorUtil.html":{}}}],["src",{"_index":711,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/IllustratorImageManager.html":{},"classes/PixelsTool.html":{}}}],["src/.../ellipse.ts",{"_index":2159,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../filter.ts",{"_index":2160,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../illustratorimage.ts",{"_index":2161,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../imageloader.ts",{"_index":1997,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../layer.ts",{"_index":2163,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../layermanager.ts",{"_index":2162,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../makeargs.ts",{"_index":2000,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../randomid.ts",{"_index":1998,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../toolbox.ts",{"_index":2158,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/animation/illustratoranimation.ts",{"_index":958,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:12",{"_index":1135,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:14",{"_index":1136,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:16",{"_index":1141,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:20",{"_index":1137,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:21",{"_index":1138,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:22",{"_index":1139,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:42",{"_index":1140,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:49",{"_index":1145,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:55",{"_index":1148,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:61",{"_index":1144,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:67",{"_index":1143,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:73",{"_index":1146,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:79",{"_index":1147,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/animation/illustratoranimation.ts:85",{"_index":1142,"title":{},"body":{"classes/IllustratorAnimation.html":{}}}],["src/colors/colors.ts",{"_index":675,"title":{},"body":{"classes/Colors.html":{}}}],["src/colors/colors.ts:6",{"_index":682,"title":{},"body":{"classes/Colors.html":{}}}],["src/colors/colors.ts:7",{"_index":680,"title":{},"body":{"classes/Colors.html":{}}}],["src/colors/colors.ts:8",{"_index":681,"title":{},"body":{"classes/Colors.html":{}}}],["src/colors/colorswatches.ts",{"_index":204,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["src/colors/colorswatches.ts:21",{"_index":254,"title":{},"body":{"classes/ColorSwatches.html":{}}}],["src/colors/colorswatches.ts:34",{"_index":264,"title":{},"body":{"classes/ColorSwatches.html":{}}}],["src/colors/colorswatches.ts:38",{"_index":257,"title":{},"body":{"classes/ColorSwatches.html":{}}}],["src/colors/colorswatches.ts:42",{"_index":258,"title":{},"body":{"classes/ColorSwatches.html":{}}}],["src/colors/colorswatches.ts:46",{"_index":255,"title":{},"body":{"classes/ColorSwatches.html":{}}}],["src/colors/colorswatches.ts:50",{"_index":256,"title":{},"body":{"classes/ColorSwatches.html":{}}}],["src/colors/colorswatches.ts:54",{"_index":260,"title":{},"body":{"classes/ColorSwatches.html":{}}}],["src/colors/colorswatches.ts:55",{"_index":261,"title":{},"body":{"classes/ColorSwatches.html":{}}}],["src/colors/colorswatches.ts:56",{"_index":263,"title":{},"body":{"classes/ColorSwatches.html":{}}}],["src/colors/colorswatches.ts:60",{"_index":259,"title":{},"body":{"classes/ColorSwatches.html":{}}}],["src/colors/colorswatches.ts:64",{"_index":265,"title":{},"body":{"classes/ColorSwatches.html":{}}}],["src/colors/colorswatches.ts:68",{"_index":266,"title":{},"body":{"classes/ColorSwatches.html":{}}}],["src/colors/illustratorcolor.ts",{"_index":1149,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["src/colors/illustratorcolor.ts:12",{"_index":1154,"title":{},"body":{"classes/IllustratorColor.html":{}}}],["src/colors/illustratorcolor.ts:13",{"_index":1155,"title":{},"body":{"classes/IllustratorColor.html":{}}}],["src/colors/illustratorcolor.ts:49",{"_index":1156,"title":{},"body":{"classes/IllustratorColor.html":{}}}],["src/colors/illustratorcolor.ts:53",{"_index":1157,"title":{},"body":{"classes/IllustratorColor.html":{}}}],["src/colors/illustratorcolor.ts:57",{"_index":1159,"title":{},"body":{"classes/IllustratorColor.html":{}}}],["src/colors/illustratorcolor.ts:61",{"_index":1158,"title":{},"body":{"classes/IllustratorColor.html":{}}}],["src/colors/illustratorcolor.ts:65",{"_index":1161,"title":{},"body":{"classes/IllustratorColor.html":{}}}],["src/data/datasource.ts",{"_index":797,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["src/data/datasource.ts:33",{"_index":803,"title":{},"body":{"classes/DataSource.html":{}}}],["src/data/datasource.ts:35",{"_index":812,"title":{},"body":{"classes/DataSource.html":{}}}],["src/data/datasource.ts:40",{"_index":806,"title":{},"body":{"classes/DataSource.html":{}}}],["src/data/datasource.ts:44",{"_index":814,"title":{},"body":{"classes/DataSource.html":{}}}],["src/data/datasource.ts:50",{"_index":809,"title":{},"body":{"classes/DataSource.html":{}}}],["src/data/datasource.ts:54",{"_index":816,"title":{},"body":{"classes/DataSource.html":{}}}],["src/data/datasource.ts:58",{"_index":815,"title":{},"body":{"classes/DataSource.html":{}}}],["src/data/datasource.ts:62",{"_index":817,"title":{},"body":{"classes/DataSource.html":{}}}],["src/data/datasource.ts:66",{"_index":807,"title":{},"body":{"classes/DataSource.html":{}}}],["src/data/datasource.ts:72",{"_index":818,"title":{},"body":{"classes/DataSource.html":{}}}],["src/illustrator/illustrator.ts",{"_index":1057,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["src/illustrator/illustrator.ts:15",{"_index":1068,"title":{},"body":{"classes/Illustrator.html":{}}}],["src/illustrator/illustrator.ts:16",{"_index":1062,"title":{},"body":{"classes/Illustrator.html":{}}}],["src/illustrator/illustrator.ts:17",{"_index":1064,"title":{},"body":{"classes/Illustrator.html":{}}}],["src/illustrator/illustrator.ts:18",{"_index":1060,"title":{},"body":{"classes/Illustrator.html":{}}}],["src/illustrator/illustrator.ts:20",{"_index":1065,"title":{},"body":{"classes/Illustrator.html":{}}}],["src/illustrator/illustrator.ts:28",{"_index":1075,"title":{},"body":{"classes/Illustrator.html":{}}}],["src/illustrator/illustrator.ts:32",{"_index":1073,"title":{},"body":{"classes/Illustrator.html":{}}}],["src/illustrator/illustrator.ts:73",{"_index":1071,"title":{},"body":{"classes/Illustrator.html":{}}}],["src/image/illustratorimage.ts",{"_index":1187,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/image/illustratorimage.ts:31",{"_index":1195,"title":{},"body":{"classes/IllustratorImage.html":{}}}],["src/image/illustratorimage.ts:36",{"_index":1206,"title":{},"body":{"classes/IllustratorImage.html":{}}}],["src/image/illustratorimage.ts:40",{"_index":1203,"title":{},"body":{"classes/IllustratorImage.html":{}}}],["src/image/illustratorimage.ts:45",{"_index":1204,"title":{},"body":{"classes/IllustratorImage.html":{}}}],["src/image/illustratorimage.ts:50",{"_index":1200,"title":{},"body":{"classes/IllustratorImage.html":{}}}],["src/image/illustratorimage.ts:56",{"_index":1202,"title":{},"body":{"classes/IllustratorImage.html":{}}}],["src/image/illustratorimagemanager.ts",{"_index":1239,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["src/image/illustratorimagemanager.ts:20",{"_index":1259,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["src/image/illustratorimagemanager.ts:28",{"_index":1263,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["src/image/illustratorimagemanager.ts:33",{"_index":1250,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["src/image/illustratorimagemanager.ts:37",{"_index":1252,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["src/image/illustratorimagemanager.ts:41",{"_index":1255,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["src/image/illustratorimagemanager.ts:45",{"_index":1257,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["src/image/illustratorimagemanager.ts:49",{"_index":1267,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["src/image/illustratorimagemanager.ts:53",{"_index":1269,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["src/image/imageloader.ts",{"_index":1280,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/image/imageloader.ts:126",{"_index":1283,"title":{},"body":{"classes/ImageLoader.html":{}}}],["src/image/imageloader.ts:81",{"_index":1287,"title":{},"body":{"classes/ImageLoader.html":{}}}],["src/image/imageloader.ts:82",{"_index":1295,"title":{},"body":{"classes/ImageLoader.html":{}}}],["src/image/imageloader.ts:83",{"_index":1296,"title":{},"body":{"classes/ImageLoader.html":{}}}],["src/layer/layer.ts",{"_index":1406,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"miscellaneous/typealiases.html":{}}}],["src/layer/layer.ts:100",{"_index":1442,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:105",{"_index":1453,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:110",{"_index":1448,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:114",{"_index":1447,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:118",{"_index":1439,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:129",{"_index":1433,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:135",{"_index":1450,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:143",{"_index":1446,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:24",{"_index":1430,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:25",{"_index":1428,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:26",{"_index":1424,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:30",{"_index":1431,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:31",{"_index":1423,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:34",{"_index":1426,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:35",{"_index":1425,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:48",{"_index":1455,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:52",{"_index":1457,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:56",{"_index":1459,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:60",{"_index":1461,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:64",{"_index":1452,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:68",{"_index":1437,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:74",{"_index":1463,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:78",{"_index":1444,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:82",{"_index":1445,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:87",{"_index":1454,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:92",{"_index":1443,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layer.ts:96",{"_index":1465,"title":{},"body":{"classes/Layer.html":{}}}],["src/layer/layermanager.ts",{"_index":731,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{},"miscellaneous/typealiases.html":{}}}],["src/layer/layermanager.ts:113",{"_index":1525,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:117",{"_index":1524,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:121",{"_index":1523,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:127",{"_index":1518,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:131",{"_index":1522,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:25",{"_index":1512,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:27",{"_index":1513,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:29",{"_index":1514,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:33",{"_index":1515,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:52",{"_index":1517,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:72",{"_index":1516,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:78",{"_index":1521,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:83",{"_index":1519,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:89",{"_index":1520,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layermanager.ts:95",{"_index":1526,"title":{},"body":{"classes/LayerManager.html":{}}}],["src/layer/layertools.ts",{"_index":1528,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["src/layer/layertools.ts:11",{"_index":1558,"title":{},"body":{"classes/LayerTools.html":{}}}],["src/layer/layertools.ts:12",{"_index":1559,"title":{},"body":{"classes/LayerTools.html":{}}}],["src/layer/layertools.ts:14",{"_index":1560,"title":{},"body":{"classes/LayerTools.html":{}}}],["src/layer/layertools.ts:18",{"_index":1561,"title":{},"body":{"classes/LayerTools.html":{}}}],["src/layer/layertools.ts:22",{"_index":1566,"title":{},"body":{"classes/LayerTools.html":{}}}],["src/layer/layertools.ts:26",{"_index":1562,"title":{},"body":{"classes/LayerTools.html":{}}}],["src/layer/layertools.ts:27",{"_index":1563,"title":{},"body":{"classes/LayerTools.html":{}}}],["src/layer/layertools.ts:28",{"_index":1565,"title":{},"body":{"classes/LayerTools.html":{}}}],["src/layer/layertools.ts:45",{"_index":1567,"title":{},"body":{"classes/LayerTools.html":{}}}],["src/layer/layerutils.ts",{"_index":1568,"title":{},"body":{"classes/LayerUtils.html":{}}}],["src/layer/layerutils.ts:10",{"_index":1602,"title":{},"body":{"classes/LayerUtils.html":{}}}],["src/layer/layerutils.ts:14",{"_index":1600,"title":{},"body":{"classes/LayerUtils.html":{}}}],["src/layer/layerutils.ts:18",{"_index":1584,"title":{},"body":{"classes/LayerUtils.html":{}}}],["src/layer/layerutils.ts:22",{"_index":1592,"title":{},"body":{"classes/LayerUtils.html":{}}}],["src/layer/layerutils.ts:26",{"_index":1581,"title":{},"body":{"classes/LayerUtils.html":{}}}],["src/layer/layerutils.ts:30",{"_index":1588,"title":{},"body":{"classes/LayerUtils.html":{}}}],["src/layer/layerutils.ts:34",{"_index":1597,"title":{},"body":{"classes/LayerUtils.html":{}}}],["src/layer/layerutils.ts:38",{"_index":1604,"title":{},"body":{"classes/LayerUtils.html":{}}}],["src/layer/layerutils.ts:4",{"_index":1579,"title":{},"body":{"classes/LayerUtils.html":{}}}],["src/layer/layerutils.ts:42",{"_index":1594,"title":{},"body":{"classes/LayerUtils.html":{}}}],["src/toolbox/base/baseshapetool.ts",{"_index":124,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:100",{"_index":171,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:108",{"_index":155,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:116",{"_index":138,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:14",{"_index":169,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:22",{"_index":164,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:30",{"_index":152,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:38",{"_index":147,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:46",{"_index":161,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:54",{"_index":167,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:6",{"_index":149,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:62",{"_index":135,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:70",{"_index":145,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:78",{"_index":144,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/baseshapetool.ts:86",{"_index":142,"title":{},"body":{"classes/BaseShapeTool.html":{}}}],["src/toolbox/base/toolbox.ts",{"_index":1808,"title":{},"body":{"classes/ToolBox.html":{},"miscellaneous/typealiases.html":{}}}],["src/toolbox/base/toolbox.ts:11",{"_index":1813,"title":{},"body":{"classes/ToolBox.html":{}}}],["src/toolbox/base/toolbox.ts:19",{"_index":1812,"title":{},"body":{"classes/ToolBox.html":{}}}],["src/toolbox/base/toolbox.ts:27",{"_index":1811,"title":{},"body":{"classes/ToolBox.html":{}}}],["src/toolbox/base/toolbox.ts:8",{"_index":1809,"title":{},"body":{"classes/ToolBox.html":{}}}],["src/toolbox/base/toolbox.ts:9",{"_index":1810,"title":{},"body":{"classes/ToolBox.html":{}}}],["src/toolbox/color/backgroundcolor.ts",{"_index":70,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["src/toolbox/color/backgroundcolor.ts:11",{"_index":96,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["src/toolbox/color/backgroundcolor.ts:18",{"_index":114,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["src/toolbox/color/backgroundcolor.ts:25",{"_index":110,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["src/toolbox/color/backgroundcolor.ts:32",{"_index":112,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["src/toolbox/color/backgroundcolor.ts:4",{"_index":107,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["src/toolbox/eraser/eraser.ts",{"_index":881,"title":{},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["src/toolbox/eraser/eraser.ts:11",{"_index":897,"title":{},"body":{"classes/EraserTool.html":{}}}],["src/toolbox/eraser/eraser.ts:18",{"_index":896,"title":{},"body":{"classes/EraserTool.html":{}}}],["src/toolbox/filters/convolutionfilter.ts",{"_index":687,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["src/toolbox/filters/convolutionfilter.ts:13",{"_index":727,"title":{},"body":{"classes/ConvolutionTool.html":{}}}],["src/toolbox/filters/convolutionfilter.ts:90",{"_index":729,"title":{},"body":{"classes/ConvolutionTool.html":{}}}],["src/toolbox/filters/filter.ts",{"_index":899,"title":{},"body":{"classes/FilterTool.html":{},"miscellaneous/typealiases.html":{}}}],["src/toolbox/filters/filter.ts:103",{"_index":935,"title":{},"body":{"classes/FilterTool.html":{}}}],["src/toolbox/filters/filter.ts:14",{"_index":922,"title":{},"body":{"classes/FilterTool.html":{}}}],["src/toolbox/filters/filter.ts:24",{"_index":916,"title":{},"body":{"classes/FilterTool.html":{}}}],["src/toolbox/filters/filter.ts:34",{"_index":918,"title":{},"body":{"classes/FilterTool.html":{}}}],["src/toolbox/filters/filter.ts:44",{"_index":920,"title":{},"body":{"classes/FilterTool.html":{}}}],["src/toolbox/filters/filter.ts:53",{"_index":924,"title":{},"body":{"classes/FilterTool.html":{}}}],["src/toolbox/filters/filter.ts:6",{"_index":913,"title":{},"body":{"classes/FilterTool.html":{}}}],["src/toolbox/filters/filter.ts:63",{"_index":926,"title":{},"body":{"classes/FilterTool.html":{}}}],["src/toolbox/filters/filter.ts:73",{"_index":929,"title":{},"body":{"classes/FilterTool.html":{}}}],["src/toolbox/filters/filter.ts:83",{"_index":931,"title":{},"body":{"classes/FilterTool.html":{}}}],["src/toolbox/filters/filter.ts:93",{"_index":933,"title":{},"body":{"classes/FilterTool.html":{}}}],["src/toolbox/filters/shadow.ts",{"_index":1713,"title":{},"body":{"classes/ShadowTool.html":{}}}],["src/toolbox/filters/shadow.ts:12",{"_index":1719,"title":{},"body":{"classes/ShadowTool.html":{}}}],["src/toolbox/filters/shadow.ts:20",{"_index":1723,"title":{},"body":{"classes/ShadowTool.html":{}}}],["src/toolbox/filters/shadow.ts:28",{"_index":1725,"title":{},"body":{"classes/ShadowTool.html":{}}}],["src/toolbox/filters/shadow.ts:4",{"_index":1721,"title":{},"body":{"classes/ShadowTool.html":{}}}],["src/toolbox/filters/sharpen.ts",{"_index":1731,"title":{},"body":{"classes/SharpenTool.html":{}}}],["src/toolbox/filters/sharpen.ts:4",{"_index":1734,"title":{},"body":{"classes/SharpenTool.html":{}}}],["src/toolbox/image/image.ts",{"_index":1378,"title":{},"body":{"classes/ImageTool.html":{}}}],["src/toolbox/image/image.ts:10",{"_index":1383,"title":{},"body":{"classes/ImageTool.html":{}}}],["src/toolbox/image/image.ts:11",{"_index":1386,"title":{},"body":{"classes/ImageTool.html":{}}}],["src/toolbox/image/image.ts:12",{"_index":1388,"title":{},"body":{"classes/ImageTool.html":{}}}],["src/toolbox/image/image.ts:13",{"_index":1389,"title":{},"body":{"classes/ImageTool.html":{}}}],["src/toolbox/image/image.ts:39",{"_index":1391,"title":{},"body":{"classes/ImageTool.html":{}}}],["src/toolbox/image/image.ts:6",{"_index":1393,"title":{},"body":{"classes/ImageTool.html":{}}}],["src/toolbox/pixels/pixels.ts",{"_index":1624,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:104",{"_index":1688,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:110",{"_index":1691,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:122",{"_index":1692,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:134",{"_index":1681,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:22",{"_index":1682,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:27",{"_index":1683,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:33",{"_index":1695,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:41",{"_index":1684,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:47",{"_index":1690,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:53",{"_index":1696,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:59",{"_index":1697,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:65",{"_index":1689,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:71",{"_index":1685,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:77",{"_index":1698,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:83",{"_index":1694,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:94",{"_index":1700,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/pixels/pixels.ts:98",{"_index":1687,"title":{},"body":{"classes/PixelsTool.html":{}}}],["src/toolbox/shapes/ellipse.ts",{"_index":849,"title":{},"body":{"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"miscellaneous/typealiases.html":{}}}],["src/toolbox/shapes/ellipse.ts:17",{"_index":864,"title":{},"body":{"classes/EllipseTool.html":{}}}],["src/toolbox/shapes/ellipse.ts:35",{"_index":865,"title":{},"body":{"classes/EllipseTool.html":{}}}],["src/toolbox/shapes/line.ts",{"_index":6,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["src/toolbox/shapes/line.ts:37",{"_index":1621,"title":{},"body":{"classes/LineTool.html":{}}}],["src/toolbox/shapes/line.ts:45",{"_index":1618,"title":{},"body":{"classes/LineTool.html":{}}}],["src/toolbox/shapes/line.ts:60",{"_index":1619,"title":{},"body":{"classes/LineTool.html":{}}}],["src/toolbox/shapes/line.ts:68",{"_index":1622,"title":{},"body":{"classes/LineTool.html":{}}}],["src/toolbox/shapes/line.ts:76",{"_index":1620,"title":{},"body":{"classes/LineTool.html":{}}}],["src/toolbox/shapes/rectangle.ts",{"_index":1702,"title":{},"body":{"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{}}}],["src/toolbox/shapes/rectangle.ts:19",{"_index":1710,"title":{},"body":{"classes/RectangleTool.html":{}}}],["src/toolbox/shapes/rectangle.ts:27",{"_index":1711,"title":{},"body":{"classes/RectangleTool.html":{}}}],["src/toolbox/text/text.ts",{"_index":1738,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:10",{"_index":1760,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:14",{"_index":1762,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:18",{"_index":1751,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:22",{"_index":1753,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:26",{"_index":1769,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:34",{"_index":1781,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:42",{"_index":1788,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:50",{"_index":1773,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:58",{"_index":1764,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:6",{"_index":1758,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:66",{"_index":1774,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:74",{"_index":1792,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:83",{"_index":1790,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/text/text.ts:92",{"_index":1755,"title":{},"body":{"classes/TextTool.html":{}}}],["src/toolbox/transform/transform.ts",{"_index":1819,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["src/toolbox/transform/transform.ts:13",{"_index":1864,"title":{},"body":{"classes/TransformTool.html":{}}}],["src/toolbox/transform/transform.ts:21",{"_index":1863,"title":{},"body":{"classes/TransformTool.html":{}}}],["src/toolbox/transform/transform.ts:39",{"_index":1862,"title":{},"body":{"classes/TransformTool.html":{}}}],["src/toolbox/transform/transform.ts:57",{"_index":1859,"title":{},"body":{"classes/TransformTool.html":{}}}],["src/toolbox/transform/transform.ts:65",{"_index":1858,"title":{},"body":{"classes/TransformTool.html":{}}}],["src/toolbox/transform/transform.ts:78",{"_index":1860,"title":{},"body":{"classes/TransformTool.html":{}}}],["src/toolbox/transform/transform.ts:86",{"_index":1861,"title":{},"body":{"classes/TransformTool.html":{}}}],["src/utils/colorutil.ts",{"_index":268,"title":{},"body":{"classes/ColorUtil.html":{}}}],["src/utils/colorutil.ts:187",{"_index":625,"title":{},"body":{"classes/ColorUtil.html":{}}}],["src/utils/colorutil.ts:191",{"_index":622,"title":{},"body":{"classes/ColorUtil.html":{}}}],["src/utils/colorutil.ts:219",{"_index":626,"title":{},"body":{"classes/ColorUtil.html":{}}}],["src/utils/colorutil.ts:225",{"_index":628,"title":{},"body":{"classes/ColorUtil.html":{}}}],["src/utils/colorutil.ts:6",{"_index":620,"title":{},"body":{"classes/ColorUtil.html":{}}}],["src/utils/makeargs.ts",{"_index":2003,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/utils/randomid.ts",{"_index":2002,"title":{},"body":{"miscellaneous/functions.html":{}}}],["start",{"_index":1780,"title":{},"body":{"classes/TextTool.html":{}}}],["startangle",{"_index":24,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["started",{"_index":1866,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["static",{"_index":269,"title":{},"body":{"classes/ColorUtil.html":{},"classes/IllustratorImage.html":{},"classes/ImageLoader.html":{},"interfaces/RawImageData.html":{}}}],["status",{"_index":1370,"title":{},"body":{"classes/ImageLoader.html":{}}}],["steelblue",{"_index":598,"title":{},"body":{"classes/ColorUtil.html":{}}}],["stream",{"_index":1301,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/functions.html":{}}}],["stream.on(\"data",{"_index":1315,"title":{},"body":{"classes/ImageLoader.html":{}}}],["stream.on(\"end",{"_index":1318,"title":{},"body":{"classes/ImageLoader.html":{}}}],["stream.on(\"error",{"_index":1320,"title":{},"body":{"classes/ImageLoader.html":{}}}],["stream/consumers",{"_index":1310,"title":{},"body":{"classes/ImageLoader.html":{}}}],["strict",{"_index":1957,"title":{},"body":{"contributing.html":{}}}],["string",{"_index":104,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"interfaces/CreateLayerOptions.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"classes/FilterTool.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"miscellaneous/typealiases.html":{}}}],["stroke",{"_index":82,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["stroke(options",{"_index":170,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{}}}],["stroke(x",{"_index":113,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["stroketext",{"_index":1749,"title":{},"body":{"classes/TextTool.html":{}}}],["stroketext(text",{"_index":1789,"title":{},"body":{"classes/TextTool.html":{}}}],["style",{"_index":162,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/EllipseTool.html":{},"classes/LineTool.html":{},"classes/RectangleTool.html":{},"classes/TextTool.html":{},"contributing.html":{}}}],["subject",{"_index":2106,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":2099,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":2113,"title":{},"body":{"license.html":{}}}],["such",{"_index":2019,"title":{},"body":{"index.html":{}}}],["super(_data",{"_index":1227,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["super.fromrgbapixels(data.data",{"_index":1232,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["super.png",{"_index":1229,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["super.pngsync",{"_index":1231,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["support",{"_index":1928,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["supported",{"_index":2018,"title":{},"body":{"index.html":{}}}],["sure",{"_index":1965,"title":{},"body":{"contributing.html":{}}}],["sw",{"_index":713,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/LayerUtils.html":{}}}],["swatches",{"_index":677,"title":{},"body":{"classes/Colors.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["switch",{"_index":641,"title":{},"body":{"classes/ColorUtil.html":{}}}],["sx",{"_index":691,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/LayerUtils.html":{}}}],["sy",{"_index":692,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/LayerUtils.html":{}}}],["symbol.iterator",{"_index":846,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["t",{"_index":1815,"title":{},"body":{"classes/ToolBox.html":{},"miscellaneous/typealiases.html":{}}}],["tan",{"_index":600,"title":{},"body":{"classes/ColorUtil.html":{}}}],["teal",{"_index":602,"title":{},"body":{"classes/ColorUtil.html":{}}}],["template",{"_index":206,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorUtil.html":{},"classes/DataSource.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["test",{"_index":1984,"title":{},"body":{"contributing.html":{}}}],["text",{"_index":822,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/LayerUtils.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"changelog.html":{},"index.html":{}}}],["textdatasource",{"_index":824,"title":{"interfaces/TextDataSource.html":{}},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["texttool",{"_index":1737,"title":{"classes/TextTool.html":{}},"body":{"classes/TextTool.html":{},"changelog.html":{}}}],["thanks",{"_index":1955,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["then((res",{"_index":1366,"title":{},"body":{"classes/ImageLoader.html":{}}}],["things",{"_index":1961,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["this.#addframe(layers",{"_index":987,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.#canvas",{"_index":1474,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.#canvas.getcontext(\"2d",{"_index":1476,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.#ctx",{"_index":1475,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{}}}],["this.#ctx.canvas.height",{"_index":1599,"title":{},"body":{"classes/LayerUtils.html":{}}}],["this.#ctx.canvas.width",{"_index":1598,"title":{},"body":{"classes/LayerUtils.html":{}}}],["this.#ctx.createconicgradient(startangle",{"_index":1609,"title":{},"body":{"classes/LayerUtils.html":{}}}],["this.#ctx.createlineargradient(x0",{"_index":1607,"title":{},"body":{"classes/LayerUtils.html":{}}}],["this.#ctx.createpattern(image",{"_index":1610,"title":{},"body":{"classes/LayerUtils.html":{}}}],["this.#ctx.createradialgradient(x0",{"_index":1608,"title":{},"body":{"classes/LayerUtils.html":{}}}],["this.#ctx.getimagedata(sx",{"_index":1611,"title":{},"body":{"classes/LayerUtils.html":{}}}],["this.#ctx.gettransform",{"_index":1606,"title":{},"body":{"classes/LayerUtils.html":{}}}],["this.#ctx.measuretext(text",{"_index":1605,"title":{},"body":{"classes/LayerUtils.html":{}}}],["this.#ctx.putimagedata(data",{"_index":1612,"title":{},"body":{"classes/LayerUtils.html":{}}}],["this.#ctx.restore",{"_index":1490,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.#ctx.save",{"_index":1489,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.#data",{"_index":250,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["this.#data.array",{"_index":247,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["this.#data.clear",{"_index":237,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["this.#data.delete(name",{"_index":231,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["this.#data.get(name",{"_index":233,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["this.#data.has(data.name",{"_index":226,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["this.#data.has(name",{"_index":235,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["this.#data.hex",{"_index":1184,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["this.#data.map((m",{"_index":244,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["this.#data.random(amount",{"_index":242,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["this.#data.rgba",{"_index":1183,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["this.#data.set(data.name",{"_index":229,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["this.#data.size",{"_index":239,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["this.#encoderconfig.delay",{"_index":999,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.#encoderconfig.dispose",{"_index":1003,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.#encoderconfig.framerate",{"_index":991,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.#encoderconfig.quality",{"_index":1007,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.#encoderconfig.repeat",{"_index":1011,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.#encoderconfig.transparent",{"_index":995,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.#ensuretransformer",{"_index":1639,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.#frames",{"_index":970,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.#frames.push(...frames",{"_index":1056,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.#frames?.length",{"_index":1014,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.#hidden",{"_index":1488,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.#layers.array",{"_index":793,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.#layers.array().sort((a",{"_index":789,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.#layers.delete(id",{"_index":765,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.#layers.find((l",{"_index":784,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.#layers.findkey((x",{"_index":747,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.#layers.get(l.id)?.position",{"_index":776,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.#layers.get(layer",{"_index":783,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.#layers.get(layer.id",{"_index":782,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.#layers.set(l.id",{"_index":775,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.#layers.set(layerobj.id",{"_index":756,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.#layers.size",{"_index":743,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.#layers.values",{"_index":795,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.#locked",{"_index":1485,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.#parse(data.color",{"_index":1165,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["this.#rendereachlayer",{"_index":1020,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.#throwiflocked",{"_index":1494,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.#toolhistory",{"_index":1492,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.#toolhistory.push(tool.history",{"_index":1496,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.#toolscache.clear",{"_index":1533,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["this.#toolscache.delete(name",{"_index":1536,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["this.#toolscache.get(name",{"_index":1547,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["this.#toolscache.has(name",{"_index":1538,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["this.#toolscache.set(name",{"_index":1552,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["this.#transformer",{"_index":1631,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.#transformer!.toimage",{"_index":1660,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.#transformer!.toimagesync",{"_index":1662,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.#transformer?.adjustcontrast(contrast",{"_index":1647,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.#transformer?.blur(sigma",{"_index":1651,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.#transformer?.brighten(brightness",{"_index":1645,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.#transformer?.crop(context.from",{"_index":1642,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.#transformer?.huerotate(hue",{"_index":1649,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.#transformer?.invert",{"_index":1643,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.#transformer?.resize(width",{"_index":1657,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.#transformer?.rotate(illustratorimageenums.orientation[orientation",{"_index":1640,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.#transformer?.unsharpen(sigma",{"_index":1654,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this._data",{"_index":1228,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["this.addframes([frame",{"_index":979,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.applyfilter",{"_index":943,"title":{},"body":{"classes/FilterTool.html":{}}}],["this.autoclear",{"_index":1816,"title":{},"body":{"classes/ToolBox.html":{}}}],["this.backgroundlayer.coordinates.x",{"_index":1100,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["this.backgroundlayer.coordinates.y",{"_index":1101,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["this.backgroundlayer.height",{"_index":1103,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["this.backgroundlayer.render",{"_index":1096,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["this.backgroundlayer.width",{"_index":1102,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["this.coordinates",{"_index":1484,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.count",{"_index":755,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.data",{"_index":833,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["this.data.color",{"_index":1167,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["this.data.filter((ds",{"_index":835,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["this.data.filter(nameorfn",{"_index":838,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["this.data.find(typeof",{"_index":841,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["this.data.push(data",{"_index":834,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["this.drawrounded(image",{"_index":1401,"title":{},"body":{"classes/ImageTool.html":{}}}],["this.getimage",{"_index":1664,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.getimagesync",{"_index":1668,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.height",{"_index":1093,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.hidden",{"_index":1487,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.history",{"_index":1817,"title":{},"body":{"classes/ToolBox.html":{}}}],["this.history.push((ctx",{"_index":41,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["this.history.push(async",{"_index":697,"title":{},"body":{"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["this.illustrator.height",{"_index":1018,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["this.layer.applytool(this",{"_index":123,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/ToolBox.html":{}}}],["this.layer.context.getimagedata(context.from",{"_index":1633,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.layer.height",{"_index":893,"title":{},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["this.layer.illustrator.image.loadimage(src",{"_index":1630,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["this.layer.utils.getlayertransformation",{"_index":1843,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["this.layer.utils.measuretext(text",{"_index":1807,"title":{},"body":{"classes/TextTool.html":{}}}],["this.layer.width",{"_index":892,"title":{},"body":{"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{}}}],["this.layers",{"_index":1087,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["this.layers.getalllayers(true",{"_index":1106,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["this.layers.getlayer(\"background",{"_index":1091,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["this.load(src",{"_index":1276,"title":{},"body":{"classes/IllustratorImageManager.html":{}}}],["this.locked",{"_index":1486,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.manager.duplicatelayer(this",{"_index":1491,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.manager.getlayerposition(this",{"_index":1481,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.manager.illustrator",{"_index":1480,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.manager.illustrator.height",{"_index":1470,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.manager.illustrator.width",{"_index":1473,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.manager.resolve(this)?.name",{"_index":1479,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.manager.setlayerposition(this",{"_index":1482,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.name",{"_index":1440,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.position",{"_index":1493,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.render",{"_index":1119,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["this.resolve(layer",{"_index":771,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.resolve(layer)?.id",{"_index":780,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.resolve(layer)?.layer",{"_index":778,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.resolveid(layer",{"_index":764,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.resolvelayer(layer",{"_index":769,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["this.utils",{"_index":1477,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["this.width",{"_index":1471,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["thistle",{"_index":604,"title":{},"body":{"classes/ColorUtil.html":{}}}],["threshold",{"_index":1653,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["throw",{"_index":220,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"interfaces/CreateLayerOptions.html":{},"classes/DataSource.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/TextDataSource.html":{}}}],["throwiflocked",{"_index":1497,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["toarray",{"_index":246,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["todo",{"_index":829,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"interfaces/TextDataSource.html":{}}}],["toimage",{"_index":1191,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["toimagesync",{"_index":1192,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["tojson",{"_index":248,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["tomato",{"_index":606,"title":{},"body":{"classes/ColorUtil.html":{}}}],["tool",{"_index":1434,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"changelog.html":{},"index.html":{}}}],["toolbox",{"_index":71,"title":{"classes/ToolBox.html":{}},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"changelog.html":{}}}],["toolbox/base/toolbox",{"_index":1466,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["toolbox/exports",{"_index":1530,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["toolbox:11",{"_index":116,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/TransformTool.html":{}}}],["toolbox:19",{"_index":115,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/TransformTool.html":{}}}],["toolbox:27",{"_index":172,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/TransformTool.html":{}}}],["toolbox:39",{"_index":101,"title":{},"body":{"classes/BackgroundColorTool.html":{}}}],["toolbox:8",{"_index":92,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/TransformTool.html":{}}}],["toolbox:9",{"_index":90,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ConvolutionTool.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/ImageTool.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/TransformTool.html":{}}}],["toolconstructor",{"_index":1550,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["toolconstructor(this.layer",{"_index":1551,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["toolhistory",{"_index":1468,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["tools",{"_index":1409,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"changelog.html":{},"index.html":{}}}],["tools[name",{"_index":1548,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["toolscache",{"_index":1531,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["top",{"_index":1104,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/TextTool.html":{}}}],["tort",{"_index":2137,"title":{},"body":{"license.html":{}}}],["tostring",{"_index":802,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["tostring(16",{"_index":669,"title":{},"body":{"classes/ColorUtil.html":{}}}],["transform",{"_index":1856,"title":{},"body":{"classes/TransformTool.html":{},"changelog.html":{},"index.html":{}}}],["transform(options",{"_index":1829,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["transformation",{"_index":1842,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["transformation.a",{"_index":1844,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["transformation.b",{"_index":1845,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["transformation.c",{"_index":1846,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["transformation.d",{"_index":1847,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["transformation.e",{"_index":1848,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["transformation.f",{"_index":1849,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["transformer",{"_index":1188,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{}}}],["transformer.rawpixels",{"_index":1237,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["transformoptions",{"_index":1818,"title":{"interfaces/TransformOptions.html":{}},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["transformtool",{"_index":1826,"title":{"classes/TransformTool.html":{}},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["translate",{"_index":1857,"title":{},"body":{"classes/TransformTool.html":{}}}],["translate(x",{"_index":1827,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["transparent",{"_index":993,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["true",{"_index":787,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{}}}],["ts",{"_index":1222,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"classes/TextTool.html":{},"miscellaneous/variables.html":{}}}],["turquoise",{"_index":608,"title":{},"body":{"classes/ColorUtil.html":{}}}],["type",{"_index":15,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CreateLayerOptions.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2156,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeerror(\"brightness",{"_index":944,"title":{},"body":{"classes/FilterTool.html":{}}}],["typeerror(\"color",{"_index":224,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["typeerror(\"contrast",{"_index":945,"title":{},"body":{"classes/FilterTool.html":{}}}],["typeerror(\"data",{"_index":832,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}],["typeerror(\"delay",{"_index":998,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["typeerror(\"disposal",{"_index":1002,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["typeerror(\"divider",{"_index":1613,"title":{},"body":{"classes/LayerUtils.html":{}}}],["typeerror(\"frame",{"_index":985,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["typeerror(\"gaussian",{"_index":941,"title":{},"body":{"classes/FilterTool.html":{}}}],["typeerror(\"grayscale",{"_index":948,"title":{},"body":{"classes/FilterTool.html":{}}}],["typeerror(\"hue",{"_index":949,"title":{},"body":{"classes/FilterTool.html":{}}}],["typeerror(\"invert",{"_index":953,"title":{},"body":{"classes/FilterTool.html":{}}}],["typeerror(\"name",{"_index":221,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{}}}],["typeerror(\"opacity",{"_index":954,"title":{},"body":{"classes/FilterTool.html":{}}}],["typeerror(\"quality",{"_index":1006,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["typeerror(\"repeats",{"_index":1010,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["typeerror(\"saturation",{"_index":955,"title":{},"body":{"classes/FilterTool.html":{}}}],["typeerror(\"sepia",{"_index":956,"title":{},"body":{"classes/FilterTool.html":{}}}],["typeerror(\"transparency",{"_index":994,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{}}}],["typeerror(\"unsupported",{"_index":1376,"title":{},"body":{"classes/ImageLoader.html":{}}}],["typeerror(`tool",{"_index":1545,"title":{},"body":{"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{}}}],["typeof",{"_index":195,"title":{},"body":{"classes/BaseShapeTool.html":{},"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"classes/ColorUtil.html":{},"interfaces/CreateLayerOptions.html":{},"classes/DataSource.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"classes/LayerUtils.html":{},"interfaces/LayerWrapper.html":{},"interfaces/TextDataSource.html":{}}}],["typescript",{"_index":1049,"title":{},"body":{"interfaces/FrameLayer.html":{},"classes/IllustratorAnimation.html":{},"classes/ImageTool.html":{},"index.html":{}}}],["uint8array",{"_index":1306,"title":{},"body":{"classes/ImageLoader.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["uint8clampedarray",{"_index":1225,"title":{},"body":{"classes/IllustratorImage.html":{},"interfaces/RawImageData.html":{}}}],["undefined",{"_index":2005,"title":{},"body":{"miscellaneous/functions.html":{}}}],["under",{"_index":2067,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":1072,"title":{},"body":{"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorImage.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/Layer.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"classes/PixelsTool.html":{}}}],["unlock",{"_index":1419,"title":{},"body":{"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{}}}],["unsharpmasking",{"_index":1680,"title":{},"body":{"classes/PixelsTool.html":{}}}],["unsharpmasking(sigma",{"_index":1652,"title":{},"body":{"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{}}}],["update",{"_index":1991,"title":{},"body":{"contributing.html":{}}}],["url",{"_index":1303,"title":{},"body":{"classes/ImageLoader.html":{},"miscellaneous/typealiases.html":{}}}],["url(link",{"_index":1328,"title":{},"body":{"classes/ImageLoader.html":{}}}],["url.protocol",{"_index":1330,"title":{},"body":{"classes/ImageLoader.html":{}}}],["use",{"_index":1309,"title":{},"body":{"classes/ImageLoader.html":{},"contributing.html":{},"license.html":{}}}],["utilities",{"_index":1873,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["utility",{"_index":1890,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["utils",{"_index":678,"title":{},"body":{"classes/Colors.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"changelog.html":{}}}],["utils/colorutil",{"_index":684,"title":{},"body":{"classes/Colors.html":{}}}],["utils/illustratorcollection",{"_index":208,"title":{},"body":{"interfaces/ColorConfig.html":{},"classes/ColorSwatches.html":{},"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerToolConfig.html":{},"classes/LayerTools.html":{},"interfaces/LayerWrapper.html":{}}}],["utils/makeargs",{"_index":177,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/TextTool.html":{}}}],["utils/randomid",{"_index":735,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["v",{"_index":1326,"title":{},"body":{"classes/ImageLoader.html":{}}}],["val",{"_index":1177,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["val.includes",{"_index":1179,"title":{},"body":{"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{}}}],["value",{"_index":86,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ColorUtil.html":{},"classes/Colors.html":{},"classes/ConvolutionTool.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/FrameLayer.html":{},"classes/Illustrator.html":{},"classes/IllustratorAnimation.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":2164,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":2147,"title":{},"body":{"properties.html":{}}}],["verticalscaling",{"_index":1823,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["verticalskewing",{"_index":1824,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["verticaltranslation",{"_index":1825,"title":{},"body":{"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["via",{"_index":2058,"title":{},"body":{"index.html":{}}}],["violet",{"_index":610,"title":{},"body":{"classes/ColorUtil.html":{}}}],["void",{"_index":102,"title":{},"body":{"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"classes/ColorSwatches.html":{},"classes/ConvolutionTool.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorColor.html":{},"interfaces/IllustratorColorData.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerTools.html":{},"interfaces/LayerTransformationData.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/ShadowTool.html":{},"classes/SharpenTool.html":{},"classes/TextTool.html":{},"classes/ToolBox.html":{},"classes/TransformTool.html":{},"miscellaneous/typealiases.html":{}}}],["w",{"_index":94,"title":{},"body":{"classes/BackgroundColorTool.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{}}}],["warranties",{"_index":2121,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2116,"title":{},"body":{"license.html":{}}}],["webp",{"_index":1086,"title":{},"body":{"classes/Illustrator.html":{},"interfaces/IllustratorExportConfig.html":{}}}],["wheat",{"_index":612,"title":{},"body":{"classes/ColorUtil.html":{}}}],["whether",{"_index":2134,"title":{},"body":{"license.html":{}}}],["white",{"_index":614,"title":{},"body":{"classes/ColorUtil.html":{}}}],["whitesmoke",{"_index":615,"title":{},"body":{"classes/ColorUtil.html":{}}}],["width",{"_index":165,"title":{},"body":{"classes/BaseShapeTool.html":{},"interfaces/CreateLayerOptions.html":{},"classes/DataSource.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/Illustrator.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/IllustratorExportConfig.html":{},"classes/IllustratorImage.html":{},"interfaces/ImageDataSource.html":{},"classes/Layer.html":{},"classes/LayerManager.html":{},"interfaces/LayerTransformationData.html":{},"interfaces/LayerWrapper.html":{},"classes/LineTool.html":{},"interfaces/PixelTransformerContext.html":{},"interfaces/PixelTransformerRenderContext.html":{},"classes/PixelsTool.html":{},"interfaces/RawImageData.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"interfaces/TextDataSource.html":{}}}],["without",{"_index":2090,"title":{},"body":{"license.html":{}}}],["work",{"_index":2065,"title":{},"body":{"index.html":{}}}],["worker",{"_index":1899,"title":{},"body":{"changelog.html":{}}}],["write",{"_index":2049,"title":{},"body":{"index.html":{}}}],["writetext",{"_index":1750,"title":{},"body":{"classes/TextTool.html":{}}}],["writetext(text",{"_index":1791,"title":{},"body":{"classes/TextTool.html":{}}}],["x",{"_index":22,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"classes/TransformTool.html":{}}}],["x.name",{"_index":748,"title":{},"body":{"interfaces/CreateLayerOptions.html":{},"classes/LayerManager.html":{},"interfaces/LayerWrapper.html":{}}}],["x0",{"_index":1585,"title":{},"body":{"classes/LayerUtils.html":{}}}],["x1",{"_index":10,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["x2",{"_index":11,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["y",{"_index":23,"title":{},"body":{"interfaces/ArcToPoint.html":{},"classes/BackgroundColorTool.html":{},"classes/BaseShapeTool.html":{},"interfaces/ConvolutionOptions.html":{},"classes/ConvolutionTool.html":{},"interfaces/CubicBezierCurveOptions.html":{},"classes/DataSource.html":{},"interfaces/DrawArcOptions.html":{},"interfaces/DrawEllipseOptions.html":{},"classes/EllipseTool.html":{},"interfaces/EraserOptions.html":{},"classes/EraserTool.html":{},"classes/FilterTool.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"classes/Layer.html":{},"interfaces/LayerTransformationData.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{},"interfaces/RectangleOptions.html":{},"classes/RectangleTool.html":{},"interfaces/RoundedRectangleOptions.html":{},"interfaces/TextDataSource.html":{},"classes/TextTool.html":{},"interfaces/TransformOptions.html":{},"classes/TransformTool.html":{}}}],["y0",{"_index":1583,"title":{},"body":{"classes/LayerUtils.html":{}}}],["y1",{"_index":12,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LayerUtils.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["y2",{"_index":13,"title":{},"body":{"interfaces/ArcToPoint.html":{},"interfaces/CubicBezierCurveOptions.html":{},"interfaces/DrawArcOptions.html":{},"classes/LineTool.html":{},"interfaces/QuadraticBezierCurveOptions.html":{}}}],["yarn",{"_index":1970,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["yellow",{"_index":617,"title":{},"body":{"classes/ColorUtil.html":{}}}],["yellowgreen",{"_index":618,"title":{},"body":{"classes/ColorUtil.html":{}}}],["yes",{"_index":140,"title":{},"body":{"classes/BaseShapeTool.html":{},"classes/ColorSwatches.html":{},"classes/EllipseTool.html":{},"classes/IllustratorAnimation.html":{},"classes/IllustratorImageManager.html":{},"classes/ImageLoader.html":{},"classes/ImageTool.html":{},"classes/Layer.html":{},"classes/LayerTools.html":{},"classes/LineTool.html":{},"classes/PixelsTool.html":{},"classes/RectangleTool.html":{},"classes/TextTool.html":{},"miscellaneous/functions.html":{}}}],["yield",{"_index":847,"title":{},"body":{"classes/DataSource.html":{},"interfaces/IllustratorDataSource.html":{},"interfaces/ImageDataSource.html":{},"interfaces/TextDataSource.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ArcToPoint.html":{"url":"interfaces/ArcToPoint.html","title":"interface - ArcToPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ArcToPoint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/shapes/Line.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            radius\n                                        \n                                \n                                \n                                        \n                                            x1\n                                        \n                                \n                                \n                                        \n                                            x2\n                                        \n                                \n                                \n                                        \n                                            y1\n                                        \n                                \n                                \n                                        \n                                            y2\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        radius\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        radius:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x1\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x1:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x2\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x2:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y1\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y1:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y2\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y2:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseShapeTool } from \"../base/BaseShapeTool\";\n\nexport interface DrawArcOptions {\n    x: number;\n    y: number;\n    radius: number;\n    startAngle: number;\n    endAngle: number;\n    counterclockwise?: boolean;\n}\n\nexport interface ArcToPoint {\n    x1: number;\n    y1: number;\n    x2: number;\n    y2: number;\n    radius: number;\n}\n\nexport interface QuadraticBezierCurveOptions {\n    controlPointX: number;\n    controlPointY: number;\n    x: number;\n    y: number;\n}\n\nexport interface CubicBezierCurveOptions {\n    firstControlPointX: number;\n    firstControlPointY: number;\n    secondControlPointX: number;\n    secondControlPointY: number;\n    x: number;\n    y: number;\n}\n\nexport class LineTool extends BaseShapeTool {\n    public draw(from: number, to: number) {\n        this.history.push((ctx) => {\n            ctx.lineTo(from, to);\n        });\n\n        return this;\n    }\n\n    public arc(options: DrawArcOptions) {\n        this.history.push((ctx) => {\n            ctx.arc(\n                options.x,\n                options.y,\n                options.radius,\n                options.startAngle,\n                options.endAngle,\n                !!options.counterclockwise\n            );\n        });\n\n        return this;\n    }\n\n    public arcTo(options: ArcToPoint) {\n        this.history.push((ctx) => {\n            ctx.arcTo(options.x1, options.y1, options.x2, options.y2, options.radius);\n        });\n\n        return this;\n    }\n\n    public quadraticBezierCurve(options: QuadraticBezierCurveOptions) {\n        this.history.push((ctx) => {\n            ctx.quadraticCurveTo(options.controlPointX, options.controlPointY, options.x, options.y);\n        });\n\n        return this;\n    }\n\n    public cubicBezierCurve(options: CubicBezierCurveOptions) {\n        this.history.push((ctx) => {\n            ctx.bezierCurveTo(\n                options.firstControlPointX,\n                options.firstControlPointY,\n                options.secondControlPointX,\n                options.secondControlPointY,\n                options.x,\n                options.y\n            );\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BackgroundColorTool.html":{"url":"classes/BackgroundColorTool.html","title":"class - BackgroundColorTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BackgroundColorTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/color/BackgroundColor.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ToolBox\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                fill\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                setFillColor\n                            \n                            \n                                    Public\n                                setStrokeColor\n                            \n                            \n                                    Public\n                                setStrokeWidth\n                            \n                            \n                                    Public\n                                stroke\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fill\n                        \n                    \n                \n            \n            \n                \n                    \n                    fill(x: number, y: number, w: number, h: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/color/BackgroundColor.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    w\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    h\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:39\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setFillColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setFillColor(color: string | CanvasPattern | CanvasGradient)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/color/BackgroundColor.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                            string | CanvasPattern | CanvasGradient\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setStrokeColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setStrokeColor(color: string | CanvasPattern | CanvasGradient)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/color/BackgroundColor.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                            string | CanvasPattern | CanvasGradient\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setStrokeWidth\n                        \n                    \n                \n            \n            \n                \n                    \n                    setStrokeWidth(w: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/color/BackgroundColor.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    w\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        stroke\n                        \n                    \n                \n            \n            \n                \n                    \n                    stroke(x: number, y: number, w: number, h: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/color/BackgroundColor.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    w\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    h\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ToolBox } from \"../base/ToolBox\";\n\nexport class BackgroundColorTool extends ToolBox {\n    public setFillColor(color: string | CanvasPattern | CanvasGradient) {\n        this.history.push((ctx) => {\n            ctx.fillStyle = color;\n        });\n        return this;\n    }\n\n    public fill(x: number, y: number, w: number, h: number) {\n        this.history.push((ctx) => {\n            ctx.fillRect(x, y, w, h);\n        });\n        return this;\n    }\n\n    public stroke(x: number, y: number, w: number, h: number) {\n        this.history.push((ctx) => {\n            ctx.strokeRect(x, y, w, h);\n        });\n        return this;\n    }\n\n    public setStrokeColor(color: string | CanvasPattern | CanvasGradient) {\n        this.history.push((ctx) => {\n            ctx.strokeStyle = color;\n        });\n        return this;\n    }\n\n    public setStrokeWidth(w: number) {\n        this.history.push((ctx) => {\n            ctx.lineWidth = w;\n        });\n        return this;\n    }\n\n    public render() {\n        this.layer.applyTool(this);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseShapeTool.html":{"url":"classes/BaseShapeTool.html","title":"class - BaseShapeTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseShapeTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/base/BaseShapeTool.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ToolBox\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addPoint\n                            \n                            \n                                    Public\n                                clip\n                            \n                            \n                                    Public\n                                fill\n                            \n                            \n                                    Public\n                                move\n                            \n                            \n                                    Public\n                                removePoint\n                            \n                            \n                                    Public\n                                setDashOffset\n                            \n                            \n                                    Public\n                                setFillColor\n                            \n                            \n                                    Public\n                                setLineCap\n                            \n                            \n                                    Public\n                                setLineDash\n                            \n                            \n                                    Public\n                                setLineJoinStyle\n                            \n                            \n                                    Public\n                                setLineWidth\n                            \n                            \n                                    Public\n                                setMiterLimit\n                            \n                            \n                                    Public\n                                setStrokeColor\n                            \n                            \n                                    Public\n                                stroke\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addPoint\n                        \n                    \n                \n            \n            \n                \n                    \n                    addPoint()\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clip\n                        \n                    \n                \n            \n            \n                \n                    \n                    clip(options?: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fill\n                        \n                    \n                \n            \n            \n                \n                    \n                    fill(options?: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        move\n                        \n                    \n                \n            \n            \n                \n                    \n                    move(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removePoint\n                        \n                    \n                \n            \n            \n                \n                    \n                    removePoint()\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setDashOffset\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDashOffset(offset: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setFillColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setFillColor(color: string | CanvasGradient | CanvasPattern)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                            string | CanvasGradient | CanvasPattern\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineCap\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineCap(lineCapStyle: CanvasLineCap)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lineCapStyle\n                                    \n                                            CanvasLineCap\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineDash\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineDash(segments: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    segments\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineJoinStyle\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineJoinStyle(style: \"round\" | \"bevel\" | \"miter\")\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    style\n                                    \n                                            \"round\" | \"bevel\" | \"miter\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineWidth\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineWidth(width: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setMiterLimit\n                        \n                    \n                \n            \n            \n                \n                    \n                    setMiterLimit(limit: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setStrokeColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setStrokeColor(color: string | CanvasGradient | CanvasPattern)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                            string | CanvasGradient | CanvasPattern\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        stroke\n                        \n                    \n                \n            \n            \n                \n                    \n                    stroke(options?: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/BaseShapeTool.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Path2D } from \"@napi-rs/canvas\";\nimport { makeArgs } from \"../../utils/makeArgs\";\nimport { ToolBox } from \"./ToolBox\";\n\nexport class BaseShapeTool extends ToolBox {\n    public setFillColor(color: string | CanvasGradient | CanvasPattern) {\n        this.history.push((ctx) => {\n            ctx.fillStyle = color;\n        });\n\n        return this;\n    }\n\n    public setStrokeColor(color: string | CanvasGradient | CanvasPattern) {\n        this.history.push((ctx) => {\n            ctx.strokeStyle = color;\n        });\n\n        return this;\n    }\n\n    public setLineWidth(width: number) {\n        this.history.push((ctx) => {\n            ctx.lineWidth = width;\n        });\n\n        return this;\n    }\n\n    public setLineCap(lineCapStyle: CanvasLineCap) {\n        this.history.push((ctx) => {\n            ctx.lineCap = lineCapStyle;\n        });\n\n        return this;\n    }\n\n    public setDashOffset(offset: number) {\n        this.history.push((ctx) => {\n            ctx.lineDashOffset = offset;\n        });\n\n        return this;\n    }\n\n    public setLineJoinStyle(style: \"round\" | \"bevel\" | \"miter\") {\n        this.history.push((ctx) => {\n            ctx.lineJoin = style;\n        });\n\n        return this;\n    }\n\n    public setMiterLimit(limit: number) {\n        this.history.push((ctx) => {\n            ctx.miterLimit = limit;\n        });\n\n        return this;\n    }\n\n    public addPoint() {\n        this.history.push((ctx) => {\n            ctx.beginPath();\n        });\n\n        return this;\n    }\n\n    public removePoint() {\n        this.history.push((ctx) => {\n            ctx.closePath();\n        });\n\n        return this;\n    }\n\n    public move(x: number, y: number) {\n        this.history.push((ctx) => {\n            ctx.moveTo(x, y);\n        });\n\n        return this;\n    }\n\n    public fill(options?: { fillRule?: \"evenodd\" | \"nonzero\"; path: Path2D }) {\n        this.history.push((ctx) => {\n            if (!options) return ctx.fill();\n            ctx.fill(\n                ...makeArgs(\n                    (arg, idx) => (idx === 0 ? arg instanceof Path2D : idx === 1 ? typeof arg === \"string\" : false),\n                    [options.path, options.fillRule]\n                )\n            );\n        });\n\n        return this;\n    }\n\n    public stroke(options?: { path: Path2D }) {\n        this.history.push((ctx) => {\n            options?.path ? ctx.stroke(options.path) : ctx.stroke();\n        });\n\n        return this;\n    }\n\n    public setLineDash(segments: number[] = []) {\n        this.history.push((ctx) => {\n            ctx.setLineDash(segments);\n        });\n\n        return this;\n    }\n\n    public clip(options?: { fillRule?: \"evenodd\" | \"nonzero\"; path?: Path2D }) {\n        this.history.push((ctx) => {\n            if (!options) return ctx.clip();\n            ctx.clip(\n                ...makeArgs(\n                    (arg, idx) => (idx === 0 ? arg instanceof Path2D : idx === 1 ? typeof arg === \"string\" : false),\n                    [options.path, options.fillRule]\n                )\n            );\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ColorConfig.html":{"url":"interfaces/ColorConfig.html","title":"interface - ColorConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ColorConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/colors/ColorSwatches.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            color\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            force\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:     number[] | number | template literal type | template literal type | template literal type | template literal type | template literal type | template literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[] | number | template literal type | template literal type | template literal type | template literal type | template literal type | template literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        force\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        force:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IllustratorCollection } from \"../utils/IllustratorCollection\";\nimport { IllustratorColor } from \"./IllustratorColor\";\n\nexport interface ColorConfig {\n    color:\n        | number[]\n        | number\n        | `#${string}`\n        | `rgb(${number}, ${number}, ${number})`\n        | `rgba(${number}, ${number})`\n        | `cmyk(${number}%, ${number}%, ${number}%, ${number}%)`\n        | `hsl(${number}%, ${number}%, ${number}%)`\n        | `hsla(${number}%, ${number}%, ${number}%, ${number}%)`;\n    name: string;\n    force?: boolean;\n}\n\nexport class ColorSwatches {\n    #data = new IllustratorCollection();\n\n    public add(data: ColorConfig): IllustratorColor | false {\n        if (!data.name || typeof data.name !== \"string\") throw new TypeError(\"name is required\");\n        if (!data.color || typeof data.color !== \"string\") throw new TypeError(\"color is required\");\n        data.force ??= false;\n\n        if (this.#data.has(data.name) && !data.force) return false;\n\n        const color = new IllustratorColor(this, data);\n        this.#data.set(data.name, color);\n\n        return color;\n    }\n\n    public remove(name: string) {\n        return this.#data.delete(name);\n    }\n\n    public get(name: string) {\n        return this.#data.get(name);\n    }\n\n    public has(name: string) {\n        return this.#data.has(name);\n    }\n\n    public clear() {\n        this.#data.clear();\n    }\n\n    public count() {\n        return this.#data.size;\n    }\n\n    public random(): IllustratorColor;\n    public random(amount: number): IllustratorColor[];\n    public random(amount?: number): IllustratorColor | IllustratorColor[] {\n        return this.#data.random(amount as number);\n    }\n\n    public names() {\n        return this.#data.map((m) => m.name);\n    }\n\n    public toArray() {\n        return this.#data.array();\n    }\n\n    public toJSON() {\n        const data: Record = {};\n\n        for (const [name, color] of this.#data) {\n            data[name] = color;\n        }\n\n        return data;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ColorSwatches.html":{"url":"classes/ColorSwatches.html","title":"class - ColorSwatches","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ColorSwatches\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/colors/ColorSwatches.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                count\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                has\n                            \n                            \n                                    Public\n                                names\n                            \n                            \n                                    Public\n                                random\n                            \n                            \n                                    Public\n                                random\n                            \n                            \n                                    Public\n                                random\n                            \n                            \n                                    Public\n                                remove\n                            \n                            \n                                    Public\n                                toArray\n                            \n                            \n                                    Public\n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        add\n                        \n                    \n                \n            \n            \n                \n                    \n                    add(data: ColorConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/colors/ColorSwatches.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ColorConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IllustratorColor | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clear\n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in src/colors/ColorSwatches.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        count\n                        \n                    \n                \n            \n            \n                \n                    \n                    count()\n                \n            \n\n\n            \n                \n                    Defined in src/colors/ColorSwatches.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/colors/ColorSwatches.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        has\n                        \n                    \n                \n            \n            \n                \n                    \n                    has(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/colors/ColorSwatches.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        names\n                        \n                    \n                \n            \n            \n                \n                    \n                    names()\n                \n            \n\n\n            \n                \n                    Defined in src/colors/ColorSwatches.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        random\n                        \n                    \n                \n            \n            \n                \n                    \n                    random()\n                \n            \n\n\n            \n                \n                    Defined in src/colors/ColorSwatches.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         IllustratorColor\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        random\n                        \n                    \n                \n            \n            \n                \n                    \n                    random(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/colors/ColorSwatches.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IllustratorColor[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        random\n                        \n                    \n                \n            \n            \n                \n                    \n                    random(amount?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/colors/ColorSwatches.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IllustratorColor | []\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/colors/ColorSwatches.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toArray\n                        \n                    \n                \n            \n            \n                \n                    \n                    toArray()\n                \n            \n\n\n            \n                \n                    Defined in src/colors/ColorSwatches.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toJSON\n                        \n                    \n                \n            \n            \n                \n                    \n                    toJSON()\n                \n            \n\n\n            \n                \n                    Defined in src/colors/ColorSwatches.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Record\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IllustratorCollection } from \"../utils/IllustratorCollection\";\nimport { IllustratorColor } from \"./IllustratorColor\";\n\nexport interface ColorConfig {\n    color:\n        | number[]\n        | number\n        | `#${string}`\n        | `rgb(${number}, ${number}, ${number})`\n        | `rgba(${number}, ${number})`\n        | `cmyk(${number}%, ${number}%, ${number}%, ${number}%)`\n        | `hsl(${number}%, ${number}%, ${number}%)`\n        | `hsla(${number}%, ${number}%, ${number}%, ${number}%)`;\n    name: string;\n    force?: boolean;\n}\n\nexport class ColorSwatches {\n    #data = new IllustratorCollection();\n\n    public add(data: ColorConfig): IllustratorColor | false {\n        if (!data.name || typeof data.name !== \"string\") throw new TypeError(\"name is required\");\n        if (!data.color || typeof data.color !== \"string\") throw new TypeError(\"color is required\");\n        data.force ??= false;\n\n        if (this.#data.has(data.name) && !data.force) return false;\n\n        const color = new IllustratorColor(this, data);\n        this.#data.set(data.name, color);\n\n        return color;\n    }\n\n    public remove(name: string) {\n        return this.#data.delete(name);\n    }\n\n    public get(name: string) {\n        return this.#data.get(name);\n    }\n\n    public has(name: string) {\n        return this.#data.has(name);\n    }\n\n    public clear() {\n        this.#data.clear();\n    }\n\n    public count() {\n        return this.#data.size;\n    }\n\n    public random(): IllustratorColor;\n    public random(amount: number): IllustratorColor[];\n    public random(amount?: number): IllustratorColor | IllustratorColor[] {\n        return this.#data.random(amount as number);\n    }\n\n    public names() {\n        return this.#data.map((m) => m.name);\n    }\n\n    public toArray() {\n        return this.#data.array();\n    }\n\n    public toJSON() {\n        const data: Record = {};\n\n        for (const [name, color] of this.#data) {\n            data[name] = color;\n        }\n\n        return data;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ColorUtil.html":{"url":"classes/ColorUtil.html","title":"class - ColorUtil","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ColorUtil\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/ColorUtil.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                Colors\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                hexToRGBA\n                            \n                            \n                                    Static\n                                isHex\n                            \n                            \n                                    Static\n                                randomHex\n                            \n                            \n                                    Static\n                                resolveHex\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        Colors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n        DC_DEFAULT: \"#000000\",\n        DC_WHITE: \"#FFFFFF\",\n        DC_AQUA: \"#1ABC9C\",\n        DC_GREEN: \"#2ECC71\",\n        DC_BLUE: \"#3498DB\",\n        DC_YELLOW: \"#FFFF00\",\n        DC_PURPLE: \"#9B59B6\",\n        DC_LUMINOUS_VIVID_PINK: \"#E91E63\",\n        DC_GOLD: \"#F1C40F\",\n        DC_ORANGE: \"#E67E22\",\n        DC_RED: \"#E74C3C\",\n        DC_GREY: \"#95A5A6\",\n        DC_NAVY: \"#34495E\",\n        DC_DARK_AQUA: \"#11806A\",\n        DC_DARK_GREEN: \"#1F8B4C\",\n        DC_DARK_BLUE: \"#206694\",\n        DC_DARK_PURPLE: \"#71368A\",\n        DC_DARK_VIVID_PINK: \"#AD1457\",\n        DC_DARK_GOLD: \"#C27C0E\",\n        DC_DARK_ORANGE: \"#A84300\",\n        DC_DARK_RED: \"#992D22\",\n        DC_DARK_GREY: \"#979C9F\",\n        DC_DARKER_GREY: \"#7F8C8D\",\n        DC_LIGHT_GREY: \"#BCC0C0\",\n        DC_DARK_NAVY: \"#2C3E50\",\n        DC_BLURPLE: \"#7289DA\",\n        DC_DARK_BLURPLE: \"#4D5E94\",\n        DC_GREYPLE: \"#99AAB5\",\n        DC_DARK_BUT_NOT_BLACK: \"#2C2F33\",\n        DC_NOT_QUITE_BLACK: \"#23272A\",\n        aliceblue: \"#F0F8FF\",\n        antiquewhite: \"#FAEBD7\",\n        aqua: \"#00FFFF\",\n        aquamarine: \"#7FFFD4\",\n        azure: \"#F0FFFF\",\n        beige: \"#F5F5DC\",\n        bisque: \"#FFE4C4\",\n        black: \"#000000\",\n        blanchedalmond: \"#FFEBCD\",\n        blue: \"#0000FF\",\n        blueviolet: \"#8A2BE2\",\n        brown: \"#A52A2A\",\n        burlywood: \"#DEB887\",\n        cadetblue: \"#5F9EA0\",\n        chartreuse: \"#7FFF00\",\n        chocolate: \"#D2691E\",\n        coral: \"#FF7F50\",\n        cornflowerblue: \"#6495ED\",\n        cornsilk: \"#FFF8DC\",\n        crimson: \"#DC143C\",\n        cyan: \"#00FFFF\",\n        darkblue: \"#00008B\",\n        darkcyan: \"#008B8B\",\n        darkgoldenrod: \"#B8860B\",\n        darkgray: \"#A9A9A9\",\n        darkgreen: \"#006400\",\n        darkgrey: \"#A9A9A9\",\n        darkkhaki: \"#BDB76B\",\n        darkmagenta: \"#8B008B\",\n        darkolivegreen: \"#556B2F\",\n        darkorange: \"#FF8C00\",\n        darkorchid: \"#9932CC\",\n        darkred: \"#8B0000\",\n        darksalmon: \"#E9967A\",\n        darkseagreen: \"#8FBC8F\",\n        darkslateblue: \"#483D8B\",\n        darkslategray: \"#2F4F4F\",\n        darkslategrey: \"#2F4F4F\",\n        darkturquoise: \"#00CED1\",\n        darkviolet: \"#9400D3\",\n        deeppink: \"#FF1493\",\n        deepskyblue: \"#00BFFF\",\n        dimgray: \"#696969\",\n        dimgrey: \"#696969\",\n        dodgerblue: \"#1E90FF\",\n        firebrick: \"#B22222\",\n        floralwhite: \"#FFFAF0\",\n        forestgreen: \"#228B22\",\n        fuchsia: \"#FF00FF\",\n        gainsboro: \"#DCDCDC\",\n        ghostwhite: \"#F8F8FF\",\n        goldenrod: \"#DAA520\",\n        gold: \"#FFD700\",\n        gray: \"#808080\",\n        green: \"#008000\",\n        greenyellow: \"#ADFF2F\",\n        grey: \"#808080\",\n        honeydew: \"#F0FFF0\",\n        hotpink: \"#FF69B4\",\n        indianred: \"#CD5C5C\",\n        indigo: \"#4B0082\",\n        ivory: \"#FFFFF0\",\n        khaki: \"#F0E68C\",\n        lavenderblush: \"#FFF0F5\",\n        lavender: \"#E6E6FA\",\n        lawngreen: \"#7CFC00\",\n        lemonchiffon: \"#FFFACD\",\n        lightblue: \"#ADD8E6\",\n        lightcoral: \"#F08080\",\n        lightcyan: \"#E0FFFF\",\n        lightgoldenrodyellow: \"#FAFAD2\",\n        lightgray: \"#D3D3D3\",\n        lightgreen: \"#90EE90\",\n        lightgrey: \"#D3D3D3\",\n        lightpink: \"#FFB6C1\",\n        lightsalmon: \"#FFA07A\",\n        lightseagreen: \"#20B2AA\",\n        lightskyblue: \"#87CEFA\",\n        lightslategray: \"#778899\",\n        lightslategrey: \"#778899\",\n        lightsteelblue: \"#B0C4DE\",\n        lightyellow: \"#FFFFE0\",\n        lime: \"#00FF00\",\n        limegreen: \"#32CD32\",\n        linen: \"#FAF0E6\",\n        magenta: \"#FF00FF\",\n        maroon: \"#800000\",\n        mediumaquamarine: \"#66CDAA\",\n        mediumblue: \"#0000CD\",\n        mediumorchid: \"#BA55D3\",\n        mediumpurple: \"#9370DB\",\n        mediumseagreen: \"#3CB371\",\n        mediumslateblue: \"#7B68EE\",\n        mediumspringgreen: \"#00FA9A\",\n        mediumturquoise: \"#48D1CC\",\n        mediumvioletred: \"#C71585\",\n        midnightblue: \"#191970\",\n        mintcream: \"#F5FFFA\",\n        mistyrose: \"#FFE4E1\",\n        moccasin: \"#FFE4B5\",\n        navajowhite: \"#FFDEAD\",\n        navy: \"#000080\",\n        oldlace: \"#FDF5E6\",\n        olive: \"#808000\",\n        olivedrab: \"#6B8E23\",\n        orange: \"#FFA500\",\n        orangered: \"#FF4500\",\n        orchid: \"#DA70D6\",\n        palegoldenrod: \"#EEE8AA\",\n        palegreen: \"#98FB98\",\n        paleturquoise: \"#AFEEEE\",\n        palevioletred: \"#DB7093\",\n        papayawhip: \"#FFEFD5\",\n        peachpuff: \"#FFDAB9\",\n        peru: \"#CD853F\",\n        pink: \"#FFC0CB\",\n        plum: \"#DDA0DD\",\n        powderblue: \"#B0E0E6\",\n        purple: \"#800080\",\n        rebeccapurple: \"#663399\",\n        red: \"#FF0000\",\n        rosybrown: \"#BC8F8F\",\n        royalblue: \"#4169E1\",\n        saddlebrown: \"#8B4513\",\n        salmon: \"#FA8072\",\n        sandybrown: \"#F4A460\",\n        seagreen: \"#2E8B57\",\n        seashell: \"#FFF5EE\",\n        sienna: \"#A0522D\",\n        silver: \"#C0C0C0\",\n        skyblue: \"#87CEEB\",\n        slateblue: \"#6A5ACD\",\n        slategray: \"#708090\",\n        slategrey: \"#708090\",\n        snow: \"#FFFAFA\",\n        springgreen: \"#00FF7F\",\n        steelblue: \"#4682B4\",\n        tan: \"#D2B48C\",\n        teal: \"#008080\",\n        thistle: \"#D8BFD8\",\n        tomato: \"#FF6347\",\n        turquoise: \"#40E0D0\",\n        violet: \"#EE82EE\",\n        wheat: \"#F5DEB3\",\n        white: \"#FFFFFF\",\n        whitesmoke: \"#F5F5F5\",\n        yellow: \"#FFFF00\",\n        yellowgreen: \"#9ACD32\"\n    }\n                    \n                \n                    \n                        \n                                Defined in src/utils/ColorUtil.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        hexToRGBA\n                        \n                    \n                \n            \n            \n                \n                    \n                    hexToRGBA(hex: string)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/ColorUtil.ts:191\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    hex\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        isHex\n                        \n                    \n                \n            \n            \n                \n                    \n                    isHex(hex: string)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/ColorUtil.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    hex\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     template literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        randomHex\n                        \n                    \n                \n            \n            \n                \n                    \n                    randomHex()\n                \n            \n\n\n            \n                \n                    Defined in src/utils/ColorUtil.ts:219\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     template literal type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        resolveHex\n                        \n                    \n                \n            \n            \n                \n                    \n                    resolveHex(color:  | \"RANDOM\")\n                \n            \n\n\n            \n                \n                    Defined in src/utils/ColorUtil.ts:225\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                             | \"RANDOM\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class ColorUtil extends null {\n    private constructor() {\n        /* noop */\n    }\n\n    static Colors = {\n        DC_DEFAULT: \"#000000\",\n        DC_WHITE: \"#FFFFFF\",\n        DC_AQUA: \"#1ABC9C\",\n        DC_GREEN: \"#2ECC71\",\n        DC_BLUE: \"#3498DB\",\n        DC_YELLOW: \"#FFFF00\",\n        DC_PURPLE: \"#9B59B6\",\n        DC_LUMINOUS_VIVID_PINK: \"#E91E63\",\n        DC_GOLD: \"#F1C40F\",\n        DC_ORANGE: \"#E67E22\",\n        DC_RED: \"#E74C3C\",\n        DC_GREY: \"#95A5A6\",\n        DC_NAVY: \"#34495E\",\n        DC_DARK_AQUA: \"#11806A\",\n        DC_DARK_GREEN: \"#1F8B4C\",\n        DC_DARK_BLUE: \"#206694\",\n        DC_DARK_PURPLE: \"#71368A\",\n        DC_DARK_VIVID_PINK: \"#AD1457\",\n        DC_DARK_GOLD: \"#C27C0E\",\n        DC_DARK_ORANGE: \"#A84300\",\n        DC_DARK_RED: \"#992D22\",\n        DC_DARK_GREY: \"#979C9F\",\n        DC_DARKER_GREY: \"#7F8C8D\",\n        DC_LIGHT_GREY: \"#BCC0C0\",\n        DC_DARK_NAVY: \"#2C3E50\",\n        DC_BLURPLE: \"#7289DA\",\n        DC_DARK_BLURPLE: \"#4D5E94\",\n        DC_GREYPLE: \"#99AAB5\",\n        DC_DARK_BUT_NOT_BLACK: \"#2C2F33\",\n        DC_NOT_QUITE_BLACK: \"#23272A\",\n        aliceblue: \"#F0F8FF\",\n        antiquewhite: \"#FAEBD7\",\n        aqua: \"#00FFFF\",\n        aquamarine: \"#7FFFD4\",\n        azure: \"#F0FFFF\",\n        beige: \"#F5F5DC\",\n        bisque: \"#FFE4C4\",\n        black: \"#000000\",\n        blanchedalmond: \"#FFEBCD\",\n        blue: \"#0000FF\",\n        blueviolet: \"#8A2BE2\",\n        brown: \"#A52A2A\",\n        burlywood: \"#DEB887\",\n        cadetblue: \"#5F9EA0\",\n        chartreuse: \"#7FFF00\",\n        chocolate: \"#D2691E\",\n        coral: \"#FF7F50\",\n        cornflowerblue: \"#6495ED\",\n        cornsilk: \"#FFF8DC\",\n        crimson: \"#DC143C\",\n        cyan: \"#00FFFF\",\n        darkblue: \"#00008B\",\n        darkcyan: \"#008B8B\",\n        darkgoldenrod: \"#B8860B\",\n        darkgray: \"#A9A9A9\",\n        darkgreen: \"#006400\",\n        darkgrey: \"#A9A9A9\",\n        darkkhaki: \"#BDB76B\",\n        darkmagenta: \"#8B008B\",\n        darkolivegreen: \"#556B2F\",\n        darkorange: \"#FF8C00\",\n        darkorchid: \"#9932CC\",\n        darkred: \"#8B0000\",\n        darksalmon: \"#E9967A\",\n        darkseagreen: \"#8FBC8F\",\n        darkslateblue: \"#483D8B\",\n        darkslategray: \"#2F4F4F\",\n        darkslategrey: \"#2F4F4F\",\n        darkturquoise: \"#00CED1\",\n        darkviolet: \"#9400D3\",\n        deeppink: \"#FF1493\",\n        deepskyblue: \"#00BFFF\",\n        dimgray: \"#696969\",\n        dimgrey: \"#696969\",\n        dodgerblue: \"#1E90FF\",\n        firebrick: \"#B22222\",\n        floralwhite: \"#FFFAF0\",\n        forestgreen: \"#228B22\",\n        fuchsia: \"#FF00FF\",\n        gainsboro: \"#DCDCDC\",\n        ghostwhite: \"#F8F8FF\",\n        goldenrod: \"#DAA520\",\n        gold: \"#FFD700\",\n        gray: \"#808080\",\n        green: \"#008000\",\n        greenyellow: \"#ADFF2F\",\n        grey: \"#808080\",\n        honeydew: \"#F0FFF0\",\n        hotpink: \"#FF69B4\",\n        indianred: \"#CD5C5C\",\n        indigo: \"#4B0082\",\n        ivory: \"#FFFFF0\",\n        khaki: \"#F0E68C\",\n        lavenderblush: \"#FFF0F5\",\n        lavender: \"#E6E6FA\",\n        lawngreen: \"#7CFC00\",\n        lemonchiffon: \"#FFFACD\",\n        lightblue: \"#ADD8E6\",\n        lightcoral: \"#F08080\",\n        lightcyan: \"#E0FFFF\",\n        lightgoldenrodyellow: \"#FAFAD2\",\n        lightgray: \"#D3D3D3\",\n        lightgreen: \"#90EE90\",\n        lightgrey: \"#D3D3D3\",\n        lightpink: \"#FFB6C1\",\n        lightsalmon: \"#FFA07A\",\n        lightseagreen: \"#20B2AA\",\n        lightskyblue: \"#87CEFA\",\n        lightslategray: \"#778899\",\n        lightslategrey: \"#778899\",\n        lightsteelblue: \"#B0C4DE\",\n        lightyellow: \"#FFFFE0\",\n        lime: \"#00FF00\",\n        limegreen: \"#32CD32\",\n        linen: \"#FAF0E6\",\n        magenta: \"#FF00FF\",\n        maroon: \"#800000\",\n        mediumaquamarine: \"#66CDAA\",\n        mediumblue: \"#0000CD\",\n        mediumorchid: \"#BA55D3\",\n        mediumpurple: \"#9370DB\",\n        mediumseagreen: \"#3CB371\",\n        mediumslateblue: \"#7B68EE\",\n        mediumspringgreen: \"#00FA9A\",\n        mediumturquoise: \"#48D1CC\",\n        mediumvioletred: \"#C71585\",\n        midnightblue: \"#191970\",\n        mintcream: \"#F5FFFA\",\n        mistyrose: \"#FFE4E1\",\n        moccasin: \"#FFE4B5\",\n        navajowhite: \"#FFDEAD\",\n        navy: \"#000080\",\n        oldlace: \"#FDF5E6\",\n        olive: \"#808000\",\n        olivedrab: \"#6B8E23\",\n        orange: \"#FFA500\",\n        orangered: \"#FF4500\",\n        orchid: \"#DA70D6\",\n        palegoldenrod: \"#EEE8AA\",\n        palegreen: \"#98FB98\",\n        paleturquoise: \"#AFEEEE\",\n        palevioletred: \"#DB7093\",\n        papayawhip: \"#FFEFD5\",\n        peachpuff: \"#FFDAB9\",\n        peru: \"#CD853F\",\n        pink: \"#FFC0CB\",\n        plum: \"#DDA0DD\",\n        powderblue: \"#B0E0E6\",\n        purple: \"#800080\",\n        rebeccapurple: \"#663399\",\n        red: \"#FF0000\",\n        rosybrown: \"#BC8F8F\",\n        royalblue: \"#4169E1\",\n        saddlebrown: \"#8B4513\",\n        salmon: \"#FA8072\",\n        sandybrown: \"#F4A460\",\n        seagreen: \"#2E8B57\",\n        seashell: \"#FFF5EE\",\n        sienna: \"#A0522D\",\n        silver: \"#C0C0C0\",\n        skyblue: \"#87CEEB\",\n        slateblue: \"#6A5ACD\",\n        slategray: \"#708090\",\n        slategrey: \"#708090\",\n        snow: \"#FFFAFA\",\n        springgreen: \"#00FF7F\",\n        steelblue: \"#4682B4\",\n        tan: \"#D2B48C\",\n        teal: \"#008080\",\n        thistle: \"#D8BFD8\",\n        tomato: \"#FF6347\",\n        turquoise: \"#40E0D0\",\n        violet: \"#EE82EE\",\n        wheat: \"#F5DEB3\",\n        white: \"#FFFFFF\",\n        whitesmoke: \"#F5F5F5\",\n        yellow: \"#FFFF00\",\n        yellowgreen: \"#9ACD32\"\n    };\n\n    public static isHex(hex: string): hex is `#${string}` {\n        return /^#(([\\dA-Fa-f]{3}){1,2}|([\\dA-Fa-f]{4}){1,2})$/.test(hex);\n    }\n\n    public static hexToRGBA(hex: string) {\n        let c: string[] = hex.substring(1).split(\"\");\n\n        if (!ColorUtil.isHex(hex)) {\n            return new Array(4).fill(\"0\");\n        }\n\n        switch (c.length) {\n            case 3:\n                c = [c[0] + c[0], c[1] + c[1], c[2] + c[2], \"ff\"];\n                break;\n            case 4:\n                c = [c[0] + c[0], c[1] + c[1], c[2] + c[2], c[3] + c[3]];\n                break;\n            case 6:\n                c = [c[0] + c[1], c[2] + c[3], c[4] + c[5], \"ff\"];\n                break;\n            case 8:\n                c = [c[0] + c[1], c[2] + c[3], c[4] + c[5], c[6] + c[7]];\n                break;\n        }\n\n        c = c.map((char) => parseInt(char, 16).toString());\n        c[3] = (Math.round((parseInt(c[3], 10) / 255) * 100) / 100).toString();\n        if (c[3] === \"1\") c.pop();\n        return c;\n    }\n\n    public static randomHex(): `#${string}` {\n        return `#${Math.floor(Math.random() * 16777216)\n            .toString(16)\n            .padStart(6, \"0\")}`;\n    }\n\n    public static resolveHex(color: keyof typeof ColorUtil.Colors | \"RANDOM\") {\n        if (color === \"RANDOM\") return ColorUtil.randomHex();\n        return ColorUtil.Colors[color] ?? \"#000000\";\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Colors.html":{"url":"classes/Colors.html","title":"class - Colors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Colors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/colors/Colors.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                illustrator\n                            \n                            \n                                    Public\n                                swatches\n                            \n                            \n                                    Public\n                                utils\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(illustrator: Illustrator)\n                    \n                \n                        \n                            \n                                Defined in src/colors/Colors.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        illustrator\n                                                  \n                                                        \n                                                                        Illustrator\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        illustrator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Illustrator\n\n                    \n                \n                    \n                        \n                                Defined in src/colors/Colors.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        swatches\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ColorSwatches()\n                    \n                \n                    \n                        \n                                Defined in src/colors/Colors.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        utils\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ColorUtil\n                    \n                \n                    \n                        \n                                Defined in src/colors/Colors.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Illustrator } from \"../illustrator/Illustrator\";\nimport { ColorUtil } from \"../utils/ColorUtil\";\nimport { ColorSwatches } from \"./ColorSwatches\";\n\nexport class Colors {\n    public utils = ColorUtil;\n    public swatches = new ColorSwatches();\n    public constructor(public readonly illustrator: Illustrator) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConvolutionOptions.html":{"url":"interfaces/ConvolutionOptions.html","title":"interface - ConvolutionOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ConvolutionOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/filters/ConvolutionFilter.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            iterations\n                                        \n                                \n                                \n                                        \n                                            matrix\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            opaque\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sx\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sy\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        iterations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        iterations:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        matrix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        matrix:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        opaque\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        opaque:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sx\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sx:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sy:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { SKRSContext2D } from \"@napi-rs/canvas\";\nimport { ToolBox } from \"../base/ToolBox\";\n\nexport interface ConvolutionOptions {\n    sx?: number;\n    sy?: number;\n    opaque?: boolean;\n    matrix: Array;\n    iterations?: number;\n}\n\nexport class ConvolutionTool extends ToolBox {\n    public convolute(options: ConvolutionOptions) {\n        this.history.push(async (ctx) => {\n            options.iterations ??= 1;\n            if (options.iterations  & { ctx: SKRSContext2D }) {\n        const side = Math.round(Math.sqrt(options.matrix.length));\n        const halfSide = Math.floor(side / 2);\n        const pixels = options.ctx.getImageData(\n            options.sx,\n            options.sy,\n            options.ctx.canvas.width,\n            options.ctx.canvas.height\n        );\n        const src = pixels.data;\n        const sw = pixels.width;\n        const sh = pixels.height;\n        const w = sw;\n        const h = sh;\n        const output = options.ctx.getImageData(\n            options.sx,\n            options.sy,\n            options.ctx.canvas.width,\n            options.ctx.canvas.height\n        );\n        const dst = output.data;\n        const alphaFac = options.opaque ? 1 : 0;\n\n        for (let y = 0; y = 0 && scy = 0 && scx \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConvolutionTool.html":{"url":"classes/ConvolutionTool.html","title":"class - ConvolutionTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConvolutionTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/filters/ConvolutionFilter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ToolBox\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                convolute\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    matrices\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        convolute\n                        \n                    \n                \n            \n            \n                \n                    \n                    convolute(options: ConvolutionOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/ConvolutionFilter.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ConvolutionOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        matrices\n                    \n                \n\n                \n                    \n                        getmatrices()\n                    \n                \n                            \n                                \n                                    Defined in src/toolbox/filters/ConvolutionFilter.ts:90\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { SKRSContext2D } from \"@napi-rs/canvas\";\nimport { ToolBox } from \"../base/ToolBox\";\n\nexport interface ConvolutionOptions {\n    sx?: number;\n    sy?: number;\n    opaque?: boolean;\n    matrix: Array;\n    iterations?: number;\n}\n\nexport class ConvolutionTool extends ToolBox {\n    public convolute(options: ConvolutionOptions) {\n        this.history.push(async (ctx) => {\n            options.iterations ??= 1;\n            if (options.iterations  & { ctx: SKRSContext2D }) {\n        const side = Math.round(Math.sqrt(options.matrix.length));\n        const halfSide = Math.floor(side / 2);\n        const pixels = options.ctx.getImageData(\n            options.sx,\n            options.sy,\n            options.ctx.canvas.width,\n            options.ctx.canvas.height\n        );\n        const src = pixels.data;\n        const sw = pixels.width;\n        const sh = pixels.height;\n        const w = sw;\n        const h = sh;\n        const output = options.ctx.getImageData(\n            options.sx,\n            options.sy,\n            options.ctx.canvas.width,\n            options.ctx.canvas.height\n        );\n        const dst = output.data;\n        const alphaFac = options.opaque ? 1 : 0;\n\n        for (let y = 0; y = 0 && scy = 0 && scx \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreateLayerOptions.html":{"url":"interfaces/CreateLayerOptions.html","title":"interface - CreateLayerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreateLayerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/layer/LayerManager.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            config\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            position\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        config:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IllustratorCollection } from \"../utils/IllustratorCollection\";\nimport { generateRandomId } from \"../utils/randomId\";\nimport { Illustrator } from \"../illustrator/Illustrator\";\nimport { Layer, LayerToolHistory } from \"./Layer\";\n\nexport interface CreateLayerOptions {\n    name: string;\n    position?: number;\n    config?: {\n        height?: number;\n        width?: number;\n    };\n}\n\nexport interface LayerWrapper {\n    layer: Layer;\n    name: string;\n    id: number;\n    position: number;\n}\n\nexport type LayerResolvable = number | Layer | string;\n\nexport class LayerManager {\n    #layers = new IllustratorCollection();\n\n    public constructor(public readonly illustrator: Illustrator) {}\n\n    public count() {\n        return this.#layers.size;\n    }\n\n    public createLayer(options: CreateLayerOptions) {\n        if (!options.name || typeof options.name !== \"string\") throw new Error(\"Layer name is required\");\n        if (this.#layers.findKey((x) => x.name === options.name))\n            throw new Error(\"Layer with that name already exists\");\n        const id = generateRandomId();\n        const layerObj: LayerWrapper = {\n            id,\n            layer: new Layer(this, id, options.config),\n            name: options.name,\n            position: options.position ?? this.count() + 1\n        };\n\n        this.#layers.set(layerObj.id, layerObj);\n        // rearrange\n        layerObj.layer.setPosition(layerObj.position);\n\n        return layerObj.layer;\n    }\n\n    public duplicateLayer(layer: Layer, history: LayerToolHistory, options: CreateLayerOptions) {\n        if (!options.name || typeof options.name !== \"string\") throw new Error(\"Layer name is required\");\n        if (this.#layers.findKey((x) => x.name === options.name))\n            throw new Error(\"Layer with that name already exists\");\n        const id = generateRandomId();\n        const layerObj: LayerWrapper = {\n            id,\n            layer: new Layer(this, id, options.config),\n            name: options.name,\n            position: options.position ?? this.count() + 1\n        };\n\n        layerObj.layer.setHistory(history);\n\n        this.#layers.set(layerObj.id, layerObj);\n        layerObj.layer.setPosition(layer.position + 1);\n\n        return layerObj.layer;\n    }\n\n    public deleteLayer(layer: LayerResolvable) {\n        const id = this.resolveId(layer);\n        if (id == null) return false;\n        return this.#layers.delete(id);\n    }\n\n    public hasLayer(layer: LayerResolvable) {\n        const id = this.resolveId(layer);\n        return id != null;\n    }\n\n    public getLayer(layer: LayerResolvable) {\n        const l = this.resolveLayer(layer);\n        if (l == null) return null;\n        return l;\n    }\n\n    public getLayerPosition(layer: LayerResolvable) {\n        const l = this.resolve(layer);\n        if (!l) return -1;\n        return l.position;\n    }\n\n    public setLayerPosition(layer: LayerResolvable, position: number) {\n        if (position  l.position >= position);\n        layersToBeUpdated.forEach((l) => {\n            this.#layers.set(l.id, {\n                ...l,\n                position: l.position + 1\n            });\n        });\n        this.#layers.set(l.id, {\n            ...l,\n            position\n        });\n        return this.#layers.get(l.id)?.position ?? -1;\n    }\n\n    public resolveLayer(layer: LayerResolvable) {\n        return this.resolve(layer)?.layer;\n    }\n\n    public resolveId(layer: LayerResolvable) {\n        return this.resolve(layer)?.id;\n    }\n\n    public resolve(layer: LayerResolvable) {\n        if (layer instanceof Layer) return this.#layers.get(layer.id);\n        if (typeof layer === \"number\") return this.#layers.get(layer);\n        if (typeof layer === \"string\") return this.#layers.find((l) => l.name === layer);\n    }\n\n    public getAllLayers(ordered = true) {\n        return ordered ? this.#layers.array().sort((a, b) => b.position - a.position) : this.#layers.array();\n    }\n\n    public iterate() {\n        return this.#layers.values();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CubicBezierCurveOptions.html":{"url":"interfaces/CubicBezierCurveOptions.html","title":"interface - CubicBezierCurveOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CubicBezierCurveOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/shapes/Line.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            firstControlPointX\n                                        \n                                \n                                \n                                        \n                                            firstControlPointY\n                                        \n                                \n                                \n                                        \n                                            secondControlPointX\n                                        \n                                \n                                \n                                        \n                                            secondControlPointY\n                                        \n                                \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        firstControlPointX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstControlPointX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstControlPointY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstControlPointY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secondControlPointX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secondControlPointX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secondControlPointY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secondControlPointY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseShapeTool } from \"../base/BaseShapeTool\";\n\nexport interface DrawArcOptions {\n    x: number;\n    y: number;\n    radius: number;\n    startAngle: number;\n    endAngle: number;\n    counterclockwise?: boolean;\n}\n\nexport interface ArcToPoint {\n    x1: number;\n    y1: number;\n    x2: number;\n    y2: number;\n    radius: number;\n}\n\nexport interface QuadraticBezierCurveOptions {\n    controlPointX: number;\n    controlPointY: number;\n    x: number;\n    y: number;\n}\n\nexport interface CubicBezierCurveOptions {\n    firstControlPointX: number;\n    firstControlPointY: number;\n    secondControlPointX: number;\n    secondControlPointY: number;\n    x: number;\n    y: number;\n}\n\nexport class LineTool extends BaseShapeTool {\n    public draw(from: number, to: number) {\n        this.history.push((ctx) => {\n            ctx.lineTo(from, to);\n        });\n\n        return this;\n    }\n\n    public arc(options: DrawArcOptions) {\n        this.history.push((ctx) => {\n            ctx.arc(\n                options.x,\n                options.y,\n                options.radius,\n                options.startAngle,\n                options.endAngle,\n                !!options.counterclockwise\n            );\n        });\n\n        return this;\n    }\n\n    public arcTo(options: ArcToPoint) {\n        this.history.push((ctx) => {\n            ctx.arcTo(options.x1, options.y1, options.x2, options.y2, options.radius);\n        });\n\n        return this;\n    }\n\n    public quadraticBezierCurve(options: QuadraticBezierCurveOptions) {\n        this.history.push((ctx) => {\n            ctx.quadraticCurveTo(options.controlPointX, options.controlPointY, options.x, options.y);\n        });\n\n        return this;\n    }\n\n    public cubicBezierCurve(options: CubicBezierCurveOptions) {\n        this.history.push((ctx) => {\n            ctx.bezierCurveTo(\n                options.firstControlPointX,\n                options.firstControlPointY,\n                options.secondControlPointX,\n                options.secondControlPointY,\n                options.x,\n                options.y\n            );\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DataSource.html":{"url":"classes/DataSource.html","title":"class - DataSource","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DataSource\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/DataSource.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addData\n                            \n                            \n                                    Public\n                                clone\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                loadData\n                            \n                            \n                                    Public\n                                removeData\n                            \n                            \n                                    Public\n                                toArray\n                            \n                            \n                                    Public\n                                toJSON\n                            \n                            \n                                    Public\n                                toString\n                            \n                            \n                                    Public\n                                \n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/data/DataSource.ts:33\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addData\n                        \n                    \n                \n            \n            \n                \n                    \n                    addData(data: IllustratorDataSource)\n                \n            \n\n\n            \n                \n                    Defined in src/data/DataSource.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                IllustratorDataSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clone\n                        \n                    \n                \n            \n            \n                \n                    \n                    clone()\n                \n            \n\n\n            \n                \n                    Defined in src/data/DataSource.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         DataSource\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(nameOrFn: string | )\n                \n            \n\n\n            \n                \n                    Defined in src/data/DataSource.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nameOrFn\n                                    \n                                            string | \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        loadData\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadData(data: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/data/DataSource.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeData\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeData(nameOrFn: string | )\n                \n            \n\n\n            \n                \n                    Defined in src/data/DataSource.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nameOrFn\n                                    \n                                            string | \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toArray\n                        \n                    \n                \n            \n            \n                \n                    \n                    toArray()\n                \n            \n\n\n            \n                \n                    Defined in src/data/DataSource.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toJSON\n                        \n                    \n                \n            \n            \n                \n                    \n                    toJSON()\n                \n            \n\n\n            \n                \n                    Defined in src/data/DataSource.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toString\n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in src/data/DataSource.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     template literal type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ()\n                \n            \n\n\n            \n                \n                    Defined in src/data/DataSource.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         IterableIterator\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IllustratorImageSource } from \"../image/ImageLoader\";\n\nexport interface IllustratorDataSource {\n    name: string;\n    type: \"text\" | \"image\";\n    data: TextDataSource | ImageDataSource;\n}\n\nexport interface TextDataSource {\n    value: string;\n    config: {\n        x: number;\n        y: number;\n        maxWidth?: number;\n        font: string;\n        fontPath?: string;\n    };\n}\n\n// TODO: template api\nexport interface ImageDataSource {\n    value: IllustratorImageSource;\n    config: {\n        x: number;\n        y: number;\n        width: number;\n        height: number;\n        radius?: number;\n    };\n}\n\nexport class DataSource {\n    public data: Array = [];\n\n    public loadData(data: Array) {\n        if (!Array.isArray(data)) throw new TypeError(\"data source must be array\");\n        this.data = data;\n    }\n\n    public addData(data: IllustratorDataSource) {\n        this.data.push(data);\n    }\n\n    public removeData(nameOrFn: string | ((ctx: IllustratorDataSource) => boolean)) {\n        if (typeof nameOrFn === \"string\") this.data = this.data.filter((ds) => ds.name === nameOrFn);\n        if (typeof nameOrFn === \"function\") this.data = this.data.filter(nameOrFn);\n        throw new Error(\"invalid parameter\");\n    }\n\n    public get(nameOrFn: string | ((ctx: IllustratorDataSource) => boolean)) {\n        return this.data.find(typeof nameOrFn === \"function\" ? nameOrFn : (fn) => fn.name === nameOrFn);\n    }\n\n    public toJSON() {\n        return this.data;\n    }\n\n    public toArray() {\n        return this.data;\n    }\n\n    public toString(): `DataSource` {\n        return `DataSource`;\n    }\n\n    public clone() {\n        const ds = new DataSource();\n        ds.loadData(this.data.slice());\n        return ds;\n    }\n\n    public *[Symbol.iterator](): IterableIterator {\n        yield* this.data ?? [];\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DrawArcOptions.html":{"url":"interfaces/DrawArcOptions.html","title":"interface - DrawArcOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DrawArcOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/shapes/Line.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            counterclockwise\n                                        \n                                \n                                \n                                        \n                                            endAngle\n                                        \n                                \n                                \n                                        \n                                            radius\n                                        \n                                \n                                \n                                        \n                                            startAngle\n                                        \n                                \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        counterclockwise\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        counterclockwise:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endAngle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        endAngle:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        radius\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        radius:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startAngle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startAngle:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseShapeTool } from \"../base/BaseShapeTool\";\n\nexport interface DrawArcOptions {\n    x: number;\n    y: number;\n    radius: number;\n    startAngle: number;\n    endAngle: number;\n    counterclockwise?: boolean;\n}\n\nexport interface ArcToPoint {\n    x1: number;\n    y1: number;\n    x2: number;\n    y2: number;\n    radius: number;\n}\n\nexport interface QuadraticBezierCurveOptions {\n    controlPointX: number;\n    controlPointY: number;\n    x: number;\n    y: number;\n}\n\nexport interface CubicBezierCurveOptions {\n    firstControlPointX: number;\n    firstControlPointY: number;\n    secondControlPointX: number;\n    secondControlPointY: number;\n    x: number;\n    y: number;\n}\n\nexport class LineTool extends BaseShapeTool {\n    public draw(from: number, to: number) {\n        this.history.push((ctx) => {\n            ctx.lineTo(from, to);\n        });\n\n        return this;\n    }\n\n    public arc(options: DrawArcOptions) {\n        this.history.push((ctx) => {\n            ctx.arc(\n                options.x,\n                options.y,\n                options.radius,\n                options.startAngle,\n                options.endAngle,\n                !!options.counterclockwise\n            );\n        });\n\n        return this;\n    }\n\n    public arcTo(options: ArcToPoint) {\n        this.history.push((ctx) => {\n            ctx.arcTo(options.x1, options.y1, options.x2, options.y2, options.radius);\n        });\n\n        return this;\n    }\n\n    public quadraticBezierCurve(options: QuadraticBezierCurveOptions) {\n        this.history.push((ctx) => {\n            ctx.quadraticCurveTo(options.controlPointX, options.controlPointY, options.x, options.y);\n        });\n\n        return this;\n    }\n\n    public cubicBezierCurve(options: CubicBezierCurveOptions) {\n        this.history.push((ctx) => {\n            ctx.bezierCurveTo(\n                options.firstControlPointX,\n                options.firstControlPointY,\n                options.secondControlPointX,\n                options.secondControlPointY,\n                options.x,\n                options.y\n            );\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DrawEllipseOptions.html":{"url":"interfaces/DrawEllipseOptions.html","title":"interface - DrawEllipseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DrawEllipseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/shapes/Ellipse.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            counterclockwise\n                                        \n                                \n                                \n                                        \n                                            endAngle\n                                        \n                                \n                                \n                                        \n                                            radiusX\n                                        \n                                \n                                \n                                        \n                                            radiusY\n                                        \n                                \n                                \n                                        \n                                            rotation\n                                        \n                                \n                                \n                                        \n                                            startAngle\n                                        \n                                \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        counterclockwise\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        counterclockwise:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endAngle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        endAngle:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        radiusX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        radiusX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        radiusY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        radiusY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rotation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rotation:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startAngle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startAngle:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseShapeTool } from \"../base/BaseShapeTool\";\n\nexport interface DrawEllipseOptions {\n    x: number;\n    y: number;\n    radiusX: number;\n    radiusY: number;\n    rotation: number;\n    startAngle: number;\n    endAngle: number;\n    counterclockwise?: boolean;\n}\n\nexport type DrawCircleOptions = Omit & { radius: number };\n\nexport class EllipseTool extends BaseShapeTool {\n    public draw(options: DrawEllipseOptions) {\n        this.history.push((ctx) => {\n            options.counterclockwise ??= false;\n            ctx.ellipse(\n                options.x,\n                options.y,\n                options.radiusX,\n                options.radiusY,\n                options.rotation,\n                options.startAngle,\n                options.endAngle,\n                options.counterclockwise\n            );\n        });\n\n        return this;\n    }\n\n    public drawCircle(options: DrawCircleOptions) {\n        this.history.push((ctx) => {\n            options.counterclockwise ??= false;\n            ctx.arc(\n                options.x,\n                options.y,\n                options.radius,\n                options.startAngle,\n                options.endAngle,\n                options.counterclockwise\n            );\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EllipseTool.html":{"url":"classes/EllipseTool.html","title":"class - EllipseTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EllipseTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/shapes/Ellipse.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseShapeTool\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                drawCircle\n                            \n                            \n                                    Public\n                                addPoint\n                            \n                            \n                                    Public\n                                clip\n                            \n                            \n                                    Public\n                                fill\n                            \n                            \n                                    Public\n                                move\n                            \n                            \n                                    Public\n                                removePoint\n                            \n                            \n                                    Public\n                                setDashOffset\n                            \n                            \n                                    Public\n                                setFillColor\n                            \n                            \n                                    Public\n                                setLineCap\n                            \n                            \n                                    Public\n                                setLineDash\n                            \n                            \n                                    Public\n                                setLineJoinStyle\n                            \n                            \n                                    Public\n                                setLineWidth\n                            \n                            \n                                    Public\n                                setMiterLimit\n                            \n                            \n                                    Public\n                                setStrokeColor\n                            \n                            \n                                    Public\n                                stroke\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        draw\n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(options: DrawEllipseOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/shapes/Ellipse.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                DrawEllipseOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        drawCircle\n                        \n                    \n                \n            \n            \n                \n                    \n                    drawCircle(options: DrawCircleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/shapes/Ellipse.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                DrawCircleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addPoint\n                        \n                    \n                \n            \n            \n                \n                    \n                    addPoint()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:62\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clip\n                        \n                    \n                \n            \n            \n                \n                    \n                    clip(options?: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:116\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fill\n                        \n                    \n                \n            \n            \n                \n                    \n                    fill(options?: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:86\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        move\n                        \n                    \n                \n            \n            \n                \n                    \n                    move(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:78\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removePoint\n                        \n                    \n                \n            \n            \n                \n                    \n                    removePoint()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:70\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setDashOffset\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDashOffset(offset: number)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setFillColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setFillColor(color: string | CanvasGradient | CanvasPattern)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:6\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                            string | CanvasGradient | CanvasPattern\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineCap\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineCap(lineCapStyle: CanvasLineCap)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lineCapStyle\n                                    \n                                            CanvasLineCap\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineDash\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineDash(segments: number[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:108\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    segments\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineJoinStyle\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineJoinStyle(style: \"round\" | \"bevel\" | \"miter\")\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:46\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    style\n                                    \n                                            \"round\" | \"bevel\" | \"miter\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineWidth\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineWidth(width: number)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:22\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setMiterLimit\n                        \n                    \n                \n            \n            \n                \n                    \n                    setMiterLimit(limit: number)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:54\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setStrokeColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setStrokeColor(color: string | CanvasGradient | CanvasPattern)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:14\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                            string | CanvasGradient | CanvasPattern\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        stroke\n                        \n                    \n                \n            \n            \n                \n                    \n                    stroke(options?: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:100\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BaseShapeTool } from \"../base/BaseShapeTool\";\n\nexport interface DrawEllipseOptions {\n    x: number;\n    y: number;\n    radiusX: number;\n    radiusY: number;\n    rotation: number;\n    startAngle: number;\n    endAngle: number;\n    counterclockwise?: boolean;\n}\n\nexport type DrawCircleOptions = Omit & { radius: number };\n\nexport class EllipseTool extends BaseShapeTool {\n    public draw(options: DrawEllipseOptions) {\n        this.history.push((ctx) => {\n            options.counterclockwise ??= false;\n            ctx.ellipse(\n                options.x,\n                options.y,\n                options.radiusX,\n                options.radiusY,\n                options.rotation,\n                options.startAngle,\n                options.endAngle,\n                options.counterclockwise\n            );\n        });\n\n        return this;\n    }\n\n    public drawCircle(options: DrawCircleOptions) {\n        this.history.push((ctx) => {\n            options.counterclockwise ??= false;\n            ctx.arc(\n                options.x,\n                options.y,\n                options.radius,\n                options.startAngle,\n                options.endAngle,\n                options.counterclockwise\n            );\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EraserOptions.html":{"url":"interfaces/EraserOptions.html","title":"interface - EraserOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EraserOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/eraser/Eraser.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ToolBox } from \"../base/ToolBox\";\n\nexport interface EraserOptions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\nexport class EraserTool extends ToolBox {\n    public rectangular(options: EraserOptions) {\n        this.history.push((ctx) => {\n            ctx.clearRect(options.x, options.y, options.width, options.height);\n        });\n        return this;\n    }\n\n    public circular(options: Omit & { radius?: number }) {\n        this.history.push((ctx) => {\n            ctx.beginPath();\n            ctx.arc(options.x, options.y, options.radius ?? 50, 0, 2 * Math.PI);\n            ctx.clip();\n            ctx.clearRect(0, 0, this.layer.width, this.layer.height);\n            ctx.closePath();\n        });\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EraserTool.html":{"url":"classes/EraserTool.html","title":"class - EraserTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EraserTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/eraser/Eraser.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ToolBox\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                circular\n                            \n                            \n                                    Public\n                                rectangular\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        circular\n                        \n                    \n                \n            \n            \n                \n                    \n                    circular(options)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/eraser/Eraser.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        rectangular\n                        \n                    \n                \n            \n            \n                \n                    \n                    rectangular(options: EraserOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/eraser/Eraser.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                EraserOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ToolBox } from \"../base/ToolBox\";\n\nexport interface EraserOptions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\nexport class EraserTool extends ToolBox {\n    public rectangular(options: EraserOptions) {\n        this.history.push((ctx) => {\n            ctx.clearRect(options.x, options.y, options.width, options.height);\n        });\n        return this;\n    }\n\n    public circular(options: Omit & { radius?: number }) {\n        this.history.push((ctx) => {\n            ctx.beginPath();\n            ctx.arc(options.x, options.y, options.radius ?? 50, 0, 2 * Math.PI);\n            ctx.clip();\n            ctx.clearRect(0, 0, this.layer.width, this.layer.height);\n            ctx.closePath();\n        });\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterTool.html":{"url":"classes/FilterTool.html","title":"class - FilterTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/filters/Filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ToolBox\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                applyFilter\n                            \n                            \n                                    Public\n                                brightness\n                            \n                            \n                                    Public\n                                contrast\n                            \n                            \n                                    Public\n                                dropShadow\n                            \n                            \n                                    Public\n                                gaussianBlur\n                            \n                            \n                                    Public\n                                grayscale\n                            \n                            \n                                    Public\n                                hueRotate\n                            \n                            \n                                    Public\n                                invert\n                            \n                            \n                                    Public\n                                opacity\n                            \n                            \n                                    Public\n                                saturate\n                            \n                            \n                                    Public\n                                sepia\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        applyFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyFilter(filters: FilterArgs[])\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Filter.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filters\n                                    \n                                                FilterArgs[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        brightness\n                        \n                    \n                \n            \n            \n                \n                    \n                    brightness(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Filter.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        contrast\n                        \n                    \n                \n            \n            \n                \n                    \n                    contrast(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Filter.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        dropShadow\n                        \n                    \n                \n            \n            \n                \n                    \n                    dropShadow(x: string | number, y: string | number, radius: number, color: string)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Filter.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    radius\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        gaussianBlur\n                        \n                    \n                \n            \n            \n                \n                    \n                    gaussianBlur(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Filter.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        grayscale\n                        \n                    \n                \n            \n            \n                \n                    \n                    grayscale(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Filter.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        100\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        hueRotate\n                        \n                    \n                \n            \n            \n                \n                    \n                    hueRotate(angle: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Filter.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    angle\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        invert\n                        \n                    \n                \n            \n            \n                \n                    \n                    invert(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Filter.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        100\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        opacity\n                        \n                    \n                \n            \n            \n                \n                    \n                    opacity(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Filter.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        saturate\n                        \n                    \n                \n            \n            \n                \n                    \n                    saturate(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Filter.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        sepia\n                        \n                    \n                \n            \n            \n                \n                    \n                    sepia(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Filter.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        100\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ToolBox } from \"../base/ToolBox\";\n\nexport type FilterArgs = { name: string; value: string | number };\n\nexport class FilterTool extends ToolBox {\n    public applyFilter(filters: FilterArgs[]) {\n        if (!Array.isArray(filters) || !filters.length) return this;\n        this.history.push((ctx) => {\n            ctx.filter = filters.map((m) => `${m.name}(${m.value})`).join(\" \");\n        });\n        return this;\n    }\n\n    public gaussianBlur(amount = 1) {\n        if (typeof amount !== \"number\") throw new TypeError(\"gaussian blur amount must be a number\");\n        return this.applyFilter([\n            {\n                name: \"blur\",\n                value: amount\n            }\n        ]);\n    }\n\n    public brightness(amount: number) {\n        if (typeof amount !== \"number\") throw new TypeError(\"brightness amount must be a number\");\n        return this.applyFilter([\n            {\n                name: \"brightness\",\n                value: `${amount}%`\n            }\n        ]);\n    }\n\n    public contrast(amount: number) {\n        if (typeof amount !== \"number\") throw new TypeError(\"contrast amount must be a number\");\n        return this.applyFilter([\n            {\n                name: \"contrast\",\n                value: `${amount}%`\n            }\n        ]);\n    }\n\n    public dropShadow(x: string | number, y: string | number, radius: number, color: string) {\n        return this.applyFilter([\n            {\n                name: \"drop-shadow\",\n                value: `${x} ${y} ${radius} ${color}`\n            }\n        ]);\n    }\n\n    public grayscale(amount = 100) {\n        if (typeof amount !== \"number\") throw new TypeError(\"grayscale amount must be a number\");\n        return this.applyFilter([\n            {\n                name: \"grayscale\",\n                value: `${amount}%`\n            }\n        ]);\n    }\n\n    public hueRotate(angle: number) {\n        if (typeof angle !== \"number\") throw new TypeError(\"hue rotate angle must be a number\");\n        return this.applyFilter([\n            {\n                name: \"hue-rotate\",\n                value: `${angle}deg`\n            }\n        ]);\n    }\n\n    public invert(amount = 100) {\n        if (typeof amount !== \"number\") throw new TypeError(\"invert amount must be a number\");\n        return this.applyFilter([\n            {\n                name: \"invert\",\n                value: `${amount}%`\n            }\n        ]);\n    }\n\n    public opacity(amount: number) {\n        if (typeof amount !== \"number\") throw new TypeError(\"opacity amount must be a number\");\n        return this.applyFilter([\n            {\n                name: \"opacity\",\n                value: `${amount}%`\n            }\n        ]);\n    }\n\n    public saturate(amount: number) {\n        if (typeof amount !== \"number\") throw new TypeError(\"saturation amount must be a number\");\n        return this.applyFilter([\n            {\n                name: \"saturate\",\n                value: `${amount}%`\n            }\n        ]);\n    }\n\n    public sepia(amount = 100) {\n        if (typeof amount !== \"number\") throw new TypeError(\"sepia amount must be a number\");\n        return this.applyFilter([\n            {\n                name: \"sepia\",\n                value: `${amount}%`\n            }\n        ]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FrameLayer.html":{"url":"interfaces/FrameLayer.html","title":"interface - FrameLayer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FrameLayer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/animation/IllustratorAnimation.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            duration\n                                        \n                                \n                                \n                                        \n                                            frame\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        duration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        duration:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        frame\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        frame:         Layer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Layer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Illustrator } from \"../illustrator/Illustrator\";\nimport { Layer } from \"../layer/Layer\";\nimport { GifEncoder, EncoderOptions, DisposalCode } from \"@skyra/gifenc\";\n\nexport interface FrameLayer {\n    frame: Layer;\n    duration?: number;\n}\n\nexport class IllustratorAnimation {\n    #frames: Array> | null = null;\n    #encoderConfig: EncoderOptions = {};\n\n    public constructor(public readonly illustrator: Illustrator) {}\n\n    public clearFrames() {\n        this.#frames = null;\n    }\n\n    public addFrame(layer: FrameLayer): IllustratorAnimation;\n    public addFrame(layer: Layer, duration?: number): IllustratorAnimation;\n    public addFrame(layer: Layer | FrameLayer, duration?: number): IllustratorAnimation {\n        if (!arguments.length || layer == null) throw new Error(\"frame args required\");\n        let frame: Required | null = null;\n        if (layer instanceof Layer)\n            frame = {\n                frame: layer,\n                duration: duration ?? 1000\n            };\n\n        if (typeof layer === \"object\")\n            frame = {\n                duration: (layer as FrameLayer).duration ?? 1000,\n                frame: (layer as FrameLayer).frame\n            };\n\n        if (!frame) throw new Error(\"missing frame data\");\n\n        return this.addFrames([frame]);\n    }\n\n    public addFrames(layers: Array>) {\n        if (!layers.length) throw new Error(\"Frames required\");\n        if (!layers.every((l) => l.frame instanceof Layer)) throw new TypeError(\"frame must be a Layer instance\");\n        this.#addFrame(layers);\n        return this;\n    }\n\n    public setFrameRate(frameRate: number) {\n        if (typeof frameRate !== \"number\") throw new TypeError(\"frame rate value must be a number\");\n        this.#encoderConfig.framerate = frameRate;\n        return this;\n    }\n\n    public setTransparency(transparent: number) {\n        if (typeof transparent !== \"number\") throw new TypeError(\"transparency value must be a number\");\n        this.#encoderConfig.transparent = transparent;\n        return this;\n    }\n\n    public setFrameDelay(delay: number) {\n        if (typeof delay !== \"number\") throw new TypeError(\"delay value must be a number\");\n        this.#encoderConfig.delay = delay;\n        return this;\n    }\n\n    public setDisposalCode(code: DisposalCode) {\n        if (typeof code !== \"number\") throw new TypeError(\"disposal code value must be a number\");\n        this.#encoderConfig.dispose = code;\n        return this;\n    }\n\n    public setQuality(quality: number) {\n        if (typeof quality !== \"number\") throw new TypeError(\"quality value must be a number\");\n        this.#encoderConfig.quality = quality;\n        return this;\n    }\n\n    public setRepeat(repeats: number) {\n        if (typeof repeats !== \"number\") throw new TypeError(\"repeats value must be a number\");\n        this.#encoderConfig.repeat = repeats;\n        return this;\n    }\n\n    public async createAnimation() {\n        if (!this.#frames?.length) throw new Error(\"missing animation frames data\");\n        const encoder = new GifEncoder(this.illustrator.width, this.illustrator.height);\n        const frames = await this.#renderEachLayer();\n\n        const gifStream = encoder.createReadStream();\n\n        if (this.#encoderConfig.dispose != null) encoder.setDispose(this.#encoderConfig.dispose);\n        if (this.#encoderConfig.framerate != null) encoder.setFramerate(this.#encoderConfig.framerate);\n        if (this.#encoderConfig.quality != null) encoder.setQuality(this.#encoderConfig.quality);\n        if (this.#encoderConfig.repeat != null) encoder.setRepeat(this.#encoderConfig.repeat);\n        if (this.#encoderConfig.transparent != null) encoder.setTransparent(this.#encoderConfig.transparent);\n\n        encoder.start();\n        for (const frame of frames) {\n            encoder.setDelay(frame.duration ?? this.#encoderConfig.delay);\n            encoder.addFrame(frame.ctx.getImageData(0, 0, frame.ctx.canvas.width, frame.ctx.canvas.height).data);\n        }\n        encoder.finish();\n\n        return gifStream;\n    }\n\n    async #renderEachLayer() {\n        if (!this.#frames) return [];\n\n        const canvasArray = await Promise.all(\n            this.#frames\n                .filter((frame) => !frame.frame.hidden)\n                .map(async (m) => ({\n                    canvas: await m.frame.render(),\n                    duration: m.duration\n                }))\n        );\n\n        return canvasArray.map((m) => ({\n            duration: m.duration,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            ctx: m.canvas!.getContext(\"2d\")\n        }));\n    }\n\n    #addFrame(frames: Array>) {\n        if (!Array.isArray(this.#frames)) this.#frames = [];\n        this.#frames.push(...frames);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Illustrator.html":{"url":"classes/Illustrator.html","title":"class - Illustrator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Illustrator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/illustrator/Illustrator.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                animation\n                            \n                            \n                                    Public\n                                colors\n                            \n                            \n                                    Public\n                                    Readonly\n                                height\n                            \n                            \n                                    Public\n                                image\n                            \n                            \n                                    Public\n                                layers\n                            \n                            \n                                    Public\n                                    Readonly\n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                export\n                            \n                            \n                                    Public\n                                    Async\n                                render\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    backgroundLayer\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(width: number, height: number)\n                    \n                \n                        \n                            \n                                Defined in src/illustrator/Illustrator.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        width\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        height\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        animation\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new IllustratorAnimation(this)\n                    \n                \n                    \n                        \n                                Defined in src/illustrator/Illustrator.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        colors\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Colors(this)\n                    \n                \n                    \n                        \n                                Defined in src/illustrator/Illustrator.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/illustrator/Illustrator.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new IllustratorImageManager()\n                    \n                \n                    \n                        \n                                Defined in src/illustrator/Illustrator.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        layers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new LayerManager(this)\n                    \n                \n                    \n                        \n                                Defined in src/illustrator/Illustrator.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        width\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/illustrator/Illustrator.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        export\n                        \n                    \n                \n            \n            \n                \n                    \n                    export(config: IllustratorExportConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/illustrator/Illustrator.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                IllustratorExportConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Defined in src/illustrator/Illustrator.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        backgroundLayer\n                    \n                \n\n                \n                    \n                        getbackgroundLayer()\n                    \n                \n                            \n                                \n                                    Defined in src/illustrator/Illustrator.ts:28\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { AvifConfig, createCanvas } from \"@napi-rs/canvas\";\nimport { IllustratorAnimation } from \"../animation/IllustratorAnimation\";\nimport { Colors } from \"../colors/Colors\";\nimport { IllustratorImageManager } from \"../image/IllustratorImageManager\";\nimport { Layer } from \"../layer/Layer\";\nimport { LayerManager } from \"../layer/LayerManager\";\n\nexport interface IllustratorExportConfig {\n    encoding?: \"png\" | \"avif\" | \"jpeg\" | \"webp\";\n    avifConfig?: AvifConfig;\n    quality?: number;\n}\n\nexport class Illustrator {\n    public layers = new LayerManager(this);\n    public animation = new IllustratorAnimation(this);\n    public colors = new Colors(this);\n    public image = new IllustratorImageManager();\n\n    public constructor(public readonly width: number, public readonly height: number) {\n        this.layers\n            .createLayer({\n                name: \"background\"\n            })\n            .lock();\n    }\n\n    public get backgroundLayer() {\n        return this.layers.getLayer(\"background\") as Layer;\n    }\n\n    public async render() {\n        const canvas = createCanvas(this.width, this.height);\n        const ctx = canvas.getContext(\"2d\");\n\n        // render background layer first\n        // eslint-disable-next-line\n        const data = (await this.backgroundLayer.render())!;\n        // draw rendered layer on main canvas\n        if (data != null)\n            ctx.drawImage(\n                data,\n                this.backgroundLayer.coordinates.x,\n                this.backgroundLayer.coordinates.y,\n                this.backgroundLayer.width,\n                this.backgroundLayer.height\n            );\n\n        // render from top to bottom\n        const layers = this.layers.getAllLayers(true);\n\n        for (const layerConfig of layers) {\n            // skip background layer\n            if (layerConfig.name === \"background\") continue;\n            // don't render if the layer is hidden\n            if (layerConfig.layer.hidden) continue;\n            // eslint-disable-next-line\n            const data = (await layerConfig.layer.render())!;\n            if (data == null) continue;\n            // draw rendered layer on main canvas\n            ctx.drawImage(\n                data,\n                layerConfig.layer.coordinates.x,\n                layerConfig.layer.coordinates.y,\n                layerConfig.layer.width,\n                layerConfig.layer.height\n            );\n        }\n\n        return { canvas, ctx };\n    }\n\n    public async export(config: IllustratorExportConfig = {}) {\n        const output = await this.render();\n\n        if (config.encoding == null || config.encoding === \"png\") {\n            return output.canvas.encode(\"png\");\n        }\n\n        if (config.encoding === \"avif\") {\n            return output.canvas.encode(\"avif\", config.avifConfig);\n        }\n\n        if (config.encoding === \"jpeg\" || config.encoding === \"webp\") {\n            return output.canvas.encode(config.encoding, config.quality);\n        }\n\n        throw new Error(`unsupported export encoding \"${config.encoding}\"`);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IllustratorAnimation.html":{"url":"classes/IllustratorAnimation.html","title":"class - IllustratorAnimation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IllustratorAnimation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/animation/IllustratorAnimation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                illustrator\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addFrame\n                            \n                            \n                                    Public\n                                addFrame\n                            \n                            \n                                    Public\n                                addFrame\n                            \n                            \n                                    Public\n                                addFrames\n                            \n                            \n                                    Public\n                                clearFrames\n                            \n                            \n                                    Public\n                                    Async\n                                createAnimation\n                            \n                            \n                                    Public\n                                setDisposalCode\n                            \n                            \n                                    Public\n                                setFrameDelay\n                            \n                            \n                                    Public\n                                setFrameRate\n                            \n                            \n                                    Public\n                                setQuality\n                            \n                            \n                                    Public\n                                setRepeat\n                            \n                            \n                                    Public\n                                setTransparency\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(illustrator: Illustrator)\n                    \n                \n                        \n                            \n                                Defined in src/animation/IllustratorAnimation.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        illustrator\n                                                  \n                                                        \n                                                                        Illustrator\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        illustrator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Illustrator\n\n                    \n                \n                    \n                        \n                                Defined in src/animation/IllustratorAnimation.ts:14\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addFrame\n                        \n                    \n                \n            \n            \n                \n                    \n                    addFrame(layer: FrameLayer)\n                \n            \n\n\n            \n                \n                    Defined in src/animation/IllustratorAnimation.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                FrameLayer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IllustratorAnimation\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addFrame\n                        \n                    \n                \n            \n            \n                \n                    \n                    addFrame(layer: Layer, duration?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/animation/IllustratorAnimation.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                Layer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    duration\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IllustratorAnimation\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addFrame\n                        \n                    \n                \n            \n            \n                \n                    \n                    addFrame(layer: Layer | FrameLayer, duration?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/animation/IllustratorAnimation.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                Layer | FrameLayer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    duration\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IllustratorAnimation\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addFrames\n                        \n                    \n                \n            \n            \n                \n                    \n                    addFrames(layers: Array>)\n                \n            \n\n\n            \n                \n                    Defined in src/animation/IllustratorAnimation.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layers\n                                    \n                                                Array>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clearFrames\n                        \n                    \n                \n            \n            \n                \n                    \n                    clearFrames()\n                \n            \n\n\n            \n                \n                    Defined in src/animation/IllustratorAnimation.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createAnimation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAnimation()\n                \n            \n\n\n            \n                \n                    Defined in src/animation/IllustratorAnimation.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setDisposalCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDisposalCode(code: DisposalCode)\n                \n            \n\n\n            \n                \n                    Defined in src/animation/IllustratorAnimation.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                            DisposalCode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setFrameDelay\n                        \n                    \n                \n            \n            \n                \n                    \n                    setFrameDelay(delay: number)\n                \n            \n\n\n            \n                \n                    Defined in src/animation/IllustratorAnimation.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    delay\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setFrameRate\n                        \n                    \n                \n            \n            \n                \n                    \n                    setFrameRate(frameRate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/animation/IllustratorAnimation.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    frameRate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setQuality\n                        \n                    \n                \n            \n            \n                \n                    \n                    setQuality(quality: number)\n                \n            \n\n\n            \n                \n                    Defined in src/animation/IllustratorAnimation.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    quality\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setRepeat\n                        \n                    \n                \n            \n            \n                \n                    \n                    setRepeat(repeats: number)\n                \n            \n\n\n            \n                \n                    Defined in src/animation/IllustratorAnimation.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repeats\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setTransparency\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTransparency(transparent: number)\n                \n            \n\n\n            \n                \n                    Defined in src/animation/IllustratorAnimation.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transparent\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Illustrator } from \"../illustrator/Illustrator\";\nimport { Layer } from \"../layer/Layer\";\nimport { GifEncoder, EncoderOptions, DisposalCode } from \"@skyra/gifenc\";\n\nexport interface FrameLayer {\n    frame: Layer;\n    duration?: number;\n}\n\nexport class IllustratorAnimation {\n    #frames: Array> | null = null;\n    #encoderConfig: EncoderOptions = {};\n\n    public constructor(public readonly illustrator: Illustrator) {}\n\n    public clearFrames() {\n        this.#frames = null;\n    }\n\n    public addFrame(layer: FrameLayer): IllustratorAnimation;\n    public addFrame(layer: Layer, duration?: number): IllustratorAnimation;\n    public addFrame(layer: Layer | FrameLayer, duration?: number): IllustratorAnimation {\n        if (!arguments.length || layer == null) throw new Error(\"frame args required\");\n        let frame: Required | null = null;\n        if (layer instanceof Layer)\n            frame = {\n                frame: layer,\n                duration: duration ?? 1000\n            };\n\n        if (typeof layer === \"object\")\n            frame = {\n                duration: (layer as FrameLayer).duration ?? 1000,\n                frame: (layer as FrameLayer).frame\n            };\n\n        if (!frame) throw new Error(\"missing frame data\");\n\n        return this.addFrames([frame]);\n    }\n\n    public addFrames(layers: Array>) {\n        if (!layers.length) throw new Error(\"Frames required\");\n        if (!layers.every((l) => l.frame instanceof Layer)) throw new TypeError(\"frame must be a Layer instance\");\n        this.#addFrame(layers);\n        return this;\n    }\n\n    public setFrameRate(frameRate: number) {\n        if (typeof frameRate !== \"number\") throw new TypeError(\"frame rate value must be a number\");\n        this.#encoderConfig.framerate = frameRate;\n        return this;\n    }\n\n    public setTransparency(transparent: number) {\n        if (typeof transparent !== \"number\") throw new TypeError(\"transparency value must be a number\");\n        this.#encoderConfig.transparent = transparent;\n        return this;\n    }\n\n    public setFrameDelay(delay: number) {\n        if (typeof delay !== \"number\") throw new TypeError(\"delay value must be a number\");\n        this.#encoderConfig.delay = delay;\n        return this;\n    }\n\n    public setDisposalCode(code: DisposalCode) {\n        if (typeof code !== \"number\") throw new TypeError(\"disposal code value must be a number\");\n        this.#encoderConfig.dispose = code;\n        return this;\n    }\n\n    public setQuality(quality: number) {\n        if (typeof quality !== \"number\") throw new TypeError(\"quality value must be a number\");\n        this.#encoderConfig.quality = quality;\n        return this;\n    }\n\n    public setRepeat(repeats: number) {\n        if (typeof repeats !== \"number\") throw new TypeError(\"repeats value must be a number\");\n        this.#encoderConfig.repeat = repeats;\n        return this;\n    }\n\n    public async createAnimation() {\n        if (!this.#frames?.length) throw new Error(\"missing animation frames data\");\n        const encoder = new GifEncoder(this.illustrator.width, this.illustrator.height);\n        const frames = await this.#renderEachLayer();\n\n        const gifStream = encoder.createReadStream();\n\n        if (this.#encoderConfig.dispose != null) encoder.setDispose(this.#encoderConfig.dispose);\n        if (this.#encoderConfig.framerate != null) encoder.setFramerate(this.#encoderConfig.framerate);\n        if (this.#encoderConfig.quality != null) encoder.setQuality(this.#encoderConfig.quality);\n        if (this.#encoderConfig.repeat != null) encoder.setRepeat(this.#encoderConfig.repeat);\n        if (this.#encoderConfig.transparent != null) encoder.setTransparent(this.#encoderConfig.transparent);\n\n        encoder.start();\n        for (const frame of frames) {\n            encoder.setDelay(frame.duration ?? this.#encoderConfig.delay);\n            encoder.addFrame(frame.ctx.getImageData(0, 0, frame.ctx.canvas.width, frame.ctx.canvas.height).data);\n        }\n        encoder.finish();\n\n        return gifStream;\n    }\n\n    async #renderEachLayer() {\n        if (!this.#frames) return [];\n\n        const canvasArray = await Promise.all(\n            this.#frames\n                .filter((frame) => !frame.frame.hidden)\n                .map(async (m) => ({\n                    canvas: await m.frame.render(),\n                    duration: m.duration\n                }))\n        );\n\n        return canvasArray.map((m) => ({\n            duration: m.duration,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            ctx: m.canvas!.getContext(\"2d\")\n        }));\n    }\n\n    #addFrame(frames: Array>) {\n        if (!Array.isArray(this.#frames)) this.#frames = [];\n        this.#frames.push(...frames);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IllustratorColor.html":{"url":"classes/IllustratorColor.html","title":"class - IllustratorColor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IllustratorColor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/colors/IllustratorColor.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                    Readonly\n                                swatches\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hex\n                            \n                            \n                                    Public\n                                int\n                            \n                            \n                                    Public\n                                rgb\n                            \n                            \n                                    Public\n                                rgba\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(swatches: ColorSwatches, data: ColorConfig)\n                    \n                \n                        \n                            \n                                Defined in src/colors/IllustratorColor.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        swatches\n                                                  \n                                                        \n                                                                        ColorSwatches\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        ColorConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ColorConfig\n\n                    \n                \n                    \n                        \n                                Defined in src/colors/IllustratorColor.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        swatches\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ColorSwatches\n\n                    \n                \n                    \n                        \n                                Defined in src/colors/IllustratorColor.ts:13\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        hex\n                        \n                    \n                \n            \n            \n                \n                    \n                    hex()\n                \n            \n\n\n            \n                \n                    Defined in src/colors/IllustratorColor.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        int\n                        \n                    \n                \n            \n            \n                \n                    \n                    int()\n                \n            \n\n\n            \n                \n                    Defined in src/colors/IllustratorColor.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        rgb\n                        \n                    \n                \n            \n            \n                \n                    \n                    rgb()\n                \n            \n\n\n            \n                \n                    Defined in src/colors/IllustratorColor.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        rgba\n                        \n                    \n                \n            \n            \n                \n                    \n                    rgba()\n                \n            \n\n\n            \n                \n                    Defined in src/colors/IllustratorColor.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in src/colors/IllustratorColor.ts:65\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ColorConfig, ColorSwatches } from \"./ColorSwatches\";\n\nexport interface IllustratorColorData {\n    hex: `#${string}`;\n    int: number;\n    rgba: number[];\n    cmyk: number[];\n    hsla: number[];\n}\n\nexport class IllustratorColor {\n    #data!: IllustratorColorData;\n    public constructor(public readonly swatches: ColorSwatches, public readonly data: ColorConfig) {\n        this.#parse(data.color);\n    }\n\n    #parse(color: typeof this.data.color) {\n        void color;\n        throw new Error(\"Not implemented\");\n        // if (typeof color === \"string\") {\n        //     if ([\"rgb(\", \"rgba(\", \"cmyk(\", \"hsl(\", \"hsla(\"].some(pattern => color.indexOf(pattern) === 0)) {\n        //         if (color.startsWith(\"rgb(\") || color.startsWith(\"rgba(\")) {\n        //             const points = color.split(\",\").map(m => {\n        //                 let val = m.trim();\n        //                 if (val.includes(\"%\")) val = `0.${val.replace(\"%\", \"\")}`;\n        //                 return parseFloat(val);\n        //             }).slice(0, 4);\n\n        //             this.#data.rgba = points;\n        //             this.#data.hex = `#${(points[0] \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IllustratorColorData.html":{"url":"interfaces/IllustratorColorData.html","title":"interface - IllustratorColorData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IllustratorColorData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/colors/IllustratorColor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cmyk\n                                        \n                                \n                                \n                                        \n                                            hex\n                                        \n                                \n                                \n                                        \n                                            hsla\n                                        \n                                \n                                \n                                        \n                                            int\n                                        \n                                \n                                \n                                        \n                                            rgba\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cmyk\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cmyk:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hex:     template literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     template literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hsla\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hsla:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        int\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        int:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rgba\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rgba:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ColorConfig, ColorSwatches } from \"./ColorSwatches\";\n\nexport interface IllustratorColorData {\n    hex: `#${string}`;\n    int: number;\n    rgba: number[];\n    cmyk: number[];\n    hsla: number[];\n}\n\nexport class IllustratorColor {\n    #data!: IllustratorColorData;\n    public constructor(public readonly swatches: ColorSwatches, public readonly data: ColorConfig) {\n        this.#parse(data.color);\n    }\n\n    #parse(color: typeof this.data.color) {\n        void color;\n        throw new Error(\"Not implemented\");\n        // if (typeof color === \"string\") {\n        //     if ([\"rgb(\", \"rgba(\", \"cmyk(\", \"hsl(\", \"hsla(\"].some(pattern => color.indexOf(pattern) === 0)) {\n        //         if (color.startsWith(\"rgb(\") || color.startsWith(\"rgba(\")) {\n        //             const points = color.split(\",\").map(m => {\n        //                 let val = m.trim();\n        //                 if (val.includes(\"%\")) val = `0.${val.replace(\"%\", \"\")}`;\n        //                 return parseFloat(val);\n        //             }).slice(0, 4);\n\n        //             this.#data.rgba = points;\n        //             this.#data.hex = `#${(points[0] \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IllustratorDataSource.html":{"url":"interfaces/IllustratorDataSource.html","title":"interface - IllustratorDataSource","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IllustratorDataSource\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/DataSource.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         TextDataSource | ImageDataSource\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TextDataSource | ImageDataSource\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"text\" | \"image\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"text\" | \"image\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IllustratorImageSource } from \"../image/ImageLoader\";\n\nexport interface IllustratorDataSource {\n    name: string;\n    type: \"text\" | \"image\";\n    data: TextDataSource | ImageDataSource;\n}\n\nexport interface TextDataSource {\n    value: string;\n    config: {\n        x: number;\n        y: number;\n        maxWidth?: number;\n        font: string;\n        fontPath?: string;\n    };\n}\n\n// TODO: template api\nexport interface ImageDataSource {\n    value: IllustratorImageSource;\n    config: {\n        x: number;\n        y: number;\n        width: number;\n        height: number;\n        radius?: number;\n    };\n}\n\nexport class DataSource {\n    public data: Array = [];\n\n    public loadData(data: Array) {\n        if (!Array.isArray(data)) throw new TypeError(\"data source must be array\");\n        this.data = data;\n    }\n\n    public addData(data: IllustratorDataSource) {\n        this.data.push(data);\n    }\n\n    public removeData(nameOrFn: string | ((ctx: IllustratorDataSource) => boolean)) {\n        if (typeof nameOrFn === \"string\") this.data = this.data.filter((ds) => ds.name === nameOrFn);\n        if (typeof nameOrFn === \"function\") this.data = this.data.filter(nameOrFn);\n        throw new Error(\"invalid parameter\");\n    }\n\n    public get(nameOrFn: string | ((ctx: IllustratorDataSource) => boolean)) {\n        return this.data.find(typeof nameOrFn === \"function\" ? nameOrFn : (fn) => fn.name === nameOrFn);\n    }\n\n    public toJSON() {\n        return this.data;\n    }\n\n    public toArray() {\n        return this.data;\n    }\n\n    public toString(): `DataSource` {\n        return `DataSource`;\n    }\n\n    public clone() {\n        const ds = new DataSource();\n        ds.loadData(this.data.slice());\n        return ds;\n    }\n\n    public *[Symbol.iterator](): IterableIterator {\n        yield* this.data ?? [];\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IllustratorExportConfig.html":{"url":"interfaces/IllustratorExportConfig.html","title":"interface - IllustratorExportConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IllustratorExportConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/illustrator/Illustrator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            avifConfig\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            encoding\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            quality\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        avifConfig\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        avifConfig:     AvifConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AvifConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        encoding\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        encoding:     \"png\" | \"avif\" | \"jpeg\" | \"webp\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"png\" | \"avif\" | \"jpeg\" | \"webp\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        quality\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        quality:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AvifConfig, createCanvas } from \"@napi-rs/canvas\";\nimport { IllustratorAnimation } from \"../animation/IllustratorAnimation\";\nimport { Colors } from \"../colors/Colors\";\nimport { IllustratorImageManager } from \"../image/IllustratorImageManager\";\nimport { Layer } from \"../layer/Layer\";\nimport { LayerManager } from \"../layer/LayerManager\";\n\nexport interface IllustratorExportConfig {\n    encoding?: \"png\" | \"avif\" | \"jpeg\" | \"webp\";\n    avifConfig?: AvifConfig;\n    quality?: number;\n}\n\nexport class Illustrator {\n    public layers = new LayerManager(this);\n    public animation = new IllustratorAnimation(this);\n    public colors = new Colors(this);\n    public image = new IllustratorImageManager();\n\n    public constructor(public readonly width: number, public readonly height: number) {\n        this.layers\n            .createLayer({\n                name: \"background\"\n            })\n            .lock();\n    }\n\n    public get backgroundLayer() {\n        return this.layers.getLayer(\"background\") as Layer;\n    }\n\n    public async render() {\n        const canvas = createCanvas(this.width, this.height);\n        const ctx = canvas.getContext(\"2d\");\n\n        // render background layer first\n        // eslint-disable-next-line\n        const data = (await this.backgroundLayer.render())!;\n        // draw rendered layer on main canvas\n        if (data != null)\n            ctx.drawImage(\n                data,\n                this.backgroundLayer.coordinates.x,\n                this.backgroundLayer.coordinates.y,\n                this.backgroundLayer.width,\n                this.backgroundLayer.height\n            );\n\n        // render from top to bottom\n        const layers = this.layers.getAllLayers(true);\n\n        for (const layerConfig of layers) {\n            // skip background layer\n            if (layerConfig.name === \"background\") continue;\n            // don't render if the layer is hidden\n            if (layerConfig.layer.hidden) continue;\n            // eslint-disable-next-line\n            const data = (await layerConfig.layer.render())!;\n            if (data == null) continue;\n            // draw rendered layer on main canvas\n            ctx.drawImage(\n                data,\n                layerConfig.layer.coordinates.x,\n                layerConfig.layer.coordinates.y,\n                layerConfig.layer.width,\n                layerConfig.layer.height\n            );\n        }\n\n        return { canvas, ctx };\n    }\n\n    public async export(config: IllustratorExportConfig = {}) {\n        const output = await this.render();\n\n        if (config.encoding == null || config.encoding === \"png\") {\n            return output.canvas.encode(\"png\");\n        }\n\n        if (config.encoding === \"avif\") {\n            return output.canvas.encode(\"avif\", config.avifConfig);\n        }\n\n        if (config.encoding === \"jpeg\" || config.encoding === \"webp\") {\n            return output.canvas.encode(config.encoding, config.quality);\n        }\n\n        throw new Error(`unsupported export encoding \"${config.encoding}\"`);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IllustratorImage.html":{"url":"classes/IllustratorImage.html","title":"class - IllustratorImage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IllustratorImage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/image/IllustratorImage.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Transformer\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Async\n                                fromImageData\n                            \n                            \n                                    Static\n                                fromImageDataSync\n                            \n                            \n                                    Public\n                                    Async\n                                toImage\n                            \n                            \n                                    Public\n                                toImageSync\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    source\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(_data: Buffer)\n                    \n                \n                        \n                            \n                                Defined in src/image/IllustratorImage.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _data\n                                                  \n                                                        \n                                                                    Buffer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        fromImageData\n                        \n                    \n                \n            \n            \n                \n                    \n                    fromImageData(data: ImageData | RawImageData)\n                \n            \n\n\n            \n                \n                    Defined in src/image/IllustratorImage.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ImageData | RawImageData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        fromImageDataSync\n                        \n                    \n                \n            \n            \n                \n                    \n                    fromImageDataSync(data: ImageData | RawImageData)\n                \n            \n\n\n            \n                \n                    Defined in src/image/IllustratorImage.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ImageData | RawImageData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IllustratorImage\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        toImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    toImage()\n                \n            \n\n\n            \n                \n                    Defined in src/image/IllustratorImage.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        toImageSync\n                        \n                    \n                \n            \n            \n                \n                    \n                    toImageSync()\n                \n            \n\n\n            \n                \n                    Defined in src/image/IllustratorImage.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        source\n                    \n                \n\n                \n                    \n                        getsource()\n                    \n                \n                            \n                                \n                                    Defined in src/image/IllustratorImage.ts:36\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n    Transformer,\n    Orientation,\n    AvifConfig,\n    ChromaSubsampling,\n    CompressionType,\n    JsColorType,\n    FilterType,\n    ResizeFilterType,\n    Metadata\n} from \"@napi-rs/image\";\nimport { ImageLoader } from \"./ImageLoader\";\nimport { ImageData } from \"@napi-rs/canvas\";\n\nexport { AvifConfig, Metadata };\n\nexport type IllustratorImageData = ImageData & { colorSpace: PredefinedColorSpace };\n\n// prettier-ignore\nexport const IllustratorImageEnums = {\n    // @ts-expect-error\n    Orientation, ChromaSubsampling, CompressionType, JsColorType, FilterType, ResizeFilterType\n};\n\nexport interface RawImageData {\n    data: Uint8ClampedArray | Buffer;\n    width: number;\n    height: number;\n}\n\nexport class IllustratorImage extends Transformer {\n    public constructor(private readonly _data: Buffer) {\n        super(_data);\n    }\n\n    public get source() {\n        return this._data;\n    }\n\n    public async toImage() {\n        const png = await super.png();\n        return ImageLoader.createImage(png);\n    }\n\n    public toImageSync() {\n        const png = super.pngSync();\n        return ImageLoader.createImage(png);\n    }\n\n    public static async fromImageData(data: ImageData | RawImageData) {\n        const transformer = super.fromRgbaPixels(data.data, data.width, data.height);\n        const iImage = new IllustratorImage(await transformer.rawPixels());\n        return iImage;\n    }\n\n    public static fromImageDataSync(data: ImageData | RawImageData) {\n        const transformer = super.fromRgbaPixels(data.data, data.width, data.height);\n        const iImage = new IllustratorImage(transformer.rawPixelsSync());\n        return iImage;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IllustratorImageManager.html":{"url":"classes/IllustratorImageManager.html","title":"class - IllustratorImageManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IllustratorImageManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/image/IllustratorImageManager.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                compressJPEG\n                            \n                            \n                                    Public\n                                compressJPEGSync\n                            \n                            \n                                    Public\n                                    Async\n                                compressPNGLossless\n                            \n                            \n                                    Public\n                                compressPNGLosslessSync\n                            \n                            \n                                    Public\n                                    Async\n                                load\n                            \n                            \n                                    Public\n                                    Async\n                                loadImage\n                            \n                            \n                                    Public\n                                    Async\n                                PNGQuantize\n                            \n                            \n                                    Public\n                                PNGQuantizeSync\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        compressJPEG\n                        \n                    \n                \n            \n            \n                \n                    \n                    compressJPEG(src: Buffer, options?: JpegCompressOptions | null)\n                \n            \n\n\n            \n                \n                    Defined in src/image/IllustratorImageManager.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    src\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            JpegCompressOptions | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        compressJPEGSync\n                        \n                    \n                \n            \n            \n                \n                    \n                    compressJPEGSync(src: Buffer, options?: JpegCompressOptions | null)\n                \n            \n\n\n            \n                \n                    Defined in src/image/IllustratorImageManager.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    src\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            JpegCompressOptions | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        compressPNGLossless\n                        \n                    \n                \n            \n            \n                \n                    \n                    compressPNGLossless(src: Buffer, options?: PNGLosslessOptions | null)\n                \n            \n\n\n            \n                \n                    Defined in src/image/IllustratorImageManager.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    src\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            PNGLosslessOptions | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        compressPNGLosslessSync\n                        \n                    \n                \n            \n            \n                \n                    \n                    compressPNGLosslessSync(src: Buffer, options?: PNGLosslessOptions | null)\n                \n            \n\n\n            \n                \n                    Defined in src/image/IllustratorImageManager.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    src\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            PNGLosslessOptions | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        load\n                        \n                    \n                \n            \n            \n                \n                    \n                    load(src: IllustratorImageSource)\n                \n            \n\n\n            \n                \n                    Defined in src/image/IllustratorImageManager.ts:20\n                \n            \n\n\n            \n                \n                    Loads image source data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    src\n                                    \n                                                IllustratorImageSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The image source\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        loadImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadImage(src: IllustratorImageSource)\n                \n            \n\n\n            \n                \n                    Defined in src/image/IllustratorImageManager.ts:28\n                \n            \n\n\n            \n                \n                    Loads IllustratorImage from the given source\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    src\n                                    \n                                                IllustratorImageSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The source to load\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        PNGQuantize\n                        \n                    \n                \n            \n            \n                \n                    \n                    PNGQuantize(src: Buffer, options?: PngQuantOptions | null)\n                \n            \n\n\n            \n                \n                    Defined in src/image/IllustratorImageManager.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    src\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            PngQuantOptions | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        PNGQuantizeSync\n                        \n                    \n                \n            \n            \n                \n                    \n                    PNGQuantizeSync(src: Buffer, options?: PngQuantOptions | null)\n                \n            \n\n\n            \n                \n                    Defined in src/image/IllustratorImageManager.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    src\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            PngQuantOptions | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IllustratorImageSource, ImageLoader } from \"./ImageLoader\";\nimport { IllustratorImage } from \"./IllustratorImage\";\nimport {\n    compressJpeg,\n    compressJpegSync,\n    JpegCompressOptions,\n    losslessCompressPng,\n    losslessCompressPngSync,\n    PNGLosslessOptions,\n    pngQuantize,\n    pngQuantizeSync,\n    PngQuantOptions\n} from \"@napi-rs/image\";\n\nexport class IllustratorImageManager {\n    /**\n     * Loads image source data\n     * @param src The image source\n     */\n    public async load(src: IllustratorImageSource) {\n        return await ImageLoader.loadImage(src, true);\n    }\n\n    /**\n     * Loads {@link IllustratorImage} from the given source\n     * @param src The source to load\n     */\n    public async loadImage(src: IllustratorImageSource) {\n        const img = await this.load(src);\n        return new IllustratorImage(img);\n    }\n\n    public async compressJPEG(src: Buffer, options?: JpegCompressOptions | null) {\n        return await compressJpeg(src, options);\n    }\n\n    public compressJPEGSync(src: Buffer, options?: JpegCompressOptions | null) {\n        return compressJpegSync(src, options);\n    }\n\n    public async compressPNGLossless(src: Buffer, options?: PNGLosslessOptions | null) {\n        return await losslessCompressPng(src, options);\n    }\n\n    public compressPNGLosslessSync(src: Buffer, options?: PNGLosslessOptions | null) {\n        return losslessCompressPngSync(src, options);\n    }\n\n    public async PNGQuantize(src: Buffer, options?: PngQuantOptions | null) {\n        return await pngQuantize(src, options);\n    }\n\n    public PNGQuantizeSync(src: Buffer, options?: PngQuantOptions | null) {\n        return pngQuantizeSync(src, options);\n    }\n}\n\nexport { JpegCompressOptions, PNGLosslessOptions, PngQuantOptions };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ImageDataSource.html":{"url":"interfaces/ImageDataSource.html","title":"interface - ImageDataSource","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ImageDataSource\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/DataSource.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            config\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        config:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         IllustratorImageSource\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IllustratorImageSource\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IllustratorImageSource } from \"../image/ImageLoader\";\n\nexport interface IllustratorDataSource {\n    name: string;\n    type: \"text\" | \"image\";\n    data: TextDataSource | ImageDataSource;\n}\n\nexport interface TextDataSource {\n    value: string;\n    config: {\n        x: number;\n        y: number;\n        maxWidth?: number;\n        font: string;\n        fontPath?: string;\n    };\n}\n\n// TODO: template api\nexport interface ImageDataSource {\n    value: IllustratorImageSource;\n    config: {\n        x: number;\n        y: number;\n        width: number;\n        height: number;\n        radius?: number;\n    };\n}\n\nexport class DataSource {\n    public data: Array = [];\n\n    public loadData(data: Array) {\n        if (!Array.isArray(data)) throw new TypeError(\"data source must be array\");\n        this.data = data;\n    }\n\n    public addData(data: IllustratorDataSource) {\n        this.data.push(data);\n    }\n\n    public removeData(nameOrFn: string | ((ctx: IllustratorDataSource) => boolean)) {\n        if (typeof nameOrFn === \"string\") this.data = this.data.filter((ds) => ds.name === nameOrFn);\n        if (typeof nameOrFn === \"function\") this.data = this.data.filter(nameOrFn);\n        throw new Error(\"invalid parameter\");\n    }\n\n    public get(nameOrFn: string | ((ctx: IllustratorDataSource) => boolean)) {\n        return this.data.find(typeof nameOrFn === \"function\" ? nameOrFn : (fn) => fn.name === nameOrFn);\n    }\n\n    public toJSON() {\n        return this.data;\n    }\n\n    public toArray() {\n        return this.data;\n    }\n\n    public toString(): `DataSource` {\n        return `DataSource`;\n    }\n\n    public clone() {\n        const ds = new DataSource();\n        ds.loadData(this.data.slice());\n        return ds;\n    }\n\n    public *[Symbol.iterator](): IterableIterator {\n        yield* this.data ?? [];\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImageLoader.html":{"url":"classes/ImageLoader.html","title":"class - ImageLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImageLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/image/ImageLoader.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                createImage\n                            \n                            \n                                    Static\n                                    Async\n                                loadImage\n                            \n                            \n                                    Static\n                                    Async\n                                loadImage\n                            \n                            \n                                    Static\n                                    Async\n                                loadImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        createImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    createImage(data: Buffer)\n                \n            \n\n\n            \n                \n                    Defined in src/image/ImageLoader.ts:126\n                \n            \n\n\n            \n                \n                    Creates Image instance\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The image source data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Image\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        loadImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadImage(source: IllustratorImageSource, bufferOnly?)\n                \n            \n\n\n            \n                \n                    Defined in src/image/ImageLoader.ts:81\n                \n            \n\n\n            \n                \n                    Loads the given source into Image instance.\nconst image = await loadImage(\"https://example.com/image.png\");\nconsole.log(image.width, image.height);\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    source\n                                    \n                                                IllustratorImageSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The image source to load\n\n                                    \n                                \n                                \n                                    bufferOnly\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            import { loadImage } from &quot;illustrator.js&quot;;\nconst image = await loadImage(&quot;https://example.com/image.png&quot;);\nconsole.log(image.width, image.height);\n                        \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        loadImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadImage(source: IllustratorImageSource, bufferOnly?)\n                \n            \n\n\n            \n                \n                    Defined in src/image/ImageLoader.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    source\n                                    \n                                                IllustratorImageSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bufferOnly\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        loadImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadImage(source: IllustratorImageSource, bufferOnly?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/image/ImageLoader.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    source\n                                    \n                                                IllustratorImageSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bufferOnly\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Canvas, Image, ImageData } from \"@napi-rs/canvas\";\nimport * as fs from \"fs\";\nimport * as http from \"http\";\nimport * as https from \"https\";\nimport { Readable } from \"stream\";\nimport { Illustrator } from \"../illustrator/Illustrator\";\nimport { IllustratorImage } from \"./IllustratorImage\";\nimport { Layer } from \"../layer/Layer\";\nimport isBufferLike from \"is-buffer-like\";\n\nexport type IllustratorImageSource =\n    | string\n    | URL\n    | Buffer\n    | Image\n    | Canvas\n    | ArrayBuffer\n    | SharedArrayBuffer\n    | Uint8Array\n    | Layer\n    | Illustrator\n    | IllustratorImage\n    | ImageData;\n\nfunction createImage(source: Buffer, bufferOnly = false) {\n    if (bufferOnly) return source;\n    const image = new Image();\n    image.src = source;\n    return image;\n}\n\n// TODO: use stream/consumers for this?\nfunction consumeStream(stream: Readable) {\n    return new Promise((resolve, reject) => {\n        const body: Buffer[] = [];\n\n        stream.on(\"data\", (chunk: Buffer) => body.push(chunk));\n        stream.on(\"end\", () => resolve(Buffer.concat(body)));\n        stream.on(\"error\", (err) => reject(err));\n    });\n}\n\nfunction makeRequest(\n    link: string | URL,\n    redirectCount: number,\n    resolve: (v: Buffer) => void,\n    reject: (e: Error) => void\n) {\n    const url = typeof link === \"string\" ? new URL(link) : link;\n    const reqBy = url.protocol === \"http:\" ? http : https;\n    reqBy.get(url, (res) => {\n        const shouldRedirect =\n            [301, 302].includes(res.statusCode as number) && typeof res.headers.location === \"string\";\n        if (shouldRedirect && redirectCount > 0)\n            return makeRequest(res.headers.location as string, redirectCount - 1, resolve, reject);\n        if (typeof res.statusCode === \"number\" && !(res.statusCode >= 200 && res.statusCode  {\n    return new Promise((resolve, reject) => makeRequest(link, 20, resolve, reject));\n}\n\nexport class ImageLoader extends null {\n    private constructor() {\n        /* no-op */\n    }\n\n    /**\n     * Loads the given source into `Image` instance.\n     * @param source The image source to load\n     * @example import { loadImage } from \"illustrator.js\";\n     *\n     * const image = await loadImage(\"https://example.com/image.png\");\n     * console.log(image.width, image.height);\n     */\n    public static async loadImage(source: IllustratorImageSource, bufferOnly?: false): Promise;\n    public static async loadImage(source: IllustratorImageSource, bufferOnly?: true): Promise;\n    public static async loadImage(source: IllustratorImageSource, bufferOnly?: boolean): Promise {\n        if (source instanceof Readable) return createImage(await consumeStream(source), bufferOnly);\n        if (Buffer.isBuffer(source)) return createImage(source, bufferOnly);\n        if (isBufferLike(source)) return createImage(Buffer.from(source as Buffer), bufferOnly);\n        if (source instanceof Image) return createImage(source.src, bufferOnly);\n        if (source instanceof Canvas) return createImage(await source.encode(\"png\"), bufferOnly);\n        if (source instanceof Layer)\n            return createImage(await ((await source.render()) as Canvas).encode(\"png\"), bufferOnly);\n        if (source instanceof Illustrator) return createImage(await source.export(), bufferOnly);\n        if (source instanceof IllustratorImage) return createImage(await source.png(), bufferOnly);\n        if (source instanceof ImageData) {\n            const img = await IllustratorImage.fromImageData(source);\n            return createImage(await img.png(), bufferOnly);\n        }\n        if ((typeof source === \"string\" || source instanceof URL) && fs.existsSync(source)) {\n            const data = await fs.promises.readFile(source);\n            return createImage(data, bufferOnly);\n        }\n\n        if (typeof source === \"string\" || source instanceof URL) {\n            if (typeof fetch === \"function\") {\n                const ab = await fetch(source as unknown as RequestInfo, {\n                    method: \"GET\",\n                    redirect: \"follow\"\n                }).then((res) => {\n                    if (!res.ok) throw new Error(`request for image source rejected with status code \"${res.status}\"`);\n                    return res.arrayBuffer();\n                });\n\n                return createImage(Buffer.from(ab), bufferOnly);\n            } else {\n                const res = await httpReq(source);\n                return createImage(res, bufferOnly);\n            }\n        }\n\n        throw new TypeError(\"Unsupported source type\");\n    }\n\n    /**\n     * Creates `Image` instance\n     * @param data The image source data\n     */\n    public static createImage(data: Buffer) {\n        return createImage(data, false) as Image;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImageTool.html":{"url":"classes/ImageTool.html","title":"class - ImageTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImageTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/image/Image.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ToolBox\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                drawRounded\n                            \n                            \n                                    Public\n                                load\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        draw\n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(image: Image, dx: number, dy: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/image/Image.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                            Image\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dx\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dy\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        draw\n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(image: Image, dx: number, dy: number, dw: number, dh: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/image/Image.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                            Image\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dx\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dy\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dw\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dh\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        draw\n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(image: Image, dx: number, dy: number, dw: number, dh: number, circle)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/image/Image.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                            Image\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dx\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dy\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dw\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dh\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    circle\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        draw\n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(image: Image, dx: number, dy: number, dw?: number, dh?: number, circle?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/image/Image.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                            Image\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dx\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dy\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dw\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    dh\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    circle\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        drawRounded\n                        \n                    \n                \n            \n            \n                \n                    \n                    drawRounded(image: Image, dx: number, dy: number, dw: number, dh: number, radius: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/image/Image.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                            Image\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dx\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dy\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dw\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dh\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    radius\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        load\n                        \n                    \n                \n            \n            \n                \n                    \n                    load(source: IllustratorImageSource)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/image/Image.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    source\n                                    \n                                                IllustratorImageSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Image } from \"@napi-rs/canvas\";\nimport { ImageLoader, IllustratorImageSource } from \"../../image/ImageLoader\";\nimport { ToolBox } from \"../base/ToolBox\";\n\nexport class ImageTool extends ToolBox {\n    public load(source: IllustratorImageSource) {\n        return ImageLoader.loadImage(source);\n    }\n\n    public draw(image: Image, dx: number, dy: number): this;\n    public draw(image: Image, dx: number, dy: number, dw: number, dh: number): this;\n    public draw(image: Image, dx: number, dy: number, dw: number, dh: number, circle: true): this;\n    public draw(image: Image, dx: number, dy: number, dw?: number, dh?: number, circle?: boolean): this {\n        // eslint-disable-next-line prefer-rest-params\n        const args = arguments;\n        this.history.push((ctx) => {\n            ctx.save();\n\n            if (args.length === 4 && typeof dw === \"boolean\") {\n                this.drawRounded(image, dx, dy, image.width, image.height, image.width / 2);\n                return ctx.restore();\n            }\n\n            if ([dw, dh].every((x) => typeof x === \"number\") && circle) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                this.drawRounded(image, dx, dy, dw!, dh!, dw! / 2);\n                return ctx.restore();\n            }\n\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            if ([dw, dh].every((x) => typeof x === \"number\")) return ctx.drawImage(image, dx, dy, dw!, dh!);\n\n            return ctx.drawImage(image, dx, dy);\n        });\n\n        return this;\n    }\n\n    public drawRounded(image: Image, dx: number, dy: number, dw: number, dh: number, radius: number) {\n        this.history.push((ctx) => {\n            if (dw \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Layer.html":{"url":"classes/Layer.html","title":"class - Layer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Layer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/layer/Layer.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                coordinates\n                            \n                            \n                                    Public\n                                height\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                manager\n                            \n                            \n                                    Public\n                                tools\n                            \n                            \n                                    Public\n                                utils\n                            \n                            \n                                    Public\n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                applyTool\n                            \n                            \n                                    Public\n                                createTransformation\n                            \n                            \n                                    Public\n                                duplicate\n                            \n                            \n                                    Public\n                                hide\n                            \n                            \n                                    Public\n                                isHidden\n                            \n                            \n                                    Public\n                                isLocked\n                            \n                            \n                                    Public\n                                lock\n                            \n                            \n                                    Public\n                                    Async\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                            \n                                    Public\n                                setHistory\n                            \n                            \n                                    Public\n                                setPosition\n                            \n                            \n                                    Public\n                                show\n                            \n                            \n                                    Public\n                                unlock\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                                \n                                    illustrator\n                                \n                                \n                                    context\n                                \n                                \n                                    position\n                                \n                                \n                                    locked\n                                \n                                \n                                    hidden\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(manager: LayerManager, id: number, options?: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/layer/Layer.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        manager\n                                                  \n                                                        \n                                                                        LayerManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        coordinates\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n        x: 0,\n        y: 0\n    }\n                    \n                \n                    \n                        \n                                Defined in src/layer/Layer.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/layer/Layer.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/layer/Layer.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        manager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LayerManager\n\n                    \n                \n                    \n                        \n                                Defined in src/layer/Layer.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tools\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new LayerTools(this)\n                    \n                \n                    \n                        \n                                Defined in src/layer/Layer.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        utils\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LayerUtils\n\n                    \n                \n                    \n                        \n                                Defined in src/layer/Layer.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        width\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/layer/Layer.ts:30\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        applyTool\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyTool(tool: ToolBox)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tool\n                                    \n                                                ToolBox\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        createTransformation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTransformation(data: LayerTransformationData)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                LayerTransformationData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        duplicate\n                        \n                    \n                \n            \n            \n                \n                    \n                    duplicate(name)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        `${this.name} Copy`\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        hide\n                        \n                    \n                \n            \n            \n                \n                    \n                    hide()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isHidden\n                        \n                    \n                \n            \n            \n                \n                    \n                    isHidden()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isLocked\n                        \n                    \n                \n            \n            \n                \n                    \n                    isLocked()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        lock\n                        \n                    \n                \n            \n            \n                \n                    \n                    lock()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setHistory\n                        \n                    \n                \n            \n            \n                \n                    \n                    setHistory(history: LayerToolHistory)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    history\n                                    \n                                                LayerToolHistory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setPosition\n                        \n                    \n                \n            \n            \n                \n                    \n                    setPosition(position: number)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    position\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        show\n                        \n                    \n                \n            \n            \n                \n                    \n                    show()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        unlock\n                        \n                    \n                \n            \n            \n                \n                    \n                    unlock()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/Layer.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in src/layer/Layer.ts:48\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        illustrator\n                    \n                \n\n                \n                    \n                        getillustrator()\n                    \n                \n                            \n                                \n                                    Defined in src/layer/Layer.ts:52\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        context\n                    \n                \n\n                \n                    \n                        getcontext()\n                    \n                \n                            \n                                \n                                    Defined in src/layer/Layer.ts:56\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        position\n                    \n                \n\n                \n                    \n                        getposition()\n                    \n                \n                            \n                                \n                                    Defined in src/layer/Layer.ts:60\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        locked\n                    \n                \n\n                \n                    \n                        getlocked()\n                    \n                \n                            \n                                \n                                    Defined in src/layer/Layer.ts:74\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        hidden\n                    \n                \n\n                \n                    \n                        gethidden()\n                    \n                \n                            \n                                \n                                    Defined in src/layer/Layer.ts:96\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Canvas, createCanvas, SKRSContext2D } from \"@napi-rs/canvas\";\nimport { ToolBox } from \"../toolbox/base/ToolBox\";\nimport { LayerManager } from \"./LayerManager\";\nimport { LayerTools } from \"./LayerTools\";\nimport { LayerUtils } from \"./LayerUtils\";\n\nexport type LayerToolHistory = Array Promise | void>[];\n\nexport interface LayerTransformationData {\n    coordinates?: {\n        x: number;\n        y: number;\n    };\n    height?: number;\n    width?: number;\n}\n\nexport class Layer {\n    #canvas: Canvas;\n    #ctx: SKRSContext2D;\n    #locked = false;\n    #hidden = false;\n    #toolHistory: LayerToolHistory = [];\n    public utils: LayerUtils;\n    public tools = new LayerTools(this);\n    public coordinates = {\n        x: 0,\n        y: 0\n    };\n    public width: number;\n    public height: number;\n\n    public constructor(\n        public readonly manager: LayerManager,\n        public readonly id: number,\n        options?: {\n            width?: number;\n            height?: number;\n        }\n    ) {\n        this.height = options?.height ?? this.manager.illustrator.height;\n        this.width = options?.width ?? this.manager.illustrator.width;\n        this.#canvas = createCanvas(this.width, this.height);\n        this.#ctx = this.#canvas.getContext(\"2d\");\n        this.utils = new LayerUtils(this.#ctx);\n    }\n\n    public get name() {\n        return this.manager.resolve(this)?.name as string;\n    }\n\n    public get illustrator() {\n        return this.manager.illustrator;\n    }\n\n    public get context() {\n        return this.#ctx;\n    }\n\n    public get position() {\n        return this.manager.getLayerPosition(this);\n    }\n\n    public setPosition(position: number) {\n        return this.manager.setLayerPosition(this, position);\n    }\n\n    public createTransformation(data: LayerTransformationData) {\n        if (data.coordinates) this.coordinates = data.coordinates;\n        if (data.width) this.width = data.width;\n        if (data.height) this.height = data.height;\n    }\n\n    public get locked() {\n        return this.#locked;\n    }\n\n    public isLocked() {\n        return this.locked;\n    }\n\n    public lock() {\n        this.#locked = true;\n        return this;\n    }\n\n    public unlock() {\n        this.#locked = false;\n        return this;\n    }\n\n    public isHidden() {\n        return this.hidden;\n    }\n\n    public get hidden() {\n        return this.#hidden;\n    }\n\n    public hide() {\n        this.#hidden = true;\n        return this;\n    }\n\n    public show() {\n        this.#hidden = false;\n        return this;\n    }\n\n    public save() {\n        this.#ctx.save();\n    }\n\n    public restore() {\n        this.#ctx.restore();\n    }\n\n    public duplicate(name = `${this.name} Copy`) {\n        return this.manager.duplicateLayer(this, this.#toolHistory, {\n            name,\n            config: {\n                height: this.height,\n                width: this.width\n            },\n            position: this.position + 1\n        });\n    }\n\n    public applyTool(tool: ToolBox) {\n        this.#throwIfLocked();\n        if (!(tool instanceof ToolBox)) throw new Error(\"tool must be a ToolBox instance\");\n        this.#toolHistory.push(tool.history);\n    }\n\n    public setHistory(history: LayerToolHistory) {\n        this.#toolHistory = history;\n    }\n\n    #throwIfLocked() {\n        if (this.#locked) throw new Error(\"Cannot perform operations on locked layer\");\n    }\n\n    public async render() {\n        if (this.#hidden) return null;\n        await Promise.all(this.#toolHistory.flat(2).map((m) => m(this.#ctx)));\n        return this.#canvas;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LayerManager.html":{"url":"classes/LayerManager.html","title":"class - LayerManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LayerManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/layer/LayerManager.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                illustrator\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                count\n                            \n                            \n                                    Public\n                                createLayer\n                            \n                            \n                                    Public\n                                deleteLayer\n                            \n                            \n                                    Public\n                                duplicateLayer\n                            \n                            \n                                    Public\n                                getAllLayers\n                            \n                            \n                                    Public\n                                getLayer\n                            \n                            \n                                    Public\n                                getLayerPosition\n                            \n                            \n                                    Public\n                                hasLayer\n                            \n                            \n                                    Public\n                                iterate\n                            \n                            \n                                    Public\n                                resolve\n                            \n                            \n                                    Public\n                                resolveId\n                            \n                            \n                                    Public\n                                resolveLayer\n                            \n                            \n                                    Public\n                                setLayerPosition\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(illustrator: Illustrator)\n                    \n                \n                        \n                            \n                                Defined in src/layer/LayerManager.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        illustrator\n                                                  \n                                                        \n                                                                        Illustrator\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        illustrator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Illustrator\n\n                    \n                \n                    \n                        \n                                Defined in src/layer/LayerManager.ts:27\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        count\n                        \n                    \n                \n            \n            \n                \n                    \n                    count()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        createLayer\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLayer(options: CreateLayerOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                CreateLayerOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Layer\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        deleteLayer\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteLayer(layer: LayerResolvable)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                LayerResolvable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        duplicateLayer\n                        \n                    \n                \n            \n            \n                \n                    \n                    duplicateLayer(layer: Layer, history: LayerToolHistory, options: CreateLayerOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                Layer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    history\n                                    \n                                                LayerToolHistory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                CreateLayerOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Layer\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getAllLayers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllLayers(ordered)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    ordered\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getLayer\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLayer(layer: LayerResolvable)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                LayerResolvable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getLayerPosition\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLayerPosition(layer: LayerResolvable)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                LayerResolvable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        hasLayer\n                        \n                    \n                \n            \n            \n                \n                    \n                    hasLayer(layer: LayerResolvable)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                LayerResolvable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        iterate\n                        \n                    \n                \n            \n            \n                \n                    \n                    iterate()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        resolve\n                        \n                    \n                \n            \n            \n                \n                    \n                    resolve(layer: LayerResolvable)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                LayerResolvable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        resolveId\n                        \n                    \n                \n            \n            \n                \n                    \n                    resolveId(layer: LayerResolvable)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                LayerResolvable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        resolveLayer\n                        \n                    \n                \n            \n            \n                \n                    \n                    resolveLayer(layer: LayerResolvable)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                LayerResolvable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLayerPosition\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLayerPosition(layer: LayerResolvable, position: number)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerManager.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                LayerResolvable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    position\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IllustratorCollection } from \"../utils/IllustratorCollection\";\nimport { generateRandomId } from \"../utils/randomId\";\nimport { Illustrator } from \"../illustrator/Illustrator\";\nimport { Layer, LayerToolHistory } from \"./Layer\";\n\nexport interface CreateLayerOptions {\n    name: string;\n    position?: number;\n    config?: {\n        height?: number;\n        width?: number;\n    };\n}\n\nexport interface LayerWrapper {\n    layer: Layer;\n    name: string;\n    id: number;\n    position: number;\n}\n\nexport type LayerResolvable = number | Layer | string;\n\nexport class LayerManager {\n    #layers = new IllustratorCollection();\n\n    public constructor(public readonly illustrator: Illustrator) {}\n\n    public count() {\n        return this.#layers.size;\n    }\n\n    public createLayer(options: CreateLayerOptions) {\n        if (!options.name || typeof options.name !== \"string\") throw new Error(\"Layer name is required\");\n        if (this.#layers.findKey((x) => x.name === options.name))\n            throw new Error(\"Layer with that name already exists\");\n        const id = generateRandomId();\n        const layerObj: LayerWrapper = {\n            id,\n            layer: new Layer(this, id, options.config),\n            name: options.name,\n            position: options.position ?? this.count() + 1\n        };\n\n        this.#layers.set(layerObj.id, layerObj);\n        // rearrange\n        layerObj.layer.setPosition(layerObj.position);\n\n        return layerObj.layer;\n    }\n\n    public duplicateLayer(layer: Layer, history: LayerToolHistory, options: CreateLayerOptions) {\n        if (!options.name || typeof options.name !== \"string\") throw new Error(\"Layer name is required\");\n        if (this.#layers.findKey((x) => x.name === options.name))\n            throw new Error(\"Layer with that name already exists\");\n        const id = generateRandomId();\n        const layerObj: LayerWrapper = {\n            id,\n            layer: new Layer(this, id, options.config),\n            name: options.name,\n            position: options.position ?? this.count() + 1\n        };\n\n        layerObj.layer.setHistory(history);\n\n        this.#layers.set(layerObj.id, layerObj);\n        layerObj.layer.setPosition(layer.position + 1);\n\n        return layerObj.layer;\n    }\n\n    public deleteLayer(layer: LayerResolvable) {\n        const id = this.resolveId(layer);\n        if (id == null) return false;\n        return this.#layers.delete(id);\n    }\n\n    public hasLayer(layer: LayerResolvable) {\n        const id = this.resolveId(layer);\n        return id != null;\n    }\n\n    public getLayer(layer: LayerResolvable) {\n        const l = this.resolveLayer(layer);\n        if (l == null) return null;\n        return l;\n    }\n\n    public getLayerPosition(layer: LayerResolvable) {\n        const l = this.resolve(layer);\n        if (!l) return -1;\n        return l.position;\n    }\n\n    public setLayerPosition(layer: LayerResolvable, position: number) {\n        if (position  l.position >= position);\n        layersToBeUpdated.forEach((l) => {\n            this.#layers.set(l.id, {\n                ...l,\n                position: l.position + 1\n            });\n        });\n        this.#layers.set(l.id, {\n            ...l,\n            position\n        });\n        return this.#layers.get(l.id)?.position ?? -1;\n    }\n\n    public resolveLayer(layer: LayerResolvable) {\n        return this.resolve(layer)?.layer;\n    }\n\n    public resolveId(layer: LayerResolvable) {\n        return this.resolve(layer)?.id;\n    }\n\n    public resolve(layer: LayerResolvable) {\n        if (layer instanceof Layer) return this.#layers.get(layer.id);\n        if (typeof layer === \"number\") return this.#layers.get(layer);\n        if (typeof layer === \"string\") return this.#layers.find((l) => l.name === layer);\n    }\n\n    public getAllLayers(ordered = true) {\n        return ordered ? this.#layers.array().sort((a, b) => b.position - a.position) : this.#layers.array();\n    }\n\n    public iterate() {\n        return this.#layers.values();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LayerToolConfig.html":{"url":"interfaces/LayerToolConfig.html","title":"interface - LayerToolConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LayerToolConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/layer/LayerTools.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cache\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cache\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cache:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:     Name\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Name\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Layer } from \"./Layer\";\nimport * as Tools from \"../toolbox/exports\";\nimport { IllustratorCollection } from \"../utils/IllustratorCollection\";\n\nexport interface LayerToolConfig {\n    name: Name;\n    cache?: boolean;\n}\n\nexport class LayerTools {\n    #toolsCache = new IllustratorCollection();\n    public constructor(public readonly layer: Layer) {}\n\n    public clearCache() {\n        this.#toolsCache.clear();\n    }\n\n    public delete(name: K) {\n        return this.#toolsCache.delete(name);\n    }\n\n    public isCached(name: K) {\n        return this.#toolsCache.has(name);\n    }\n\n    public get(name: K, cache?: boolean): InstanceType;\n    public get(config: LayerToolConfig): InstanceType;\n    public get(\n        nameOrConfig: LayerToolConfig | K,\n        cache?: boolean\n    ): InstanceType {\n        const name = typeof nameOrConfig === \"string\" ? nameOrConfig : nameOrConfig.name;\n        const shouldCache = !!(typeof nameOrConfig === \"object\" ? nameOrConfig.cache : cache);\n        if (typeof name !== \"string\" || !name)\n            throw new TypeError(`tool name must be a string, received ${typeof name}`);\n        if (!shouldCache && this.#toolsCache.has(name))\n            return this.#toolsCache.get(name) as unknown as InstanceType;\n        if (!Tools[name]) throw new Error(`Unknown tool ${name}`);\n        const toolConstructor = Tools[name];\n        const tool = new toolConstructor(this.layer);\n        if (shouldCache) this.#toolsCache.set(name, tool);\n        return tool as unknown as InstanceType;\n    }\n\n    public isValidTool(name: K) {\n        return name in Tools;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LayerTools.html":{"url":"classes/LayerTools.html","title":"class - LayerTools","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LayerTools\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/layer/LayerTools.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clearCache\n                            \n                            \n                                    Public\n                                delete\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                isCached\n                            \n                            \n                                    Public\n                                isValidTool\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(layer: Layer)\n                    \n                \n                        \n                            \n                                Defined in src/layer/LayerTools.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        layer\n                                                  \n                                                        \n                                                                        Layer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                    \n                        \n                                Defined in src/layer/LayerTools.ts:12\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clearCache\n                        \n                    \n                \n            \n            \n                \n                    \n                    clearCache()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerTools.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(name: K)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerTools.ts:18\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                            K\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(name: K, cache?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerTools.ts:26\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                            K\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cache\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     InstanceType<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(config: LayerToolConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerTools.ts:27\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                LayerToolConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     InstanceType<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(nameOrConfig: LayerToolConfig | K, cache?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerTools.ts:28\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nameOrConfig\n                                    \n                                                LayerToolConfig | K\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cache\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     InstanceType<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isCached\n                        \n                    \n                \n            \n            \n                \n                    \n                    isCached(name: K)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerTools.ts:22\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                            K\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isValidTool\n                        \n                    \n                \n            \n            \n                \n                    \n                    isValidTool(name: K)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerTools.ts:45\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                            K\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Layer } from \"./Layer\";\nimport * as Tools from \"../toolbox/exports\";\nimport { IllustratorCollection } from \"../utils/IllustratorCollection\";\n\nexport interface LayerToolConfig {\n    name: Name;\n    cache?: boolean;\n}\n\nexport class LayerTools {\n    #toolsCache = new IllustratorCollection();\n    public constructor(public readonly layer: Layer) {}\n\n    public clearCache() {\n        this.#toolsCache.clear();\n    }\n\n    public delete(name: K) {\n        return this.#toolsCache.delete(name);\n    }\n\n    public isCached(name: K) {\n        return this.#toolsCache.has(name);\n    }\n\n    public get(name: K, cache?: boolean): InstanceType;\n    public get(config: LayerToolConfig): InstanceType;\n    public get(\n        nameOrConfig: LayerToolConfig | K,\n        cache?: boolean\n    ): InstanceType {\n        const name = typeof nameOrConfig === \"string\" ? nameOrConfig : nameOrConfig.name;\n        const shouldCache = !!(typeof nameOrConfig === \"object\" ? nameOrConfig.cache : cache);\n        if (typeof name !== \"string\" || !name)\n            throw new TypeError(`tool name must be a string, received ${typeof name}`);\n        if (!shouldCache && this.#toolsCache.has(name))\n            return this.#toolsCache.get(name) as unknown as InstanceType;\n        if (!Tools[name]) throw new Error(`Unknown tool ${name}`);\n        const toolConstructor = Tools[name];\n        const tool = new toolConstructor(this.layer);\n        if (shouldCache) this.#toolsCache.set(name, tool);\n        return tool as unknown as InstanceType;\n    }\n\n    public isValidTool(name: K) {\n        return name in Tools;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LayerTransformationData.html":{"url":"interfaces/LayerTransformationData.html","title":"interface - LayerTransformationData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LayerTransformationData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/layer/Layer.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            coordinates\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            height\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        coordinates\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        coordinates:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Canvas, createCanvas, SKRSContext2D } from \"@napi-rs/canvas\";\nimport { ToolBox } from \"../toolbox/base/ToolBox\";\nimport { LayerManager } from \"./LayerManager\";\nimport { LayerTools } from \"./LayerTools\";\nimport { LayerUtils } from \"./LayerUtils\";\n\nexport type LayerToolHistory = Array Promise | void>[];\n\nexport interface LayerTransformationData {\n    coordinates?: {\n        x: number;\n        y: number;\n    };\n    height?: number;\n    width?: number;\n}\n\nexport class Layer {\n    #canvas: Canvas;\n    #ctx: SKRSContext2D;\n    #locked = false;\n    #hidden = false;\n    #toolHistory: LayerToolHistory = [];\n    public utils: LayerUtils;\n    public tools = new LayerTools(this);\n    public coordinates = {\n        x: 0,\n        y: 0\n    };\n    public width: number;\n    public height: number;\n\n    public constructor(\n        public readonly manager: LayerManager,\n        public readonly id: number,\n        options?: {\n            width?: number;\n            height?: number;\n        }\n    ) {\n        this.height = options?.height ?? this.manager.illustrator.height;\n        this.width = options?.width ?? this.manager.illustrator.width;\n        this.#canvas = createCanvas(this.width, this.height);\n        this.#ctx = this.#canvas.getContext(\"2d\");\n        this.utils = new LayerUtils(this.#ctx);\n    }\n\n    public get name() {\n        return this.manager.resolve(this)?.name as string;\n    }\n\n    public get illustrator() {\n        return this.manager.illustrator;\n    }\n\n    public get context() {\n        return this.#ctx;\n    }\n\n    public get position() {\n        return this.manager.getLayerPosition(this);\n    }\n\n    public setPosition(position: number) {\n        return this.manager.setLayerPosition(this, position);\n    }\n\n    public createTransformation(data: LayerTransformationData) {\n        if (data.coordinates) this.coordinates = data.coordinates;\n        if (data.width) this.width = data.width;\n        if (data.height) this.height = data.height;\n    }\n\n    public get locked() {\n        return this.#locked;\n    }\n\n    public isLocked() {\n        return this.locked;\n    }\n\n    public lock() {\n        this.#locked = true;\n        return this;\n    }\n\n    public unlock() {\n        this.#locked = false;\n        return this;\n    }\n\n    public isHidden() {\n        return this.hidden;\n    }\n\n    public get hidden() {\n        return this.#hidden;\n    }\n\n    public hide() {\n        this.#hidden = true;\n        return this;\n    }\n\n    public show() {\n        this.#hidden = false;\n        return this;\n    }\n\n    public save() {\n        this.#ctx.save();\n    }\n\n    public restore() {\n        this.#ctx.restore();\n    }\n\n    public duplicate(name = `${this.name} Copy`) {\n        return this.manager.duplicateLayer(this, this.#toolHistory, {\n            name,\n            config: {\n                height: this.height,\n                width: this.width\n            },\n            position: this.position + 1\n        });\n    }\n\n    public applyTool(tool: ToolBox) {\n        this.#throwIfLocked();\n        if (!(tool instanceof ToolBox)) throw new Error(\"tool must be a ToolBox instance\");\n        this.#toolHistory.push(tool.history);\n    }\n\n    public setHistory(history: LayerToolHistory) {\n        this.#toolHistory = history;\n    }\n\n    #throwIfLocked() {\n        if (this.#locked) throw new Error(\"Cannot perform operations on locked layer\");\n    }\n\n    public async render() {\n        if (this.#hidden) return null;\n        await Promise.all(this.#toolHistory.flat(2).map((m) => m(this.#ctx)));\n        return this.#canvas;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LayerUtils.html":{"url":"classes/LayerUtils.html","title":"class - LayerUtils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LayerUtils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/layer/LayerUtils.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createConicGradient\n                            \n                            \n                                    Public\n                                createLinearGradient\n                            \n                            \n                                    Public\n                                createPattern\n                            \n                            \n                                    Public\n                                createRadialGradient\n                            \n                            \n                                    Public\n                                getCenterPoint\n                            \n                            \n                                    Public\n                                getImageData\n                            \n                            \n                                    Public\n                                getLayerTransformation\n                            \n                            \n                                    Public\n                                measureText\n                            \n                            \n                                    Public\n                                putImageData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(ctx: SKRSContext2D)\n                    \n                \n                        \n                            \n                                Defined in src/layer/LayerUtils.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ctx\n                                                  \n                                                        \n                                                                    SKRSContext2D\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        createConicGradient\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConicGradient(startAngle: number, x: number, y: number)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerUtils.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    startAngle\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        createLinearGradient\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLinearGradient(x0: number, x1: number, y0: number, y1: number)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerUtils.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x0\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    x1\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y0\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y1\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        createPattern\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPattern(image: Image | ImageData, repeat: \"repeat\" | \"repeat-x\" | \"repeat-y\" | \"no-repeat\" | null)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerUtils.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                            Image | ImageData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repeat\n                                    \n                                            \"repeat\" | \"repeat-x\" | \"repeat-y\" | \"no-repeat\" | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        createRadialGradient\n                        \n                    \n                \n            \n            \n                \n                    \n                    createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerUtils.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x0\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y0\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    r0\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    x1\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y1\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    r1\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCenterPoint\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCenterPoint(divider: number)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerUtils.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    divider\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        2\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { x: number; y: number; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getImageData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getImageData(sx: number, sy: number, sw, sh)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerUtils.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    sx\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    sy\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    sw\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.#ctx.canvas.width\n                                    \n\n                                \n                                \n                                    sh\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        this.#ctx.canvas.height\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getLayerTransformation\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLayerTransformation()\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerUtils.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        measureText\n                        \n                    \n                \n            \n            \n                \n                    \n                    measureText(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerUtils.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        putImageData\n                        \n                    \n                \n            \n            \n                \n                    \n                    putImageData(data, dx: number, dy: number)\n                \n            \n\n\n            \n                \n                    Defined in src/layer/LayerUtils.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dx\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dy\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ColorSpace, Image, ImageData, SKRSContext2D } from \"@napi-rs/canvas\";\n\nexport class LayerUtils {\n    #ctx: SKRSContext2D;\n\n    public constructor(ctx: SKRSContext2D) {\n        this.#ctx = ctx;\n    }\n\n    public measureText(text: string) {\n        return this.#ctx.measureText(text);\n    }\n\n    public getLayerTransformation() {\n        return this.#ctx.getTransform();\n    }\n\n    public createLinearGradient(x0: number, x1: number, y0: number, y1: number) {\n        return this.#ctx.createLinearGradient(x0, x1, y0, y1);\n    }\n\n    public createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number) {\n        return this.#ctx.createRadialGradient(x0, y0, r0, x1, y1, r1);\n    }\n\n    public createConicGradient(startAngle: number, x: number, y: number) {\n        return this.#ctx.createConicGradient(startAngle, x, y);\n    }\n\n    public createPattern(image: Image | ImageData, repeat: \"repeat\" | \"repeat-x\" | \"repeat-y\" | \"no-repeat\" | null) {\n        return this.#ctx.createPattern(image, repeat);\n    }\n\n    public getImageData(sx = 0, sy = 0, sw = this.#ctx.canvas.width, sh = this.#ctx.canvas.height) {\n        return this.#ctx.getImageData(sx, sy, sw, sh);\n    }\n\n    public putImageData(data: ImageData & { colorSpace: ColorSpace }, dx: number, dy: number) {\n        return this.#ctx.putImageData(data, dx, dy);\n    }\n\n    public getCenterPoint(divider = 2) {\n        if (typeof divider !== \"number\") throw new TypeError(\"divider must be a number\");\n\n        return {\n            x: this.#ctx.canvas.width / divider,\n            y: this.#ctx.canvas.height / divider\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LayerWrapper.html":{"url":"interfaces/LayerWrapper.html","title":"interface - LayerWrapper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LayerWrapper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/layer/LayerManager.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            layer\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            position\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        layer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        layer:         Layer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Layer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IllustratorCollection } from \"../utils/IllustratorCollection\";\nimport { generateRandomId } from \"../utils/randomId\";\nimport { Illustrator } from \"../illustrator/Illustrator\";\nimport { Layer, LayerToolHistory } from \"./Layer\";\n\nexport interface CreateLayerOptions {\n    name: string;\n    position?: number;\n    config?: {\n        height?: number;\n        width?: number;\n    };\n}\n\nexport interface LayerWrapper {\n    layer: Layer;\n    name: string;\n    id: number;\n    position: number;\n}\n\nexport type LayerResolvable = number | Layer | string;\n\nexport class LayerManager {\n    #layers = new IllustratorCollection();\n\n    public constructor(public readonly illustrator: Illustrator) {}\n\n    public count() {\n        return this.#layers.size;\n    }\n\n    public createLayer(options: CreateLayerOptions) {\n        if (!options.name || typeof options.name !== \"string\") throw new Error(\"Layer name is required\");\n        if (this.#layers.findKey((x) => x.name === options.name))\n            throw new Error(\"Layer with that name already exists\");\n        const id = generateRandomId();\n        const layerObj: LayerWrapper = {\n            id,\n            layer: new Layer(this, id, options.config),\n            name: options.name,\n            position: options.position ?? this.count() + 1\n        };\n\n        this.#layers.set(layerObj.id, layerObj);\n        // rearrange\n        layerObj.layer.setPosition(layerObj.position);\n\n        return layerObj.layer;\n    }\n\n    public duplicateLayer(layer: Layer, history: LayerToolHistory, options: CreateLayerOptions) {\n        if (!options.name || typeof options.name !== \"string\") throw new Error(\"Layer name is required\");\n        if (this.#layers.findKey((x) => x.name === options.name))\n            throw new Error(\"Layer with that name already exists\");\n        const id = generateRandomId();\n        const layerObj: LayerWrapper = {\n            id,\n            layer: new Layer(this, id, options.config),\n            name: options.name,\n            position: options.position ?? this.count() + 1\n        };\n\n        layerObj.layer.setHistory(history);\n\n        this.#layers.set(layerObj.id, layerObj);\n        layerObj.layer.setPosition(layer.position + 1);\n\n        return layerObj.layer;\n    }\n\n    public deleteLayer(layer: LayerResolvable) {\n        const id = this.resolveId(layer);\n        if (id == null) return false;\n        return this.#layers.delete(id);\n    }\n\n    public hasLayer(layer: LayerResolvable) {\n        const id = this.resolveId(layer);\n        return id != null;\n    }\n\n    public getLayer(layer: LayerResolvable) {\n        const l = this.resolveLayer(layer);\n        if (l == null) return null;\n        return l;\n    }\n\n    public getLayerPosition(layer: LayerResolvable) {\n        const l = this.resolve(layer);\n        if (!l) return -1;\n        return l.position;\n    }\n\n    public setLayerPosition(layer: LayerResolvable, position: number) {\n        if (position  l.position >= position);\n        layersToBeUpdated.forEach((l) => {\n            this.#layers.set(l.id, {\n                ...l,\n                position: l.position + 1\n            });\n        });\n        this.#layers.set(l.id, {\n            ...l,\n            position\n        });\n        return this.#layers.get(l.id)?.position ?? -1;\n    }\n\n    public resolveLayer(layer: LayerResolvable) {\n        return this.resolve(layer)?.layer;\n    }\n\n    public resolveId(layer: LayerResolvable) {\n        return this.resolve(layer)?.id;\n    }\n\n    public resolve(layer: LayerResolvable) {\n        if (layer instanceof Layer) return this.#layers.get(layer.id);\n        if (typeof layer === \"number\") return this.#layers.get(layer);\n        if (typeof layer === \"string\") return this.#layers.find((l) => l.name === layer);\n    }\n\n    public getAllLayers(ordered = true) {\n        return ordered ? this.#layers.array().sort((a, b) => b.position - a.position) : this.#layers.array();\n    }\n\n    public iterate() {\n        return this.#layers.values();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LineTool.html":{"url":"classes/LineTool.html","title":"class - LineTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LineTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/shapes/Line.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseShapeTool\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arc\n                            \n                            \n                                    Public\n                                arcTo\n                            \n                            \n                                    Public\n                                cubicBezierCurve\n                            \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                quadraticBezierCurve\n                            \n                            \n                                    Public\n                                addPoint\n                            \n                            \n                                    Public\n                                clip\n                            \n                            \n                                    Public\n                                fill\n                            \n                            \n                                    Public\n                                move\n                            \n                            \n                                    Public\n                                removePoint\n                            \n                            \n                                    Public\n                                setDashOffset\n                            \n                            \n                                    Public\n                                setFillColor\n                            \n                            \n                                    Public\n                                setLineCap\n                            \n                            \n                                    Public\n                                setLineDash\n                            \n                            \n                                    Public\n                                setLineJoinStyle\n                            \n                            \n                                    Public\n                                setLineWidth\n                            \n                            \n                                    Public\n                                setMiterLimit\n                            \n                            \n                                    Public\n                                setStrokeColor\n                            \n                            \n                                    Public\n                                stroke\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        arc\n                        \n                    \n                \n            \n            \n                \n                    \n                    arc(options: DrawArcOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/shapes/Line.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                DrawArcOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        arcTo\n                        \n                    \n                \n            \n            \n                \n                    \n                    arcTo(options: ArcToPoint)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/shapes/Line.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ArcToPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        cubicBezierCurve\n                        \n                    \n                \n            \n            \n                \n                    \n                    cubicBezierCurve(options: CubicBezierCurveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/shapes/Line.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                CubicBezierCurveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        draw\n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(from: number, to: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/shapes/Line.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    from\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        quadraticBezierCurve\n                        \n                    \n                \n            \n            \n                \n                    \n                    quadraticBezierCurve(options: QuadraticBezierCurveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/shapes/Line.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                QuadraticBezierCurveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addPoint\n                        \n                    \n                \n            \n            \n                \n                    \n                    addPoint()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:62\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clip\n                        \n                    \n                \n            \n            \n                \n                    \n                    clip(options?: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:116\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fill\n                        \n                    \n                \n            \n            \n                \n                    \n                    fill(options?: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:86\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        move\n                        \n                    \n                \n            \n            \n                \n                    \n                    move(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:78\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removePoint\n                        \n                    \n                \n            \n            \n                \n                    \n                    removePoint()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:70\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setDashOffset\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDashOffset(offset: number)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setFillColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setFillColor(color: string | CanvasGradient | CanvasPattern)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:6\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                            string | CanvasGradient | CanvasPattern\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineCap\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineCap(lineCapStyle: CanvasLineCap)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lineCapStyle\n                                    \n                                            CanvasLineCap\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineDash\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineDash(segments: number[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:108\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    segments\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineJoinStyle\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineJoinStyle(style: \"round\" | \"bevel\" | \"miter\")\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:46\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    style\n                                    \n                                            \"round\" | \"bevel\" | \"miter\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineWidth\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineWidth(width: number)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:22\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setMiterLimit\n                        \n                    \n                \n            \n            \n                \n                    \n                    setMiterLimit(limit: number)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:54\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setStrokeColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setStrokeColor(color: string | CanvasGradient | CanvasPattern)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:14\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                            string | CanvasGradient | CanvasPattern\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        stroke\n                        \n                    \n                \n            \n            \n                \n                    \n                    stroke(options?: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:100\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BaseShapeTool } from \"../base/BaseShapeTool\";\n\nexport interface DrawArcOptions {\n    x: number;\n    y: number;\n    radius: number;\n    startAngle: number;\n    endAngle: number;\n    counterclockwise?: boolean;\n}\n\nexport interface ArcToPoint {\n    x1: number;\n    y1: number;\n    x2: number;\n    y2: number;\n    radius: number;\n}\n\nexport interface QuadraticBezierCurveOptions {\n    controlPointX: number;\n    controlPointY: number;\n    x: number;\n    y: number;\n}\n\nexport interface CubicBezierCurveOptions {\n    firstControlPointX: number;\n    firstControlPointY: number;\n    secondControlPointX: number;\n    secondControlPointY: number;\n    x: number;\n    y: number;\n}\n\nexport class LineTool extends BaseShapeTool {\n    public draw(from: number, to: number) {\n        this.history.push((ctx) => {\n            ctx.lineTo(from, to);\n        });\n\n        return this;\n    }\n\n    public arc(options: DrawArcOptions) {\n        this.history.push((ctx) => {\n            ctx.arc(\n                options.x,\n                options.y,\n                options.radius,\n                options.startAngle,\n                options.endAngle,\n                !!options.counterclockwise\n            );\n        });\n\n        return this;\n    }\n\n    public arcTo(options: ArcToPoint) {\n        this.history.push((ctx) => {\n            ctx.arcTo(options.x1, options.y1, options.x2, options.y2, options.radius);\n        });\n\n        return this;\n    }\n\n    public quadraticBezierCurve(options: QuadraticBezierCurveOptions) {\n        this.history.push((ctx) => {\n            ctx.quadraticCurveTo(options.controlPointX, options.controlPointY, options.x, options.y);\n        });\n\n        return this;\n    }\n\n    public cubicBezierCurve(options: CubicBezierCurveOptions) {\n        this.history.push((ctx) => {\n            ctx.bezierCurveTo(\n                options.firstControlPointX,\n                options.firstControlPointY,\n                options.secondControlPointX,\n                options.secondControlPointY,\n                options.x,\n                options.y\n            );\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PixelTransformerContext.html":{"url":"interfaces/PixelTransformerContext.html","title":"interface - PixelTransformerContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PixelTransformerContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/pixels/Pixels.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            from\n                                        \n                                \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            to\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        from:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        to\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        to:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ToolBox } from \"../exports\";\nimport { IllustratorImageSource } from \"../../image/ImageLoader\";\nimport { IllustratorImage, IllustratorImageEnums } from \"../../image/IllustratorImage\";\n\nexport interface PixelTransformerContext {\n    from: number;\n    to: number;\n    width: number;\n    height: number;\n}\n\nexport interface PixelTransformerRenderContext {\n    from: number;\n    to: number;\n    width?: number;\n    height?: number;\n}\n\nexport class PixelsTool extends ToolBox {\n    #transformer!: IllustratorImage | null;\n\n    public async createRawTransformer(src: IllustratorImageSource) {\n        const transformer = await this.layer.illustrator.image.loadImage(src);\n        this.#transformer = transformer;\n    }\n\n    public async createTransformer(context: PixelTransformerContext) {\n        const data = this.layer.context.getImageData(context.from, context.to, context.width, context.height);\n        const transformer = await IllustratorImage.fromImageData(data);\n        this.#transformer = transformer;\n    }\n\n    public rotate(orientation: K) {\n        this.#ensureTransformer();\n        // @ts-expect-error\n        this.#transformer?.rotate(IllustratorImageEnums.Orientation[orientation]);\n\n        return this;\n    }\n\n    public crop(context: PixelTransformerContext) {\n        this.#ensureTransformer();\n        this.#transformer?.crop(context.from, context.to, context.width, context.height);\n        return this;\n    }\n\n    public invert() {\n        this.#ensureTransformer();\n        this.#transformer?.invert();\n        return this;\n    }\n\n    public setBrightness(brightness: number) {\n        this.#ensureTransformer();\n        this.#transformer?.brighten(brightness);\n        return this;\n    }\n\n    public setContrast(contrast: number) {\n        this.#ensureTransformer();\n        this.#transformer?.adjustContrast(contrast);\n        return this;\n    }\n\n    public hueRotate(hue: number) {\n        this.#ensureTransformer();\n        this.#transformer?.huerotate(hue);\n        return this;\n    }\n\n    public gaussianBlur(sigma: number) {\n        this.#ensureTransformer();\n        this.#transformer?.blur(sigma);\n        return this;\n    }\n\n    public unsharpMasking(sigma: number, threshold: number) {\n        this.#ensureTransformer();\n        this.#transformer?.unsharpen(sigma, threshold);\n        return this;\n    }\n\n    public resize(\n        width: number,\n        height?: number | null,\n        algorithm?: K | null\n    ) {\n        this.#ensureTransformer();\n        // @ts-expect-error\n        this.#transformer?.resize(width, height, IllustratorImageEnums.ResizeFilterType[algorithm]);\n        return this;\n    }\n\n    public get transformer() {\n        return this.#transformer;\n    }\n\n    public async getImage() {\n        this.#ensureTransformer();\n        // eslint-disable-next-line\n        return await this.#transformer!.toImage();\n    }\n\n    public getImageSync() {\n        this.#ensureTransformer();\n        // eslint-disable-next-line\n        return this.#transformer!.toImageSync();\n    }\n\n    public async renderTransformer(context: PixelTransformerRenderContext) {\n        const data = await this.getImage();\n        this.history.push((ctx) => {\n            if (\"width\" in context && \"height\" in context) {\n                // eslint-disable-next-line\n                ctx.drawImage(data, context.from, context.to, context.width!, context.height!);\n            } else {\n                ctx.drawImage(data, context.from, context.to);\n            }\n        });\n    }\n\n    public renderTransformerSync(context: PixelTransformerRenderContext) {\n        const data = this.getImageSync();\n        this.history.push((ctx) => {\n            if (\"width\" in context && \"height\" in context) {\n                // eslint-disable-next-line\n                ctx.drawImage(data, context.from, context.to, context.width!, context.height!);\n            } else {\n                ctx.drawImage(data, context.from, context.to);\n            }\n        });\n    }\n\n    public clearTransformer() {\n        this.#transformer = null;\n    }\n\n    #ensureTransformer() {\n        if (!this.#transformer) throw new Error(\"transformer is not created\");\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PixelTransformerRenderContext.html":{"url":"interfaces/PixelTransformerRenderContext.html","title":"interface - PixelTransformerRenderContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PixelTransformerRenderContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/pixels/Pixels.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            from\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            to\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        from:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        to\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        to:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ToolBox } from \"../exports\";\nimport { IllustratorImageSource } from \"../../image/ImageLoader\";\nimport { IllustratorImage, IllustratorImageEnums } from \"../../image/IllustratorImage\";\n\nexport interface PixelTransformerContext {\n    from: number;\n    to: number;\n    width: number;\n    height: number;\n}\n\nexport interface PixelTransformerRenderContext {\n    from: number;\n    to: number;\n    width?: number;\n    height?: number;\n}\n\nexport class PixelsTool extends ToolBox {\n    #transformer!: IllustratorImage | null;\n\n    public async createRawTransformer(src: IllustratorImageSource) {\n        const transformer = await this.layer.illustrator.image.loadImage(src);\n        this.#transformer = transformer;\n    }\n\n    public async createTransformer(context: PixelTransformerContext) {\n        const data = this.layer.context.getImageData(context.from, context.to, context.width, context.height);\n        const transformer = await IllustratorImage.fromImageData(data);\n        this.#transformer = transformer;\n    }\n\n    public rotate(orientation: K) {\n        this.#ensureTransformer();\n        // @ts-expect-error\n        this.#transformer?.rotate(IllustratorImageEnums.Orientation[orientation]);\n\n        return this;\n    }\n\n    public crop(context: PixelTransformerContext) {\n        this.#ensureTransformer();\n        this.#transformer?.crop(context.from, context.to, context.width, context.height);\n        return this;\n    }\n\n    public invert() {\n        this.#ensureTransformer();\n        this.#transformer?.invert();\n        return this;\n    }\n\n    public setBrightness(brightness: number) {\n        this.#ensureTransformer();\n        this.#transformer?.brighten(brightness);\n        return this;\n    }\n\n    public setContrast(contrast: number) {\n        this.#ensureTransformer();\n        this.#transformer?.adjustContrast(contrast);\n        return this;\n    }\n\n    public hueRotate(hue: number) {\n        this.#ensureTransformer();\n        this.#transformer?.huerotate(hue);\n        return this;\n    }\n\n    public gaussianBlur(sigma: number) {\n        this.#ensureTransformer();\n        this.#transformer?.blur(sigma);\n        return this;\n    }\n\n    public unsharpMasking(sigma: number, threshold: number) {\n        this.#ensureTransformer();\n        this.#transformer?.unsharpen(sigma, threshold);\n        return this;\n    }\n\n    public resize(\n        width: number,\n        height?: number | null,\n        algorithm?: K | null\n    ) {\n        this.#ensureTransformer();\n        // @ts-expect-error\n        this.#transformer?.resize(width, height, IllustratorImageEnums.ResizeFilterType[algorithm]);\n        return this;\n    }\n\n    public get transformer() {\n        return this.#transformer;\n    }\n\n    public async getImage() {\n        this.#ensureTransformer();\n        // eslint-disable-next-line\n        return await this.#transformer!.toImage();\n    }\n\n    public getImageSync() {\n        this.#ensureTransformer();\n        // eslint-disable-next-line\n        return this.#transformer!.toImageSync();\n    }\n\n    public async renderTransformer(context: PixelTransformerRenderContext) {\n        const data = await this.getImage();\n        this.history.push((ctx) => {\n            if (\"width\" in context && \"height\" in context) {\n                // eslint-disable-next-line\n                ctx.drawImage(data, context.from, context.to, context.width!, context.height!);\n            } else {\n                ctx.drawImage(data, context.from, context.to);\n            }\n        });\n    }\n\n    public renderTransformerSync(context: PixelTransformerRenderContext) {\n        const data = this.getImageSync();\n        this.history.push((ctx) => {\n            if (\"width\" in context && \"height\" in context) {\n                // eslint-disable-next-line\n                ctx.drawImage(data, context.from, context.to, context.width!, context.height!);\n            } else {\n                ctx.drawImage(data, context.from, context.to);\n            }\n        });\n    }\n\n    public clearTransformer() {\n        this.#transformer = null;\n    }\n\n    #ensureTransformer() {\n        if (!this.#transformer) throw new Error(\"transformer is not created\");\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PixelsTool.html":{"url":"classes/PixelsTool.html","title":"class - PixelsTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PixelsTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/pixels/Pixels.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ToolBox\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clearTransformer\n                            \n                            \n                                    Public\n                                    Async\n                                createRawTransformer\n                            \n                            \n                                    Public\n                                    Async\n                                createTransformer\n                            \n                            \n                                    Public\n                                crop\n                            \n                            \n                                    Public\n                                gaussianBlur\n                            \n                            \n                                    Public\n                                    Async\n                                getImage\n                            \n                            \n                                    Public\n                                getImageSync\n                            \n                            \n                                    Public\n                                hueRotate\n                            \n                            \n                                    Public\n                                invert\n                            \n                            \n                                    Public\n                                    Async\n                                renderTransformer\n                            \n                            \n                                    Public\n                                renderTransformerSync\n                            \n                            \n                                    Public\n                                resize\n                            \n                            \n                                    Public\n                                rotate\n                            \n                            \n                                    Public\n                                setBrightness\n                            \n                            \n                                    Public\n                                setContrast\n                            \n                            \n                                    Public\n                                unsharpMasking\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    transformer\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clearTransformer\n                        \n                    \n                \n            \n            \n                \n                    \n                    clearTransformer()\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createRawTransformer\n                        \n                    \n                \n            \n            \n                \n                    \n                    createRawTransformer(src: IllustratorImageSource)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    src\n                                    \n                                                IllustratorImageSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createTransformer\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTransformer(context: PixelTransformerContext)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                PixelTransformerContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        crop\n                        \n                    \n                \n            \n            \n                \n                    \n                    crop(context: PixelTransformerContext)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                PixelTransformerContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        gaussianBlur\n                        \n                    \n                \n            \n            \n                \n                    \n                    gaussianBlur(sigma: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sigma\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getImage()\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getImageSync\n                        \n                    \n                \n            \n            \n                \n                    \n                    getImageSync()\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        hueRotate\n                        \n                    \n                \n            \n            \n                \n                    \n                    hueRotate(hue: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    hue\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        invert\n                        \n                    \n                \n            \n            \n                \n                    \n                    invert()\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        renderTransformer\n                        \n                    \n                \n            \n            \n                \n                    \n                    renderTransformer(context: PixelTransformerRenderContext)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                PixelTransformerRenderContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        renderTransformerSync\n                        \n                    \n                \n            \n            \n                \n                    \n                    renderTransformerSync(context: PixelTransformerRenderContext)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                PixelTransformerRenderContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        resize\n                        \n                    \n                \n            \n            \n                \n                    \n                    resize(width: number, height?: number | null, algorithm?: K | null)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:83\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    height\n                                    \n                                            number | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    algorithm\n                                    \n                                            K | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        rotate\n                        \n                    \n                \n            \n            \n                \n                    \n                    rotate(orientation: K)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:33\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        K\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    orientation\n                                    \n                                            K\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setBrightness\n                        \n                    \n                \n            \n            \n                \n                    \n                    setBrightness(brightness: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    brightness\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setContrast\n                        \n                    \n                \n            \n            \n                \n                    \n                    setContrast(contrast: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    contrast\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        unsharpMasking\n                        \n                    \n                \n            \n            \n                \n                    \n                    unsharpMasking(sigma: number, threshold: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/pixels/Pixels.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sigma\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    threshold\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        transformer\n                    \n                \n\n                \n                    \n                        gettransformer()\n                    \n                \n                            \n                                \n                                    Defined in src/toolbox/pixels/Pixels.ts:94\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ToolBox } from \"../exports\";\nimport { IllustratorImageSource } from \"../../image/ImageLoader\";\nimport { IllustratorImage, IllustratorImageEnums } from \"../../image/IllustratorImage\";\n\nexport interface PixelTransformerContext {\n    from: number;\n    to: number;\n    width: number;\n    height: number;\n}\n\nexport interface PixelTransformerRenderContext {\n    from: number;\n    to: number;\n    width?: number;\n    height?: number;\n}\n\nexport class PixelsTool extends ToolBox {\n    #transformer!: IllustratorImage | null;\n\n    public async createRawTransformer(src: IllustratorImageSource) {\n        const transformer = await this.layer.illustrator.image.loadImage(src);\n        this.#transformer = transformer;\n    }\n\n    public async createTransformer(context: PixelTransformerContext) {\n        const data = this.layer.context.getImageData(context.from, context.to, context.width, context.height);\n        const transformer = await IllustratorImage.fromImageData(data);\n        this.#transformer = transformer;\n    }\n\n    public rotate(orientation: K) {\n        this.#ensureTransformer();\n        // @ts-expect-error\n        this.#transformer?.rotate(IllustratorImageEnums.Orientation[orientation]);\n\n        return this;\n    }\n\n    public crop(context: PixelTransformerContext) {\n        this.#ensureTransformer();\n        this.#transformer?.crop(context.from, context.to, context.width, context.height);\n        return this;\n    }\n\n    public invert() {\n        this.#ensureTransformer();\n        this.#transformer?.invert();\n        return this;\n    }\n\n    public setBrightness(brightness: number) {\n        this.#ensureTransformer();\n        this.#transformer?.brighten(brightness);\n        return this;\n    }\n\n    public setContrast(contrast: number) {\n        this.#ensureTransformer();\n        this.#transformer?.adjustContrast(contrast);\n        return this;\n    }\n\n    public hueRotate(hue: number) {\n        this.#ensureTransformer();\n        this.#transformer?.huerotate(hue);\n        return this;\n    }\n\n    public gaussianBlur(sigma: number) {\n        this.#ensureTransformer();\n        this.#transformer?.blur(sigma);\n        return this;\n    }\n\n    public unsharpMasking(sigma: number, threshold: number) {\n        this.#ensureTransformer();\n        this.#transformer?.unsharpen(sigma, threshold);\n        return this;\n    }\n\n    public resize(\n        width: number,\n        height?: number | null,\n        algorithm?: K | null\n    ) {\n        this.#ensureTransformer();\n        // @ts-expect-error\n        this.#transformer?.resize(width, height, IllustratorImageEnums.ResizeFilterType[algorithm]);\n        return this;\n    }\n\n    public get transformer() {\n        return this.#transformer;\n    }\n\n    public async getImage() {\n        this.#ensureTransformer();\n        // eslint-disable-next-line\n        return await this.#transformer!.toImage();\n    }\n\n    public getImageSync() {\n        this.#ensureTransformer();\n        // eslint-disable-next-line\n        return this.#transformer!.toImageSync();\n    }\n\n    public async renderTransformer(context: PixelTransformerRenderContext) {\n        const data = await this.getImage();\n        this.history.push((ctx) => {\n            if (\"width\" in context && \"height\" in context) {\n                // eslint-disable-next-line\n                ctx.drawImage(data, context.from, context.to, context.width!, context.height!);\n            } else {\n                ctx.drawImage(data, context.from, context.to);\n            }\n        });\n    }\n\n    public renderTransformerSync(context: PixelTransformerRenderContext) {\n        const data = this.getImageSync();\n        this.history.push((ctx) => {\n            if (\"width\" in context && \"height\" in context) {\n                // eslint-disable-next-line\n                ctx.drawImage(data, context.from, context.to, context.width!, context.height!);\n            } else {\n                ctx.drawImage(data, context.from, context.to);\n            }\n        });\n    }\n\n    public clearTransformer() {\n        this.#transformer = null;\n    }\n\n    #ensureTransformer() {\n        if (!this.#transformer) throw new Error(\"transformer is not created\");\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuadraticBezierCurveOptions.html":{"url":"interfaces/QuadraticBezierCurveOptions.html","title":"interface - QuadraticBezierCurveOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QuadraticBezierCurveOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/shapes/Line.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            controlPointX\n                                        \n                                \n                                \n                                        \n                                            controlPointY\n                                        \n                                \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        controlPointX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        controlPointX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        controlPointY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        controlPointY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseShapeTool } from \"../base/BaseShapeTool\";\n\nexport interface DrawArcOptions {\n    x: number;\n    y: number;\n    radius: number;\n    startAngle: number;\n    endAngle: number;\n    counterclockwise?: boolean;\n}\n\nexport interface ArcToPoint {\n    x1: number;\n    y1: number;\n    x2: number;\n    y2: number;\n    radius: number;\n}\n\nexport interface QuadraticBezierCurveOptions {\n    controlPointX: number;\n    controlPointY: number;\n    x: number;\n    y: number;\n}\n\nexport interface CubicBezierCurveOptions {\n    firstControlPointX: number;\n    firstControlPointY: number;\n    secondControlPointX: number;\n    secondControlPointY: number;\n    x: number;\n    y: number;\n}\n\nexport class LineTool extends BaseShapeTool {\n    public draw(from: number, to: number) {\n        this.history.push((ctx) => {\n            ctx.lineTo(from, to);\n        });\n\n        return this;\n    }\n\n    public arc(options: DrawArcOptions) {\n        this.history.push((ctx) => {\n            ctx.arc(\n                options.x,\n                options.y,\n                options.radius,\n                options.startAngle,\n                options.endAngle,\n                !!options.counterclockwise\n            );\n        });\n\n        return this;\n    }\n\n    public arcTo(options: ArcToPoint) {\n        this.history.push((ctx) => {\n            ctx.arcTo(options.x1, options.y1, options.x2, options.y2, options.radius);\n        });\n\n        return this;\n    }\n\n    public quadraticBezierCurve(options: QuadraticBezierCurveOptions) {\n        this.history.push((ctx) => {\n            ctx.quadraticCurveTo(options.controlPointX, options.controlPointY, options.x, options.y);\n        });\n\n        return this;\n    }\n\n    public cubicBezierCurve(options: CubicBezierCurveOptions) {\n        this.history.push((ctx) => {\n            ctx.bezierCurveTo(\n                options.firstControlPointX,\n                options.firstControlPointY,\n                options.secondControlPointX,\n                options.secondControlPointY,\n                options.x,\n                options.y\n            );\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RawImageData.html":{"url":"interfaces/RawImageData.html","title":"interface - RawImageData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RawImageData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/image/IllustratorImage.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     Uint8ClampedArray | Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Uint8ClampedArray | Buffer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    Transformer,\n    Orientation,\n    AvifConfig,\n    ChromaSubsampling,\n    CompressionType,\n    JsColorType,\n    FilterType,\n    ResizeFilterType,\n    Metadata\n} from \"@napi-rs/image\";\nimport { ImageLoader } from \"./ImageLoader\";\nimport { ImageData } from \"@napi-rs/canvas\";\n\nexport { AvifConfig, Metadata };\n\nexport type IllustratorImageData = ImageData & { colorSpace: PredefinedColorSpace };\n\n// prettier-ignore\nexport const IllustratorImageEnums = {\n    // @ts-expect-error\n    Orientation, ChromaSubsampling, CompressionType, JsColorType, FilterType, ResizeFilterType\n};\n\nexport interface RawImageData {\n    data: Uint8ClampedArray | Buffer;\n    width: number;\n    height: number;\n}\n\nexport class IllustratorImage extends Transformer {\n    public constructor(private readonly _data: Buffer) {\n        super(_data);\n    }\n\n    public get source() {\n        return this._data;\n    }\n\n    public async toImage() {\n        const png = await super.png();\n        return ImageLoader.createImage(png);\n    }\n\n    public toImageSync() {\n        const png = super.pngSync();\n        return ImageLoader.createImage(png);\n    }\n\n    public static async fromImageData(data: ImageData | RawImageData) {\n        const transformer = super.fromRgbaPixels(data.data, data.width, data.height);\n        const iImage = new IllustratorImage(await transformer.rawPixels());\n        return iImage;\n    }\n\n    public static fromImageDataSync(data: ImageData | RawImageData) {\n        const transformer = super.fromRgbaPixels(data.data, data.width, data.height);\n        const iImage = new IllustratorImage(transformer.rawPixelsSync());\n        return iImage;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RectangleOptions.html":{"url":"interfaces/RectangleOptions.html","title":"interface - RectangleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RectangleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/shapes/Rectangle.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseShapeTool } from \"../base/BaseShapeTool\";\n\nexport interface RectangleOptions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\nexport interface RoundedRectangleOptions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    radius: number;\n}\n\nexport class RectangleTool extends BaseShapeTool {\n    public draw(options: RectangleOptions) {\n        this.history.push((ctx) => {\n            ctx.rect(options.x, options.y, options.width, options.height);\n        });\n\n        return this;\n    }\n\n    public drawRounded(options: RoundedRectangleOptions) {\n        if (options.width  {\n            ctx.beginPath();\n            ctx.moveTo(options.x + options.radius, options.y);\n            ctx.arcTo(\n                options.x + options.width,\n                options.y,\n                options.x + options.width,\n                options.y + options.height,\n                options.radius\n            );\n            ctx.arcTo(\n                options.x + options.width,\n                options.y + options.height,\n                options.x,\n                options.y + options.height,\n                options.radius\n            );\n            ctx.arcTo(options.x, options.y + options.height, options.x, options.y, options.radius);\n            ctx.arcTo(options.x, options.y, options.x + options.width, options.y, options.radius);\n            ctx.closePath();\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RectangleTool.html":{"url":"classes/RectangleTool.html","title":"class - RectangleTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RectangleTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/shapes/Rectangle.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseShapeTool\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                drawRounded\n                            \n                            \n                                    Public\n                                addPoint\n                            \n                            \n                                    Public\n                                clip\n                            \n                            \n                                    Public\n                                fill\n                            \n                            \n                                    Public\n                                move\n                            \n                            \n                                    Public\n                                removePoint\n                            \n                            \n                                    Public\n                                setDashOffset\n                            \n                            \n                                    Public\n                                setFillColor\n                            \n                            \n                                    Public\n                                setLineCap\n                            \n                            \n                                    Public\n                                setLineDash\n                            \n                            \n                                    Public\n                                setLineJoinStyle\n                            \n                            \n                                    Public\n                                setLineWidth\n                            \n                            \n                                    Public\n                                setMiterLimit\n                            \n                            \n                                    Public\n                                setStrokeColor\n                            \n                            \n                                    Public\n                                stroke\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        draw\n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(options: RectangleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/shapes/Rectangle.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                RectangleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        drawRounded\n                        \n                    \n                \n            \n            \n                \n                    \n                    drawRounded(options: RoundedRectangleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/shapes/Rectangle.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                RoundedRectangleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addPoint\n                        \n                    \n                \n            \n            \n                \n                    \n                    addPoint()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:62\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clip\n                        \n                    \n                \n            \n            \n                \n                    \n                    clip(options?: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:116\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fill\n                        \n                    \n                \n            \n            \n                \n                    \n                    fill(options?: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:86\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        move\n                        \n                    \n                \n            \n            \n                \n                    \n                    move(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:78\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removePoint\n                        \n                    \n                \n            \n            \n                \n                    \n                    removePoint()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:70\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setDashOffset\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDashOffset(offset: number)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setFillColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setFillColor(color: string | CanvasGradient | CanvasPattern)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:6\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                            string | CanvasGradient | CanvasPattern\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineCap\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineCap(lineCapStyle: CanvasLineCap)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lineCapStyle\n                                    \n                                            CanvasLineCap\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineDash\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineDash(segments: number[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:108\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    segments\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineJoinStyle\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineJoinStyle(style: \"round\" | \"bevel\" | \"miter\")\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:46\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    style\n                                    \n                                            \"round\" | \"bevel\" | \"miter\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLineWidth\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLineWidth(width: number)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:22\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setMiterLimit\n                        \n                    \n                \n            \n            \n                \n                    \n                    setMiterLimit(limit: number)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:54\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setStrokeColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setStrokeColor(color: string | CanvasGradient | CanvasPattern)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:14\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                            string | CanvasGradient | CanvasPattern\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        stroke\n                        \n                    \n                \n            \n            \n                \n                    \n                    stroke(options?: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseShapeTool\n\n                \n            \n            \n                \n                        Defined in         BaseShapeTool:100\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BaseShapeTool } from \"../base/BaseShapeTool\";\n\nexport interface RectangleOptions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\nexport interface RoundedRectangleOptions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    radius: number;\n}\n\nexport class RectangleTool extends BaseShapeTool {\n    public draw(options: RectangleOptions) {\n        this.history.push((ctx) => {\n            ctx.rect(options.x, options.y, options.width, options.height);\n        });\n\n        return this;\n    }\n\n    public drawRounded(options: RoundedRectangleOptions) {\n        if (options.width  {\n            ctx.beginPath();\n            ctx.moveTo(options.x + options.radius, options.y);\n            ctx.arcTo(\n                options.x + options.width,\n                options.y,\n                options.x + options.width,\n                options.y + options.height,\n                options.radius\n            );\n            ctx.arcTo(\n                options.x + options.width,\n                options.y + options.height,\n                options.x,\n                options.y + options.height,\n                options.radius\n            );\n            ctx.arcTo(options.x, options.y + options.height, options.x, options.y, options.radius);\n            ctx.arcTo(options.x, options.y, options.x + options.width, options.y, options.radius);\n            ctx.closePath();\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RoundedRectangleOptions.html":{"url":"interfaces/RoundedRectangleOptions.html","title":"interface - RoundedRectangleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RoundedRectangleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/shapes/Rectangle.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            radius\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        radius\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        radius:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseShapeTool } from \"../base/BaseShapeTool\";\n\nexport interface RectangleOptions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\nexport interface RoundedRectangleOptions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    radius: number;\n}\n\nexport class RectangleTool extends BaseShapeTool {\n    public draw(options: RectangleOptions) {\n        this.history.push((ctx) => {\n            ctx.rect(options.x, options.y, options.width, options.height);\n        });\n\n        return this;\n    }\n\n    public drawRounded(options: RoundedRectangleOptions) {\n        if (options.width  {\n            ctx.beginPath();\n            ctx.moveTo(options.x + options.radius, options.y);\n            ctx.arcTo(\n                options.x + options.width,\n                options.y,\n                options.x + options.width,\n                options.y + options.height,\n                options.radius\n            );\n            ctx.arcTo(\n                options.x + options.width,\n                options.y + options.height,\n                options.x,\n                options.y + options.height,\n                options.radius\n            );\n            ctx.arcTo(options.x, options.y + options.height, options.x, options.y, options.radius);\n            ctx.arcTo(options.x, options.y, options.x + options.width, options.y, options.radius);\n            ctx.closePath();\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShadowTool.html":{"url":"classes/ShadowTool.html","title":"class - ShadowTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShadowTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/filters/Shadow.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ToolBox\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                setBlur\n                            \n                            \n                                    Public\n                                setColor\n                            \n                            \n                                    Public\n                                setOffsetX\n                            \n                            \n                                    Public\n                                setOffsetY\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setBlur\n                        \n                    \n                \n            \n            \n                \n                    \n                    setBlur(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Shadow.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setColor(color: string)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Shadow.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setOffsetX\n                        \n                    \n                \n            \n            \n                \n                    \n                    setOffsetX(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Shadow.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setOffsetY\n                        \n                    \n                \n            \n            \n                \n                    \n                    setOffsetY(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Shadow.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ToolBox } from \"../base/ToolBox\";\n\nexport class ShadowTool extends ToolBox {\n    public setColor(color: string) {\n        this.history.push((ctx) => {\n            ctx.shadowColor = color;\n        });\n\n        return this;\n    }\n\n    public setBlur(amount: number) {\n        this.history.push((ctx) => {\n            ctx.shadowBlur = amount;\n        });\n\n        return this;\n    }\n\n    public setOffsetX(amount: number) {\n        this.history.push((ctx) => {\n            ctx.shadowOffsetX = amount;\n        });\n\n        return this;\n    }\n\n    public setOffsetY(amount: number) {\n        this.history.push((ctx) => {\n            ctx.shadowOffsetY = amount;\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SharpenTool.html":{"url":"classes/SharpenTool.html","title":"class - SharpenTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SharpenTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/filters/Sharpen.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ConvolutionTool\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                applySharpness\n                            \n                            \n                                    Public\n                                convolute\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        applySharpness\n                        \n                    \n                \n            \n            \n                \n                    \n                    applySharpness(amount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/filters/Sharpen.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        convolute\n                        \n                    \n                \n            \n            \n                \n                    \n                    convolute(options: ConvolutionOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ConvolutionTool\n\n                \n            \n            \n                \n                        Defined in         ConvolutionTool:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ConvolutionOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConvolutionTool } from \"./ConvolutionFilter\";\n\nexport class SharpenTool extends ConvolutionTool {\n    public applySharpness(amount = 1) {\n        amount = amount \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TextDataSource.html":{"url":"interfaces/TextDataSource.html","title":"interface - TextDataSource","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TextDataSource\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/DataSource.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            config\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        config:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IllustratorImageSource } from \"../image/ImageLoader\";\n\nexport interface IllustratorDataSource {\n    name: string;\n    type: \"text\" | \"image\";\n    data: TextDataSource | ImageDataSource;\n}\n\nexport interface TextDataSource {\n    value: string;\n    config: {\n        x: number;\n        y: number;\n        maxWidth?: number;\n        font: string;\n        fontPath?: string;\n    };\n}\n\n// TODO: template api\nexport interface ImageDataSource {\n    value: IllustratorImageSource;\n    config: {\n        x: number;\n        y: number;\n        width: number;\n        height: number;\n        radius?: number;\n    };\n}\n\nexport class DataSource {\n    public data: Array = [];\n\n    public loadData(data: Array) {\n        if (!Array.isArray(data)) throw new TypeError(\"data source must be array\");\n        this.data = data;\n    }\n\n    public addData(data: IllustratorDataSource) {\n        this.data.push(data);\n    }\n\n    public removeData(nameOrFn: string | ((ctx: IllustratorDataSource) => boolean)) {\n        if (typeof nameOrFn === \"string\") this.data = this.data.filter((ds) => ds.name === nameOrFn);\n        if (typeof nameOrFn === \"function\") this.data = this.data.filter(nameOrFn);\n        throw new Error(\"invalid parameter\");\n    }\n\n    public get(nameOrFn: string | ((ctx: IllustratorDataSource) => boolean)) {\n        return this.data.find(typeof nameOrFn === \"function\" ? nameOrFn : (fn) => fn.name === nameOrFn);\n    }\n\n    public toJSON() {\n        return this.data;\n    }\n\n    public toArray() {\n        return this.data;\n    }\n\n    public toString(): `DataSource` {\n        return `DataSource`;\n    }\n\n    public clone() {\n        const ds = new DataSource();\n        ds.loadData(this.data.slice());\n        return ds;\n    }\n\n    public *[Symbol.iterator](): IterableIterator {\n        yield* this.data ?? [];\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TextTool.html":{"url":"classes/TextTool.html","title":"class - TextTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TextTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/text/Text.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ToolBox\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getFonts\n                            \n                            \n                                    Public\n                                hasFont\n                            \n                            \n                                    Public\n                                measure\n                            \n                            \n                                    Public\n                                registerFont\n                            \n                            \n                                    Public\n                                registerFontPath\n                            \n                            \n                                    Public\n                                registerFontsDir\n                            \n                            \n                                    Public\n                                setColor\n                            \n                            \n                                    Public\n                                setDirection\n                            \n                            \n                                    Public\n                                setFont\n                            \n                            \n                                    Public\n                                setStrokeColor\n                            \n                            \n                                    Public\n                                setTextAlignment\n                            \n                            \n                                    Public\n                                setTextBaseline\n                            \n                            \n                                    Public\n                                strokeText\n                            \n                            \n                                    Public\n                                writeText\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getFonts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFonts()\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        hasFont\n                        \n                    \n                \n            \n            \n                \n                    \n                    hasFont(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        measure\n                        \n                    \n                \n            \n            \n                \n                    \n                    measure(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        registerFont\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerFont(font: Buffer, nameAlias?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    font\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    nameAlias\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        registerFontPath\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerFontPath(fontPath: string, nameAlias?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fontPath\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    nameAlias\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        registerFontsDir\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerFontsDir(fontDir: string)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fontDir\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setColor(color: string | CanvasGradient | CanvasPattern)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                            string | CanvasGradient | CanvasPattern\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setDirection\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDirection(direction: \"inherit\" | \"ltr\" | \"rtl\")\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    direction\n                                    \n                                            \"inherit\" | \"ltr\" | \"rtl\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setFont\n                        \n                    \n                \n            \n            \n                \n                    \n                    setFont(name: string, size: string, style?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    size\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    style\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setStrokeColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    setStrokeColor(color: string | CanvasGradient | CanvasPattern)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                            string | CanvasGradient | CanvasPattern\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setTextAlignment\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTextAlignment(alignment: \"center\" | \"end\" | \"left\" | \"right\" | \"start\")\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    alignment\n                                    \n                                            \"center\" | \"end\" | \"left\" | \"right\" | \"start\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setTextBaseline\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTextBaseline(alignment: \"alphabetic\" | \"bottom\" | \"hanging\" | \"ideographic\" | \"middle\" | \"top\")\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    alignment\n                                    \n                                            \"alphabetic\" | \"bottom\" | \"hanging\" | \"ideographic\" | \"middle\" | \"top\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        strokeText\n                        \n                    \n                \n            \n            \n                \n                    \n                    strokeText(text: string, x: number, y: number, maxWidth?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxWidth\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        writeText\n                        \n                    \n                \n            \n            \n                \n                    \n                    writeText(text: string, x: number, y: number, maxWidth?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/text/Text.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxWidth\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ToolBox } from \"../base/ToolBox\";\nimport { GlobalFonts } from \"@napi-rs/canvas\";\nimport { makeArgs } from \"../../utils/makeArgs\";\n\nexport class TextTool extends ToolBox {\n    public registerFont(font: Buffer, nameAlias?: string) {\n        return GlobalFonts.register(font, nameAlias);\n    }\n\n    public registerFontPath(fontPath: string, nameAlias?: string) {\n        return GlobalFonts.registerFromPath(fontPath, nameAlias);\n    }\n\n    public registerFontsDir(fontDir: string) {\n        return GlobalFonts.loadFontsFromDir(fontDir);\n    }\n\n    public getFonts() {\n        return GlobalFonts.families;\n    }\n\n    public hasFont(name: string) {\n        return GlobalFonts.has(name);\n    }\n\n    public setDirection(direction: \"inherit\" | \"ltr\" | \"rtl\") {\n        this.history.push((ctx) => {\n            ctx.direction = direction;\n        });\n\n        return this;\n    }\n\n    public setTextAlignment(alignment: \"center\" | \"end\" | \"left\" | \"right\" | \"start\") {\n        this.history.push((ctx) => {\n            ctx.textAlign = alignment;\n        });\n\n        return this;\n    }\n\n    public setTextBaseline(alignment: \"alphabetic\" | \"bottom\" | \"hanging\" | \"ideographic\" | \"middle\" | \"top\") {\n        this.history.push((ctx) => {\n            ctx.textBaseline = alignment;\n        });\n\n        return this;\n    }\n\n    public setFont(name: string, size: string, style?: string) {\n        this.history.push((ctx) => {\n            ctx.font = `${style ? style + \" \" : \"\"}${name}${size ? \" \" + size : \"\"}`;\n        });\n\n        return this;\n    }\n\n    public setColor(color: string | CanvasGradient | CanvasPattern) {\n        this.history.push((ctx) => {\n            ctx.fillStyle = color;\n        });\n\n        return this;\n    }\n\n    public setStrokeColor(color: string | CanvasGradient | CanvasPattern) {\n        this.history.push((ctx) => {\n            ctx.strokeStyle = color;\n        });\n\n        return this;\n    }\n\n    public writeText(text: string, x: number, y: number, maxWidth?: number) {\n        this.history.push((ctx) => {\n            // @ts-expect-error\n            ctx.fillText(...makeArgs((el) => el != null, [text, x, y, maxWidth]));\n        });\n\n        return this;\n    }\n\n    public strokeText(text: string, x: number, y: number, maxWidth?: number) {\n        this.history.push((ctx) => {\n            // @ts-expect-error\n            ctx.strokeText(...makeArgs((el) => el != null, [text, x, y, maxWidth]));\n        });\n\n        return this;\n    }\n\n    public measure(text: string) {\n        return this.layer.utils.measureText(text);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ToolBox.html":{"url":"classes/ToolBox.html","title":"class - ToolBox","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ToolBox\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/base/ToolBox.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(layer: Layer, autoClear)\n                    \n                \n                        \n                            \n                                Defined in src/toolbox/base/ToolBox.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        layer\n                                                  \n                                                        \n                                                                        Layer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        autoClear\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/toolbox/base/ToolBox.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/toolbox/base/ToolBox.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                    \n                        \n                                Defined in src/toolbox/base/ToolBox.ts:9\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/ToolBox.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/ToolBox.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/base/ToolBox.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SKRSContext2D } from \"@napi-rs/canvas\";\nimport { Layer } from \"../../layer/Layer\";\n\nexport type Awaitable = Promise | T;\nexport type HistoryCallback = (ctx: SKRSContext2D) => Awaitable;\n\nexport class ToolBox {\n    public history: HistoryCallback[] = [];\n    public constructor(public readonly layer: Layer, public autoClear = false) {}\n\n    public save() {\n        this.history.push((ctx) => {\n            ctx.save();\n        });\n\n        return this;\n    }\n\n    public restore() {\n        this.history.push((ctx) => {\n            ctx.restore();\n        });\n\n        return this;\n    }\n\n    public render() {\n        this.layer.applyTool(this);\n        if (this.autoClear) this.history = [];\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TransformOptions.html":{"url":"interfaces/TransformOptions.html","title":"interface - TransformOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TransformOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/transform/Transform.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            horizontalScaling\n                                        \n                                \n                                \n                                        \n                                            horizontalSkewing\n                                        \n                                \n                                \n                                        \n                                            horizontalTranslation\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            verticalScaling\n                                        \n                                \n                                \n                                        \n                                            verticalSkewing\n                                        \n                                \n                                \n                                        \n                                            verticalTranslation\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        horizontalScaling\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        horizontalScaling:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        horizontalSkewing\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        horizontalSkewing:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        horizontalTranslation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        horizontalTranslation:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        verticalScaling\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        verticalScaling:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        verticalSkewing\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        verticalSkewing:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        verticalTranslation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        verticalTranslation:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ToolBox } from \"../base/ToolBox\";\n\nexport interface TransformOptions {\n    horizontalScaling?: number;\n    verticalSkewing: number;\n    horizontalSkewing: number;\n    verticalScaling?: number;\n    horizontalTranslation: number;\n    verticalTranslation: number;\n}\n\nexport class TransformTool extends ToolBox {\n    public translate(x: number, y: number) {\n        this.history.push((ctx) => {\n            ctx.translate(x, y);\n        });\n\n        return this;\n    }\n\n    public transform(options: TransformOptions) {\n        this.history.push((ctx) => {\n            options.horizontalScaling ??= 1;\n            options.verticalScaling ??= 1;\n\n            ctx.transform(\n                options.horizontalScaling,\n                options.verticalSkewing,\n                options.horizontalSkewing,\n                options.verticalScaling,\n                options.horizontalTranslation,\n                options.verticalTranslation\n            );\n        });\n\n        return this;\n    }\n\n    public setTransform(options: TransformOptions) {\n        this.history.push((ctx) => {\n            options.horizontalScaling ??= 1;\n            options.verticalScaling ??= 1;\n\n            ctx.setTransform(\n                options.horizontalScaling,\n                options.verticalSkewing,\n                options.horizontalSkewing,\n                options.verticalScaling,\n                options.horizontalTranslation,\n                options.verticalTranslation\n            );\n        });\n\n        return this;\n    }\n\n    public resetTransform() {\n        this.history.push((ctx) => {\n            ctx.resetTransform();\n        });\n\n        return this;\n    }\n\n    public getTransform() {\n        const transformation = this.layer.utils.getLayerTransformation();\n\n        return {\n            horizontalScaling: transformation.a,\n            verticalSkewing: transformation.b,\n            horizontalSkewing: transformation.c,\n            verticalScaling: transformation.d,\n            horizontalTranslation: transformation.e,\n            verticalTranslation: transformation.f\n        } as TransformOptions;\n    }\n\n    public rotate(angle: number) {\n        this.history.push((ctx) => {\n            ctx.rotate(angle);\n        });\n\n        return this;\n    }\n\n    public scale(x: number, y: number) {\n        this.history.push((ctx) => {\n            ctx.scale(x, y);\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TransformTool.html":{"url":"classes/TransformTool.html","title":"class - TransformTool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TransformTool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/toolbox/transform/Transform.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ToolBox\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoClear\n                            \n                            \n                                    Public\n                                history\n                            \n                            \n                                    Public\n                                    Readonly\n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getTransform\n                            \n                            \n                                    Public\n                                resetTransform\n                            \n                            \n                                    Public\n                                rotate\n                            \n                            \n                                    Public\n                                scale\n                            \n                            \n                                    Public\n                                setTransform\n                            \n                            \n                                    Public\n                                transform\n                            \n                            \n                                    Public\n                                translate\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                restore\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        autoClear\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HistoryCallback[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Layer\n\n                    \n                \n                        \n                            \n                                Inherited from         ToolBox\n\n                            \n                        \n                    \n                        \n                                Defined in         ToolBox:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getTransform\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransform()\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/transform/Transform.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         TransformOptions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        resetTransform\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetTransform()\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/transform/Transform.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        rotate\n                        \n                    \n                \n            \n            \n                \n                    \n                    rotate(angle: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/transform/Transform.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    angle\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        scale\n                        \n                    \n                \n            \n            \n                \n                    \n                    scale(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/transform/Transform.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setTransform\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTransform(options: TransformOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/transform/Transform.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                TransformOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(options: TransformOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/transform/Transform.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                TransformOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        translate\n                        \n                    \n                \n            \n            \n                \n                    \n                    translate(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Defined in src/toolbox/transform/Transform.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        restore\n                        \n                    \n                \n            \n            \n                \n                    \n                    restore()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Inherited from         ToolBox\n\n                \n            \n            \n                \n                        Defined in         ToolBox:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ToolBox } from \"../base/ToolBox\";\n\nexport interface TransformOptions {\n    horizontalScaling?: number;\n    verticalSkewing: number;\n    horizontalSkewing: number;\n    verticalScaling?: number;\n    horizontalTranslation: number;\n    verticalTranslation: number;\n}\n\nexport class TransformTool extends ToolBox {\n    public translate(x: number, y: number) {\n        this.history.push((ctx) => {\n            ctx.translate(x, y);\n        });\n\n        return this;\n    }\n\n    public transform(options: TransformOptions) {\n        this.history.push((ctx) => {\n            options.horizontalScaling ??= 1;\n            options.verticalScaling ??= 1;\n\n            ctx.transform(\n                options.horizontalScaling,\n                options.verticalSkewing,\n                options.horizontalSkewing,\n                options.verticalScaling,\n                options.horizontalTranslation,\n                options.verticalTranslation\n            );\n        });\n\n        return this;\n    }\n\n    public setTransform(options: TransformOptions) {\n        this.history.push((ctx) => {\n            options.horizontalScaling ??= 1;\n            options.verticalScaling ??= 1;\n\n            ctx.setTransform(\n                options.horizontalScaling,\n                options.verticalSkewing,\n                options.horizontalSkewing,\n                options.verticalScaling,\n                options.horizontalTranslation,\n                options.verticalTranslation\n            );\n        });\n\n        return this;\n    }\n\n    public resetTransform() {\n        this.history.push((ctx) => {\n            ctx.resetTransform();\n        });\n\n        return this;\n    }\n\n    public getTransform() {\n        const transformation = this.layer.utils.getLayerTransformation();\n\n        return {\n            horizontalScaling: transformation.a,\n            verticalSkewing: transformation.b,\n            horizontalSkewing: transformation.c,\n            verticalScaling: transformation.d,\n            horizontalTranslation: transformation.e,\n            verticalTranslation: transformation.f\n        } as TransformOptions;\n    }\n\n    public rotate(angle: number) {\n        this.history.push((ctx) => {\n            ctx.rotate(angle);\n        });\n\n        return this;\n    }\n\n    public scale(x: number, y: number) {\n        this.history.push((ctx) => {\n            ctx.scale(x, y);\n        });\n\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n0.3.3 (2022-06-18)\nFeatures\n\nadd Layer and ToolBox utilities (efbcb18)\nLayerUtils: add getCenterPoint method (1fec6bb)\n\n0.3.2 (2022-06-18)\nBug Fixes\n\nutils: fix makeArgs filter (819a50c)\n\n0.3.1 (2022-06-18)\nBug Fixes\n\nTextTool: flatten args (8b4f10b)\n\n0.3.0 (2022-06-18)\nBug Fixes\n\nEraser: close path (7825830)\n\nFeatures\n\nLayerTools: add clearCache method (2000cb7)\nLayerTools: add layer tools utility (0f8f753)\nPixelsTool: add pixels utility base (e42a539)\nPixelTool: add manipulation methods (5156a89)\n\n0.1.0 (2022-06-14)\nBug Fixes\n\nConvolutionFilter: remove worker impl (a1c559a)\nexport canvas and image (9b18a82)\nIllustrator: skip background layer (488fc9f)\nLayer: add tool instance check (eefa81d)\nLayer: expose context by default (788adbd)\nmove commitlint to pre-commit (5a8065f)\nText: text tool not rendering (93a3269)\n\nFeatures\n\nadd base api methods (9b3316b)\nadd layer manager and color utilities (783dd58)\nadd loadImage utility (c24ef1d)\ncolors: add color api base (7cd61f7)\nConvolutionFilter: export matrices (de626b5)\nConvolution: implement convolution filter (a7584e9)\nDataSource: add base (cfcdd83)\nEllipse: add circle method (5af4c28)\nIllustrator: add animation api (0074071)\nIllustrator: add image utilities api (a209619)\nIllustratorImage: add ImageData exports (ab07a24)\nImageLoader: add ImageData support (d96aa88)\nImageLoader: add Uint8Array source type (2a11331)\nImageTool: add rounded image support (#26) (a7a69c3)\ninitialize project base (71e80d0)\nLayerUtils: add image data methods (c8be6f1)\nRectangle: add drawRounded method (#21) (896a98b)\nshapes: ellipse tool (afd8532)\ntoolbox: add more tools (c1a2b88)\ntoolbox: add sharpen tool (4132053)\ntoolbox: add transform tool (e0dc795)\nToolBox: shape utilities (65526ea)\nTools: add more tools (d4c5685)\nutils: add ColorUtil (10398f8)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\nContribution Guide\nThanks for your interest in contributing to this project. We don't have strict rules in general, but here are the things\nto be followed while contributing to this project.\nCode Style\nFormatting\n\nMake sure to format the code before the deployment (run yarn format to do the magic)\n\nFile names\n\nMake sure to use PascalCase for the files containing a class (Eg: Illustrator, LayerManager etc.)\nUse lowercase/camelCase for other files.\n\nRules\n\nAlways use camelCase for function names\nUse PascalCase for class names\nUse English\nProperly document the APIs\nAlways test the code properly before making a pull requests\nMake sure to generate changelogs, and explain what the update does.\nFollow conventional commits\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            consumeStream   (src/.../ImageLoader.ts)\n                        \n                        \n                            createImage   (src/.../ImageLoader.ts)\n                        \n                        \n                            generateRandomId   (src/.../randomId.ts)\n                        \n                        \n                            httpReq   (src/.../ImageLoader.ts)\n                        \n                        \n                            makeArgs   (src/.../makeArgs.ts)\n                        \n                        \n                            makeRequest   (src/.../ImageLoader.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/image/ImageLoader.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        consumeStream\n                        \n                    \n                \n            \n            \n                \nconsumeStream(stream: Readable)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stream\n                                    \n                                            Readable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createImage\n                        \n                    \n                \n            \n            \n                \ncreateImage(source: Buffer, bufferOnly)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    source\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    bufferOnly\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        httpReq\n                        \n                    \n                \n            \n            \n                \nhttpReq(link)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    link\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        makeRequest\n                        \n                    \n                \n            \n            \n                \nmakeRequest(link, redirectCount: number, resolve, reject)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    link\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    redirectCount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resolve\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reject\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/utils/randomId.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateRandomId\n                        \n                    \n                \n            \n            \n                \ngenerateRandomId()\n                \n            \n\n\n\n\n        \n    \n    src/utils/makeArgs.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        makeArgs\n                        \n                    \n                \n            \n            \n                \nmakeArgs(filter?, ...args: undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    args\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n    \n    \n         Illustrator.js\n         JavaScript image processing library\n    \n\n\n\nInstallation\n# install with npm\n$ npm install illustrator.js\n# install with yarn\n$ yarn add illustrator.js🎉 No build tools required!\nFeatures\n\nIllustrator is fast, powered by @napi-rs/canvas 🚀\nIllustrator provides beginner friendly API 🤓\nTypeScript supported 💪\nLayers API 🎚️\nColor utilities API 🎨\nFilters 📸\nTools such as eraser, shapes, text, etc. ⚒️\nImage manipulation (crop, brightness, blur, sharpness, format conversion, compression and much more..)\nAnimation API (GIF) 😎\n\nand more...\nDocumentation\nhttps://illustrator.js.org\nnpm\nhttps://www.npmjs.com/package/illustrator.js\nQuick Example\nCreating GIF\n\nShow code\n\n// import\nimport { Illustrator } from \"illustrator.js\";\nimport fs from \"fs\";\n\n// create illustrator instance\nconst illustrator = new Illustrator(512, 512);\n\n// colors array\nconst colors = [\"#FFFFFF\", \"#FF0000\", \"#FFFF00\", \"#FF00FF\", \"#00FF00\", \"#0000FF\"];\n\n// for a color in colors array, create new layer and fill the layer with that color\nfor (const color of colors) {\n    // create new layer\n    const layer = illustrator.layers.createLayer({\n        name: color\n    });\n    // create background color tool\n    const bgTool = layer.tools.get(\"BackgroundColorTool\");\n    // set fill color\n    bgTool.setFillColor(color);\n    // fill background\n    bgTool.fill(0, 0, illustrator.width, illustrator.height);\n    // render this tool to the layer\n    bgTool.render();\n}\n\n// get animation api\nconst animation = illustrator.animation;\n// get all layers and transform to animation frame\nconst layers = illustrator.layers.getAllLayers().map(m => ({\n    duration: 500,\n    frame: m.layer\n}));\n// animation config, set repeat to infinite (or 0) and add our layers to frames\nanimation.setRepeat(0).addFrames(layers);\n\n// render the frames\nconst output = await animation.createAnimation();\n// write the output file\noutput.pipe(fs.createWriteStream(\"./animation.gif\"));Output Preview\n\n\n\nOther Examples\nCheck out ~/examples for more.\nCanvacord\nIt may be hard to get simple things done via this library.\nCheck out Canvacord for beginner-friendly utility APIs, built with Illustrator.js.\nSpecial thanks to 💖\nBrooooooklyn and the people behind napi-rs. Illustrator.js is here only because of their hard work behind the projects under napi-rs.\nDiscord\nJoin our official Discord support server: Join Now\nHelp us keep this project alive\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 DevAndromeda\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    30 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    24 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.3.3\n        \n            Description : JavaScript image processing library\n        \n            Keywords : illustrator, canvas, image, javascript, api, processing, ijs\n        \n            Homepage : https://illustrator.js.org\n        \n            Bugs : https://github.com/DevAndromeda/illustrator.js/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/DevAndromeda/illustrator.js.git\n        \n            Author : DevAndromeda \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Awaitable   (src/.../ToolBox.ts)\n                        \n                        \n                            DrawCircleOptions   (src/.../Ellipse.ts)\n                        \n                        \n                            FilterArgs   (src/.../Filter.ts)\n                        \n                        \n                            HistoryCallback   (src/.../ToolBox.ts)\n                        \n                        \n                            IllustratorImageData   (src/.../IllustratorImage.ts)\n                        \n                        \n                            IllustratorImageSource   (src/.../ImageLoader.ts)\n                        \n                        \n                            LayerResolvable   (src/.../LayerManager.ts)\n                        \n                        \n                            LayerToolHistory   (src/.../Layer.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/toolbox/base/ToolBox.ts\n    \n    \n        \n            \n                \n                    \n                    Awaitable\n                \n            \n            \n                \n                        Promise | T\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HistoryCallback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/toolbox/shapes/Ellipse.ts\n    \n    \n        \n            \n                \n                    \n                    DrawCircleOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/toolbox/filters/Filter.ts\n    \n    \n        \n            \n                \n                    \n                    FilterArgs\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/image/IllustratorImage.ts\n    \n    \n        \n            \n                \n                    \n                    IllustratorImageData\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/image/ImageLoader.ts\n    \n    \n        \n            \n                \n                    \n                    IllustratorImageSource\n                \n            \n            \n                \n                        string | URL | Buffer | Image | Canvas | ArrayBuffer | SharedArrayBuffer | Uint8Array | Layer | Illustrator | IllustratorImage | ImageData\n\n                \n            \n        \n    \n    src/layer/LayerManager.ts\n    \n    \n        \n            \n                \n                    \n                    LayerResolvable\n                \n            \n            \n                \n                            number | Layer | string\n\n                \n            \n        \n    \n    src/layer/Layer.ts\n    \n    \n        \n            \n                \n                    \n                    LayerToolHistory\n                \n            \n            \n                \n                        Array | void>[]\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IllustratorImageEnums   (src/.../IllustratorImage.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/image/IllustratorImage.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IllustratorImageEnums\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    // @ts-expect-error\n    Orientation, ChromaSubsampling, CompressionType, JsColorType, FilterType, ResizeFilterType\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
